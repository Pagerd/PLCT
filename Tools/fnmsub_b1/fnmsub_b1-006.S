
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Apr 18 04:01:14 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/cgfs_fext/RV64Zfinx/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fnmsub_b1 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fnmsub_b1)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3835:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffc55555;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11442*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11442*FLEN/8, x13, x9, x10)

inst_3836:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x0; valaddr_reg:x12; val_offset:11445*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11445*FLEN/8, x13, x9, x10)

inst_3837:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x80000000; valaddr_reg:x12; val_offset:11448*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11448*FLEN/8, x13, x9, x10)

inst_3838:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x1; valaddr_reg:x12; val_offset:11451*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11451*FLEN/8, x13, x9, x10)

inst_3839:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x80000001; valaddr_reg:x12; val_offset:11454*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11454*FLEN/8, x13, x9, x10)

inst_3840:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x2; valaddr_reg:x12; val_offset:11457*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11457*FLEN/8, x13, x9, x10)

inst_3841:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11460*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11460*FLEN/8, x13, x9, x10)

inst_3842:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11463*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11463*FLEN/8, x13, x9, x10)

inst_3843:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11466*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11466*FLEN/8, x13, x9, x10)

inst_3844:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x800000; valaddr_reg:x12; val_offset:11469*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11469*FLEN/8, x13, x9, x10)

inst_3845:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x80800000; valaddr_reg:x12; val_offset:11472*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11472*FLEN/8, x13, x9, x10)

inst_3846:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x800001; valaddr_reg:x12; val_offset:11475*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11475*FLEN/8, x13, x9, x10)

inst_3847:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x80855555; valaddr_reg:x12; val_offset:11478*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11478*FLEN/8, x13, x9, x10)

inst_3848:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11481*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11481*FLEN/8, x13, x9, x10)

inst_3849:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11484*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11484*FLEN/8, x13, x9, x10)

inst_3850:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11487*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11487*FLEN/8, x13, x9, x10)

inst_3851:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0xff800000; valaddr_reg:x12; val_offset:11490*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11490*FLEN/8, x13, x9, x10)

inst_3852:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11493*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11493*FLEN/8, x13, x9, x10)

inst_3853:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11496*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11496*FLEN/8, x13, x9, x10)

inst_3854:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11499*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11499*FLEN/8, x13, x9, x10)

inst_3855:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11502*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11502*FLEN/8, x13, x9, x10)

inst_3856:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11505*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11505*FLEN/8, x13, x9, x10)

inst_3857:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11508*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11508*FLEN/8, x13, x9, x10)

inst_3858:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11511*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11511*FLEN/8, x13, x9, x10)

inst_3859:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11514*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11514*FLEN/8, x13, x9, x10)

inst_3860:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x0; valaddr_reg:x12; val_offset:11517*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11517*FLEN/8, x13, x9, x10)

inst_3861:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x80000000; valaddr_reg:x12; val_offset:11520*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11520*FLEN/8, x13, x9, x10)

inst_3862:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x1; valaddr_reg:x12; val_offset:11523*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11523*FLEN/8, x13, x9, x10)

inst_3863:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x80000001; valaddr_reg:x12; val_offset:11526*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11526*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_30)
inst_3864:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x2; valaddr_reg:x12; val_offset:11529*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11529*FLEN/8, x13, x9, x10)

inst_3865:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11532*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11532*FLEN/8, x13, x9, x10)

inst_3866:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11535*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11535*FLEN/8, x13, x9, x10)

inst_3867:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11538*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11538*FLEN/8, x13, x9, x10)

inst_3868:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x800000; valaddr_reg:x12; val_offset:11541*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11541*FLEN/8, x13, x9, x10)

inst_3869:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x80800000; valaddr_reg:x12; val_offset:11544*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11544*FLEN/8, x13, x9, x10)

inst_3870:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x800001; valaddr_reg:x12; val_offset:11547*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11547*FLEN/8, x13, x9, x10)

inst_3871:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x80855555; valaddr_reg:x12; val_offset:11550*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11550*FLEN/8, x13, x9, x10)

inst_3872:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11553*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11553*FLEN/8, x13, x9, x10)

inst_3873:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11556*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11556*FLEN/8, x13, x9, x10)

inst_3874:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11559*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11559*FLEN/8, x13, x9, x10)

inst_3875:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0xff800000; valaddr_reg:x12; val_offset:11562*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11562*FLEN/8, x13, x9, x10)

inst_3876:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11565*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11565*FLEN/8, x13, x9, x10)

inst_3877:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11568*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11568*FLEN/8, x13, x9, x10)

inst_3878:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11571*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11571*FLEN/8, x13, x9, x10)

inst_3879:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11574*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11574*FLEN/8, x13, x9, x10)

inst_3880:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11577*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11577*FLEN/8, x13, x9, x10)

inst_3881:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11580*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11580*FLEN/8, x13, x9, x10)

inst_3882:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11583*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11583*FLEN/8, x13, x9, x10)

inst_3883:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11586*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11586*FLEN/8, x13, x9, x10)

inst_3884:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x0; valaddr_reg:x12; val_offset:11589*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11589*FLEN/8, x13, x9, x10)

inst_3885:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:11592*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11592*FLEN/8, x13, x9, x10)

inst_3886:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x1; valaddr_reg:x12; val_offset:11595*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11595*FLEN/8, x13, x9, x10)

inst_3887:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:11598*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11598*FLEN/8, x13, x9, x10)

inst_3888:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x2; valaddr_reg:x12; val_offset:11601*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11601*FLEN/8, x13, x9, x10)

inst_3889:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11604*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11604*FLEN/8, x13, x9, x10)

inst_3890:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11607*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11607*FLEN/8, x13, x9, x10)

inst_3891:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11610*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11610*FLEN/8, x13, x9, x10)

inst_3892:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x800000; valaddr_reg:x12; val_offset:11613*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11613*FLEN/8, x13, x9, x10)

inst_3893:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:11616*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11616*FLEN/8, x13, x9, x10)

inst_3894:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x800001; valaddr_reg:x12; val_offset:11619*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11619*FLEN/8, x13, x9, x10)

inst_3895:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:11622*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11622*FLEN/8, x13, x9, x10)

inst_3896:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11625*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11625*FLEN/8, x13, x9, x10)

inst_3897:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11628*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11628*FLEN/8, x13, x9, x10)

inst_3898:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11631*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11631*FLEN/8, x13, x9, x10)

inst_3899:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:11634*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11634*FLEN/8, x13, x9, x10)

inst_3900:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11637*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11637*FLEN/8, x13, x9, x10)

inst_3901:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11640*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11640*FLEN/8, x13, x9, x10)

inst_3902:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11643*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11643*FLEN/8, x13, x9, x10)

inst_3903:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11646*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11646*FLEN/8, x13, x9, x10)

inst_3904:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11649*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11649*FLEN/8, x13, x9, x10)

inst_3905:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11652*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11652*FLEN/8, x13, x9, x10)

inst_3906:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11655*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11655*FLEN/8, x13, x9, x10)

inst_3907:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11658*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11658*FLEN/8, x13, x9, x10)

inst_3908:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x0; valaddr_reg:x12; val_offset:11661*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11661*FLEN/8, x13, x9, x10)

inst_3909:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:11664*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11664*FLEN/8, x13, x9, x10)

inst_3910:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x1; valaddr_reg:x12; val_offset:11667*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11667*FLEN/8, x13, x9, x10)

inst_3911:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:11670*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11670*FLEN/8, x13, x9, x10)

inst_3912:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x2; valaddr_reg:x12; val_offset:11673*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11673*FLEN/8, x13, x9, x10)

inst_3913:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11676*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11676*FLEN/8, x13, x9, x10)

inst_3914:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11679*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11679*FLEN/8, x13, x9, x10)

inst_3915:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11682*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11682*FLEN/8, x13, x9, x10)

inst_3916:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x800000; valaddr_reg:x12; val_offset:11685*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11685*FLEN/8, x13, x9, x10)

inst_3917:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:11688*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11688*FLEN/8, x13, x9, x10)

inst_3918:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x800001; valaddr_reg:x12; val_offset:11691*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11691*FLEN/8, x13, x9, x10)

inst_3919:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:11694*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11694*FLEN/8, x13, x9, x10)

inst_3920:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11697*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11697*FLEN/8, x13, x9, x10)

inst_3921:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11700*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11700*FLEN/8, x13, x9, x10)

inst_3922:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11703*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11703*FLEN/8, x13, x9, x10)

inst_3923:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:11706*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11706*FLEN/8, x13, x9, x10)

inst_3924:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11709*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11709*FLEN/8, x13, x9, x10)

inst_3925:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11712*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11712*FLEN/8, x13, x9, x10)

inst_3926:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11715*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11715*FLEN/8, x13, x9, x10)

inst_3927:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11718*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11718*FLEN/8, x13, x9, x10)

inst_3928:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11721*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11721*FLEN/8, x13, x9, x10)

inst_3929:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11724*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11724*FLEN/8, x13, x9, x10)

inst_3930:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11727*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11727*FLEN/8, x13, x9, x10)

inst_3931:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11730*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11730*FLEN/8, x13, x9, x10)

inst_3932:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x0; valaddr_reg:x12; val_offset:11733*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11733*FLEN/8, x13, x9, x10)

inst_3933:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x80000000; valaddr_reg:x12; val_offset:11736*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11736*FLEN/8, x13, x9, x10)

inst_3934:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x1; valaddr_reg:x12; val_offset:11739*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11739*FLEN/8, x13, x9, x10)

inst_3935:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x80000001; valaddr_reg:x12; val_offset:11742*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11742*FLEN/8, x13, x9, x10)

inst_3936:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x2; valaddr_reg:x12; val_offset:11745*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11745*FLEN/8, x13, x9, x10)

inst_3937:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11748*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11748*FLEN/8, x13, x9, x10)

inst_3938:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11751*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11751*FLEN/8, x13, x9, x10)

inst_3939:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11754*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11754*FLEN/8, x13, x9, x10)

inst_3940:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x800000; valaddr_reg:x12; val_offset:11757*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11757*FLEN/8, x13, x9, x10)

inst_3941:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x80800000; valaddr_reg:x12; val_offset:11760*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11760*FLEN/8, x13, x9, x10)

inst_3942:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x800001; valaddr_reg:x12; val_offset:11763*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11763*FLEN/8, x13, x9, x10)

inst_3943:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x80855555; valaddr_reg:x12; val_offset:11766*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11766*FLEN/8, x13, x9, x10)

inst_3944:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11769*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11769*FLEN/8, x13, x9, x10)

inst_3945:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11772*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11772*FLEN/8, x13, x9, x10)

inst_3946:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11775*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11775*FLEN/8, x13, x9, x10)

inst_3947:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0xff800000; valaddr_reg:x12; val_offset:11778*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11778*FLEN/8, x13, x9, x10)

inst_3948:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11781*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11781*FLEN/8, x13, x9, x10)

inst_3949:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11784*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11784*FLEN/8, x13, x9, x10)

inst_3950:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11787*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11787*FLEN/8, x13, x9, x10)

inst_3951:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11790*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11790*FLEN/8, x13, x9, x10)

inst_3952:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11793*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11793*FLEN/8, x13, x9, x10)

inst_3953:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11796*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11796*FLEN/8, x13, x9, x10)

inst_3954:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11799*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11799*FLEN/8, x13, x9, x10)

inst_3955:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x0;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11802*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11802*FLEN/8, x13, x9, x10)

inst_3956:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x0; valaddr_reg:x12; val_offset:11805*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11805*FLEN/8, x13, x9, x10)

inst_3957:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x12; val_offset:11808*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11808*FLEN/8, x13, x9, x10)

inst_3958:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x1; valaddr_reg:x12; val_offset:11811*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11811*FLEN/8, x13, x9, x10)

inst_3959:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x12; val_offset:11814*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11814*FLEN/8, x13, x9, x10)

inst_3960:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x2; valaddr_reg:x12; val_offset:11817*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11817*FLEN/8, x13, x9, x10)

inst_3961:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11820*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11820*FLEN/8, x13, x9, x10)

inst_3962:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11823*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11823*FLEN/8, x13, x9, x10)

inst_3963:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11826*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11826*FLEN/8, x13, x9, x10)

inst_3964:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x800000; valaddr_reg:x12; val_offset:11829*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11829*FLEN/8, x13, x9, x10)

inst_3965:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x12; val_offset:11832*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11832*FLEN/8, x13, x9, x10)

inst_3966:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x800001; valaddr_reg:x12; val_offset:11835*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11835*FLEN/8, x13, x9, x10)

inst_3967:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x80855555; valaddr_reg:x12; val_offset:11838*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11838*FLEN/8, x13, x9, x10)

inst_3968:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11841*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11841*FLEN/8, x13, x9, x10)

inst_3969:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11844*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11844*FLEN/8, x13, x9, x10)

inst_3970:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11847*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11847*FLEN/8, x13, x9, x10)

inst_3971:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0xff800000; valaddr_reg:x12; val_offset:11850*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11850*FLEN/8, x13, x9, x10)

inst_3972:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11853*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11853*FLEN/8, x13, x9, x10)

inst_3973:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11856*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11856*FLEN/8, x13, x9, x10)

inst_3974:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11859*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11859*FLEN/8, x13, x9, x10)

inst_3975:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11862*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11862*FLEN/8, x13, x9, x10)

inst_3976:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11865*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11865*FLEN/8, x13, x9, x10)

inst_3977:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11868*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11868*FLEN/8, x13, x9, x10)

inst_3978:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11871*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11871*FLEN/8, x13, x9, x10)

inst_3979:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11874*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11874*FLEN/8, x13, x9, x10)

inst_3980:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x0; valaddr_reg:x12; val_offset:11877*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11877*FLEN/8, x13, x9, x10)

inst_3981:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x80000000; valaddr_reg:x12; val_offset:11880*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11880*FLEN/8, x13, x9, x10)

inst_3982:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x1; valaddr_reg:x12; val_offset:11883*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11883*FLEN/8, x13, x9, x10)

inst_3983:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x80000001; valaddr_reg:x12; val_offset:11886*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11886*FLEN/8, x13, x9, x10)

inst_3984:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x2; valaddr_reg:x12; val_offset:11889*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11889*FLEN/8, x13, x9, x10)

inst_3985:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11892*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11892*FLEN/8, x13, x9, x10)

inst_3986:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11895*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11895*FLEN/8, x13, x9, x10)

inst_3987:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11898*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11898*FLEN/8, x13, x9, x10)

inst_3988:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x800000; valaddr_reg:x12; val_offset:11901*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11901*FLEN/8, x13, x9, x10)

inst_3989:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x80800000; valaddr_reg:x12; val_offset:11904*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11904*FLEN/8, x13, x9, x10)

inst_3990:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x800001; valaddr_reg:x12; val_offset:11907*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11907*FLEN/8, x13, x9, x10)

inst_3991:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x80855555; valaddr_reg:x12; val_offset:11910*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11910*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_31)
inst_3992:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11913*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11913*FLEN/8, x13, x9, x10)

inst_3993:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11916*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11916*FLEN/8, x13, x9, x10)

inst_3994:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11919*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11919*FLEN/8, x13, x9, x10)

inst_3995:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0xff800000; valaddr_reg:x12; val_offset:11922*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11922*FLEN/8, x13, x9, x10)

inst_3996:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11925*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11925*FLEN/8, x13, x9, x10)

inst_3997:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0xffc00000; valaddr_reg:x12; val_offset:11928*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11928*FLEN/8, x13, x9, x10)

inst_3998:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:11931*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11931*FLEN/8, x13, x9, x10)

inst_3999:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0xffc55555; valaddr_reg:x12; val_offset:11934*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11934*FLEN/8, x13, x9, x10)

inst_4000:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x7f800001; valaddr_reg:x12; val_offset:11937*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11937*FLEN/8, x13, x9, x10)

inst_4001:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:11940*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11940*FLEN/8, x13, x9, x10)

inst_4002:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0x3f800000; valaddr_reg:x12; val_offset:11943*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11943*FLEN/8, x13, x9, x10)

inst_4003:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x1;
op3val:0xbf800000; valaddr_reg:x12; val_offset:11946*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11946*FLEN/8, x13, x9, x10)

inst_4004:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x0; valaddr_reg:x12; val_offset:11949*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11949*FLEN/8, x13, x9, x10)

inst_4005:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x80000000; valaddr_reg:x12; val_offset:11952*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11952*FLEN/8, x13, x9, x10)

inst_4006:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x1; valaddr_reg:x12; val_offset:11955*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11955*FLEN/8, x13, x9, x10)

inst_4007:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x80000001; valaddr_reg:x12; val_offset:11958*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11958*FLEN/8, x13, x9, x10)

inst_4008:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x2; valaddr_reg:x12; val_offset:11961*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11961*FLEN/8, x13, x9, x10)

inst_4009:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:11964*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11964*FLEN/8, x13, x9, x10)

inst_4010:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:11967*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11967*FLEN/8, x13, x9, x10)

inst_4011:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:11970*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11970*FLEN/8, x13, x9, x10)

inst_4012:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x800000; valaddr_reg:x12; val_offset:11973*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11973*FLEN/8, x13, x9, x10)

inst_4013:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x80800000; valaddr_reg:x12; val_offset:11976*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11976*FLEN/8, x13, x9, x10)

inst_4014:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x800001; valaddr_reg:x12; val_offset:11979*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11979*FLEN/8, x13, x9, x10)

inst_4015:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x80855555; valaddr_reg:x12; val_offset:11982*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11982*FLEN/8, x13, x9, x10)

inst_4016:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:11985*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11985*FLEN/8, x13, x9, x10)

inst_4017:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:11988*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11988*FLEN/8, x13, x9, x10)

inst_4018:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:11991*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11991*FLEN/8, x13, x9, x10)

inst_4019:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0xff800000; valaddr_reg:x12; val_offset:11994*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11994*FLEN/8, x13, x9, x10)

inst_4020:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:11997*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 11997*FLEN/8, x13, x9, x10)

inst_4021:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12000*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12000*FLEN/8, x13, x9, x10)

inst_4022:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12003*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12003*FLEN/8, x13, x9, x10)

inst_4023:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12006*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12006*FLEN/8, x13, x9, x10)

inst_4024:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12009*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12009*FLEN/8, x13, x9, x10)

inst_4025:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12012*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12012*FLEN/8, x13, x9, x10)

inst_4026:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12015*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12015*FLEN/8, x13, x9, x10)

inst_4027:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80000001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12018*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12018*FLEN/8, x13, x9, x10)

inst_4028:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x0; valaddr_reg:x12; val_offset:12021*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12021*FLEN/8, x13, x9, x10)

inst_4029:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x80000000; valaddr_reg:x12; val_offset:12024*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12024*FLEN/8, x13, x9, x10)

inst_4030:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x1; valaddr_reg:x12; val_offset:12027*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12027*FLEN/8, x13, x9, x10)

inst_4031:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x80000001; valaddr_reg:x12; val_offset:12030*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12030*FLEN/8, x13, x9, x10)

inst_4032:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x2; valaddr_reg:x12; val_offset:12033*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12033*FLEN/8, x13, x9, x10)

inst_4033:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12036*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12036*FLEN/8, x13, x9, x10)

inst_4034:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12039*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12039*FLEN/8, x13, x9, x10)

inst_4035:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12042*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12042*FLEN/8, x13, x9, x10)

inst_4036:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x800000; valaddr_reg:x12; val_offset:12045*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12045*FLEN/8, x13, x9, x10)

inst_4037:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x80800000; valaddr_reg:x12; val_offset:12048*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12048*FLEN/8, x13, x9, x10)

inst_4038:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x800001; valaddr_reg:x12; val_offset:12051*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12051*FLEN/8, x13, x9, x10)

inst_4039:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x80855555; valaddr_reg:x12; val_offset:12054*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12054*FLEN/8, x13, x9, x10)

inst_4040:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12057*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12057*FLEN/8, x13, x9, x10)

inst_4041:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12060*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12060*FLEN/8, x13, x9, x10)

inst_4042:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12063*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12063*FLEN/8, x13, x9, x10)

inst_4043:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0xff800000; valaddr_reg:x12; val_offset:12066*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12066*FLEN/8, x13, x9, x10)

inst_4044:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12069*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12069*FLEN/8, x13, x9, x10)

inst_4045:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12072*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12072*FLEN/8, x13, x9, x10)

inst_4046:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12075*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12075*FLEN/8, x13, x9, x10)

inst_4047:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12078*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12078*FLEN/8, x13, x9, x10)

inst_4048:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12081*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12081*FLEN/8, x13, x9, x10)

inst_4049:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12084*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12084*FLEN/8, x13, x9, x10)

inst_4050:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12087*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12087*FLEN/8, x13, x9, x10)

inst_4051:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x2;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12090*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12090*FLEN/8, x13, x9, x10)

inst_4052:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x0; valaddr_reg:x12; val_offset:12093*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12093*FLEN/8, x13, x9, x10)

inst_4053:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x80000000; valaddr_reg:x12; val_offset:12096*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12096*FLEN/8, x13, x9, x10)

inst_4054:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x1; valaddr_reg:x12; val_offset:12099*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12099*FLEN/8, x13, x9, x10)

inst_4055:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x80000001; valaddr_reg:x12; val_offset:12102*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12102*FLEN/8, x13, x9, x10)

inst_4056:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x2; valaddr_reg:x12; val_offset:12105*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12105*FLEN/8, x13, x9, x10)

inst_4057:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12108*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12108*FLEN/8, x13, x9, x10)

inst_4058:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12111*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12111*FLEN/8, x13, x9, x10)

inst_4059:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12114*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12114*FLEN/8, x13, x9, x10)

inst_4060:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x800000; valaddr_reg:x12; val_offset:12117*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12117*FLEN/8, x13, x9, x10)

inst_4061:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x80800000; valaddr_reg:x12; val_offset:12120*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12120*FLEN/8, x13, x9, x10)

inst_4062:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x800001; valaddr_reg:x12; val_offset:12123*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12123*FLEN/8, x13, x9, x10)

inst_4063:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x80855555; valaddr_reg:x12; val_offset:12126*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12126*FLEN/8, x13, x9, x10)

inst_4064:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12129*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12129*FLEN/8, x13, x9, x10)

inst_4065:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12132*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12132*FLEN/8, x13, x9, x10)

inst_4066:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12135*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12135*FLEN/8, x13, x9, x10)

inst_4067:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0xff800000; valaddr_reg:x12; val_offset:12138*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12138*FLEN/8, x13, x9, x10)

inst_4068:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12141*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12141*FLEN/8, x13, x9, x10)

inst_4069:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12144*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12144*FLEN/8, x13, x9, x10)

inst_4070:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12147*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12147*FLEN/8, x13, x9, x10)

inst_4071:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12150*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12150*FLEN/8, x13, x9, x10)

inst_4072:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12153*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12153*FLEN/8, x13, x9, x10)

inst_4073:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12156*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12156*FLEN/8, x13, x9, x10)

inst_4074:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12159*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12159*FLEN/8, x13, x9, x10)

inst_4075:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12162*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12162*FLEN/8, x13, x9, x10)

inst_4076:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:12165*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12165*FLEN/8, x13, x9, x10)

inst_4077:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:12168*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12168*FLEN/8, x13, x9, x10)

inst_4078:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:12171*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12171*FLEN/8, x13, x9, x10)

inst_4079:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:12174*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12174*FLEN/8, x13, x9, x10)

inst_4080:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:12177*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12177*FLEN/8, x13, x9, x10)

inst_4081:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12180*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12180*FLEN/8, x13, x9, x10)

inst_4082:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12183*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12183*FLEN/8, x13, x9, x10)

inst_4083:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12186*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12186*FLEN/8, x13, x9, x10)

inst_4084:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:12189*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12189*FLEN/8, x13, x9, x10)

inst_4085:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:12192*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12192*FLEN/8, x13, x9, x10)

inst_4086:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:12195*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12195*FLEN/8, x13, x9, x10)

inst_4087:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:12198*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12198*FLEN/8, x13, x9, x10)

inst_4088:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12201*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12201*FLEN/8, x13, x9, x10)

inst_4089:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12204*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12204*FLEN/8, x13, x9, x10)

inst_4090:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12207*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12207*FLEN/8, x13, x9, x10)

inst_4091:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:12210*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12210*FLEN/8, x13, x9, x10)

inst_4092:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12213*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12213*FLEN/8, x13, x9, x10)

inst_4093:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12216*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12216*FLEN/8, x13, x9, x10)

inst_4094:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12219*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12219*FLEN/8, x13, x9, x10)

inst_4095:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12222*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12222*FLEN/8, x13, x9, x10)

inst_4096:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12225*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12225*FLEN/8, x13, x9, x10)

inst_4097:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12228*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12228*FLEN/8, x13, x9, x10)

inst_4098:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12231*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12231*FLEN/8, x13, x9, x10)

inst_4099:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12234*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12234*FLEN/8, x13, x9, x10)

inst_4100:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x0; valaddr_reg:x12; val_offset:12237*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12237*FLEN/8, x13, x9, x10)

inst_4101:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:12240*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12240*FLEN/8, x13, x9, x10)

inst_4102:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x1; valaddr_reg:x12; val_offset:12243*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12243*FLEN/8, x13, x9, x10)

inst_4103:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:12246*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12246*FLEN/8, x13, x9, x10)

inst_4104:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x2; valaddr_reg:x12; val_offset:12249*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12249*FLEN/8, x13, x9, x10)

inst_4105:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12252*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12252*FLEN/8, x13, x9, x10)

inst_4106:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12255*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12255*FLEN/8, x13, x9, x10)

inst_4107:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12258*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12258*FLEN/8, x13, x9, x10)

inst_4108:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:12261*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12261*FLEN/8, x13, x9, x10)

inst_4109:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:12264*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12264*FLEN/8, x13, x9, x10)

inst_4110:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:12267*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12267*FLEN/8, x13, x9, x10)

inst_4111:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:12270*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12270*FLEN/8, x13, x9, x10)

inst_4112:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12273*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12273*FLEN/8, x13, x9, x10)

inst_4113:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12276*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12276*FLEN/8, x13, x9, x10)

inst_4114:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12279*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12279*FLEN/8, x13, x9, x10)

inst_4115:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:12282*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12282*FLEN/8, x13, x9, x10)

inst_4116:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12285*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12285*FLEN/8, x13, x9, x10)

inst_4117:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12288*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12288*FLEN/8, x13, x9, x10)

inst_4118:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12291*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12291*FLEN/8, x13, x9, x10)

inst_4119:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12294*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12294*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_32)
inst_4120:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12297*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12297*FLEN/8, x13, x9, x10)

inst_4121:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12300*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12300*FLEN/8, x13, x9, x10)

inst_4122:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12303*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12303*FLEN/8, x13, x9, x10)

inst_4123:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12306*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12306*FLEN/8, x13, x9, x10)

inst_4124:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x0; valaddr_reg:x12; val_offset:12309*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12309*FLEN/8, x13, x9, x10)

inst_4125:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:12312*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12312*FLEN/8, x13, x9, x10)

inst_4126:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x1; valaddr_reg:x12; val_offset:12315*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12315*FLEN/8, x13, x9, x10)

inst_4127:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:12318*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12318*FLEN/8, x13, x9, x10)

inst_4128:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x2; valaddr_reg:x12; val_offset:12321*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12321*FLEN/8, x13, x9, x10)

inst_4129:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12324*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12324*FLEN/8, x13, x9, x10)

inst_4130:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12327*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12327*FLEN/8, x13, x9, x10)

inst_4131:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12330*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12330*FLEN/8, x13, x9, x10)

inst_4132:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x800000; valaddr_reg:x12; val_offset:12333*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12333*FLEN/8, x13, x9, x10)

inst_4133:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:12336*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12336*FLEN/8, x13, x9, x10)

inst_4134:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x800001; valaddr_reg:x12; val_offset:12339*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12339*FLEN/8, x13, x9, x10)

inst_4135:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:12342*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12342*FLEN/8, x13, x9, x10)

inst_4136:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12345*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12345*FLEN/8, x13, x9, x10)

inst_4137:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12348*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12348*FLEN/8, x13, x9, x10)

inst_4138:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12351*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12351*FLEN/8, x13, x9, x10)

inst_4139:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:12354*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12354*FLEN/8, x13, x9, x10)

inst_4140:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12357*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12357*FLEN/8, x13, x9, x10)

inst_4141:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12360*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12360*FLEN/8, x13, x9, x10)

inst_4142:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12363*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12363*FLEN/8, x13, x9, x10)

inst_4143:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12366*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12366*FLEN/8, x13, x9, x10)

inst_4144:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12369*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12369*FLEN/8, x13, x9, x10)

inst_4145:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12372*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12372*FLEN/8, x13, x9, x10)

inst_4146:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12375*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12375*FLEN/8, x13, x9, x10)

inst_4147:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12378*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12378*FLEN/8, x13, x9, x10)

inst_4148:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x0; valaddr_reg:x12; val_offset:12381*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12381*FLEN/8, x13, x9, x10)

inst_4149:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:12384*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12384*FLEN/8, x13, x9, x10)

inst_4150:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x1; valaddr_reg:x12; val_offset:12387*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12387*FLEN/8, x13, x9, x10)

inst_4151:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:12390*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12390*FLEN/8, x13, x9, x10)

inst_4152:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x2; valaddr_reg:x12; val_offset:12393*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12393*FLEN/8, x13, x9, x10)

inst_4153:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12396*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12396*FLEN/8, x13, x9, x10)

inst_4154:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12399*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12399*FLEN/8, x13, x9, x10)

inst_4155:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12402*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12402*FLEN/8, x13, x9, x10)

inst_4156:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x800000; valaddr_reg:x12; val_offset:12405*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12405*FLEN/8, x13, x9, x10)

inst_4157:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:12408*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12408*FLEN/8, x13, x9, x10)

inst_4158:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x800001; valaddr_reg:x12; val_offset:12411*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12411*FLEN/8, x13, x9, x10)

inst_4159:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:12414*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12414*FLEN/8, x13, x9, x10)

inst_4160:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12417*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12417*FLEN/8, x13, x9, x10)

inst_4161:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12420*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12420*FLEN/8, x13, x9, x10)

inst_4162:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12423*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12423*FLEN/8, x13, x9, x10)

inst_4163:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:12426*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12426*FLEN/8, x13, x9, x10)

inst_4164:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12429*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12429*FLEN/8, x13, x9, x10)

inst_4165:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12432*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12432*FLEN/8, x13, x9, x10)

inst_4166:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12435*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12435*FLEN/8, x13, x9, x10)

inst_4167:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12438*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12438*FLEN/8, x13, x9, x10)

inst_4168:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12441*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12441*FLEN/8, x13, x9, x10)

inst_4169:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12444*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12444*FLEN/8, x13, x9, x10)

inst_4170:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12447*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12447*FLEN/8, x13, x9, x10)

inst_4171:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12450*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12450*FLEN/8, x13, x9, x10)

inst_4172:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x0; valaddr_reg:x12; val_offset:12453*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12453*FLEN/8, x13, x9, x10)

inst_4173:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x80000000; valaddr_reg:x12; val_offset:12456*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12456*FLEN/8, x13, x9, x10)

inst_4174:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x1; valaddr_reg:x12; val_offset:12459*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12459*FLEN/8, x13, x9, x10)

inst_4175:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x80000001; valaddr_reg:x12; val_offset:12462*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12462*FLEN/8, x13, x9, x10)

inst_4176:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x2; valaddr_reg:x12; val_offset:12465*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12465*FLEN/8, x13, x9, x10)

inst_4177:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12468*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12468*FLEN/8, x13, x9, x10)

inst_4178:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12471*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12471*FLEN/8, x13, x9, x10)

inst_4179:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12474*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12474*FLEN/8, x13, x9, x10)

inst_4180:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x800000; valaddr_reg:x12; val_offset:12477*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12477*FLEN/8, x13, x9, x10)

inst_4181:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x80800000; valaddr_reg:x12; val_offset:12480*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12480*FLEN/8, x13, x9, x10)

inst_4182:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x800001; valaddr_reg:x12; val_offset:12483*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12483*FLEN/8, x13, x9, x10)

inst_4183:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x80855555; valaddr_reg:x12; val_offset:12486*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12486*FLEN/8, x13, x9, x10)

inst_4184:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12489*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12489*FLEN/8, x13, x9, x10)

inst_4185:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12492*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12492*FLEN/8, x13, x9, x10)

inst_4186:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12495*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12495*FLEN/8, x13, x9, x10)

inst_4187:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0xff800000; valaddr_reg:x12; val_offset:12498*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12498*FLEN/8, x13, x9, x10)

inst_4188:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12501*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12501*FLEN/8, x13, x9, x10)

inst_4189:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12504*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12504*FLEN/8, x13, x9, x10)

inst_4190:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12507*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12507*FLEN/8, x13, x9, x10)

inst_4191:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12510*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12510*FLEN/8, x13, x9, x10)

inst_4192:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12513*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12513*FLEN/8, x13, x9, x10)

inst_4193:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12516*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12516*FLEN/8, x13, x9, x10)

inst_4194:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12519*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12519*FLEN/8, x13, x9, x10)

inst_4195:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x800001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12522*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12522*FLEN/8, x13, x9, x10)

inst_4196:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x0; valaddr_reg:x12; val_offset:12525*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12525*FLEN/8, x13, x9, x10)

inst_4197:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x80000000; valaddr_reg:x12; val_offset:12528*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12528*FLEN/8, x13, x9, x10)

inst_4198:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x1; valaddr_reg:x12; val_offset:12531*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12531*FLEN/8, x13, x9, x10)

inst_4199:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x80000001; valaddr_reg:x12; val_offset:12534*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12534*FLEN/8, x13, x9, x10)

inst_4200:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x2; valaddr_reg:x12; val_offset:12537*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12537*FLEN/8, x13, x9, x10)

inst_4201:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12540*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12540*FLEN/8, x13, x9, x10)

inst_4202:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12543*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12543*FLEN/8, x13, x9, x10)

inst_4203:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12546*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12546*FLEN/8, x13, x9, x10)

inst_4204:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x800000; valaddr_reg:x12; val_offset:12549*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12549*FLEN/8, x13, x9, x10)

inst_4205:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x80800000; valaddr_reg:x12; val_offset:12552*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12552*FLEN/8, x13, x9, x10)

inst_4206:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x800001; valaddr_reg:x12; val_offset:12555*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12555*FLEN/8, x13, x9, x10)

inst_4207:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x80855555; valaddr_reg:x12; val_offset:12558*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12558*FLEN/8, x13, x9, x10)

inst_4208:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12561*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12561*FLEN/8, x13, x9, x10)

inst_4209:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12564*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12564*FLEN/8, x13, x9, x10)

inst_4210:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12567*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12567*FLEN/8, x13, x9, x10)

inst_4211:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0xff800000; valaddr_reg:x12; val_offset:12570*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12570*FLEN/8, x13, x9, x10)

inst_4212:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12573*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12573*FLEN/8, x13, x9, x10)

inst_4213:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12576*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12576*FLEN/8, x13, x9, x10)

inst_4214:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12579*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12579*FLEN/8, x13, x9, x10)

inst_4215:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12582*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12582*FLEN/8, x13, x9, x10)

inst_4216:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12585*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12585*FLEN/8, x13, x9, x10)

inst_4217:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12588*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12588*FLEN/8, x13, x9, x10)

inst_4218:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12591*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12591*FLEN/8, x13, x9, x10)

inst_4219:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x80855555;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12594*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12594*FLEN/8, x13, x9, x10)

inst_4220:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:12597*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12597*FLEN/8, x13, x9, x10)

inst_4221:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:12600*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12600*FLEN/8, x13, x9, x10)

inst_4222:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:12603*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12603*FLEN/8, x13, x9, x10)

inst_4223:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:12606*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12606*FLEN/8, x13, x9, x10)

inst_4224:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:12609*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12609*FLEN/8, x13, x9, x10)

inst_4225:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12612*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12612*FLEN/8, x13, x9, x10)

inst_4226:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12615*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12615*FLEN/8, x13, x9, x10)

inst_4227:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12618*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12618*FLEN/8, x13, x9, x10)

inst_4228:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:12621*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12621*FLEN/8, x13, x9, x10)

inst_4229:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:12624*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12624*FLEN/8, x13, x9, x10)

inst_4230:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:12627*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12627*FLEN/8, x13, x9, x10)

inst_4231:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:12630*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12630*FLEN/8, x13, x9, x10)

inst_4232:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12633*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12633*FLEN/8, x13, x9, x10)

inst_4233:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12636*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12636*FLEN/8, x13, x9, x10)

inst_4234:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12639*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12639*FLEN/8, x13, x9, x10)

inst_4235:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:12642*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12642*FLEN/8, x13, x9, x10)

inst_4236:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12645*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12645*FLEN/8, x13, x9, x10)

inst_4237:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12648*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12648*FLEN/8, x13, x9, x10)

inst_4238:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12651*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12651*FLEN/8, x13, x9, x10)

inst_4239:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12654*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12654*FLEN/8, x13, x9, x10)

inst_4240:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12657*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12657*FLEN/8, x13, x9, x10)

inst_4241:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12660*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12660*FLEN/8, x13, x9, x10)

inst_4242:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12663*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12663*FLEN/8, x13, x9, x10)

inst_4243:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12666*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12666*FLEN/8, x13, x9, x10)

inst_4244:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:12669*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12669*FLEN/8, x13, x9, x10)

inst_4245:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:12672*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12672*FLEN/8, x13, x9, x10)

inst_4246:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:12675*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12675*FLEN/8, x13, x9, x10)

inst_4247:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:12678*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12678*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_33)
inst_4248:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:12681*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12681*FLEN/8, x13, x9, x10)

inst_4249:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12684*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12684*FLEN/8, x13, x9, x10)

inst_4250:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12687*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12687*FLEN/8, x13, x9, x10)

inst_4251:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12690*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12690*FLEN/8, x13, x9, x10)

inst_4252:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:12693*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12693*FLEN/8, x13, x9, x10)

inst_4253:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:12696*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12696*FLEN/8, x13, x9, x10)

inst_4254:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:12699*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12699*FLEN/8, x13, x9, x10)

inst_4255:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:12702*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12702*FLEN/8, x13, x9, x10)

inst_4256:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12705*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12705*FLEN/8, x13, x9, x10)

inst_4257:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12708*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12708*FLEN/8, x13, x9, x10)

inst_4258:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12711*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12711*FLEN/8, x13, x9, x10)

inst_4259:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:12714*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12714*FLEN/8, x13, x9, x10)

inst_4260:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12717*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12717*FLEN/8, x13, x9, x10)

inst_4261:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12720*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12720*FLEN/8, x13, x9, x10)

inst_4262:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12723*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12723*FLEN/8, x13, x9, x10)

inst_4263:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12726*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12726*FLEN/8, x13, x9, x10)

inst_4264:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12729*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12729*FLEN/8, x13, x9, x10)

inst_4265:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12732*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12732*FLEN/8, x13, x9, x10)

inst_4266:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12735*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12735*FLEN/8, x13, x9, x10)

inst_4267:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12738*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12738*FLEN/8, x13, x9, x10)

inst_4268:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x0; valaddr_reg:x12; val_offset:12741*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12741*FLEN/8, x13, x9, x10)

inst_4269:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:12744*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12744*FLEN/8, x13, x9, x10)

inst_4270:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x1; valaddr_reg:x12; val_offset:12747*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12747*FLEN/8, x13, x9, x10)

inst_4271:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:12750*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12750*FLEN/8, x13, x9, x10)

inst_4272:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x2; valaddr_reg:x12; val_offset:12753*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12753*FLEN/8, x13, x9, x10)

inst_4273:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12756*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12756*FLEN/8, x13, x9, x10)

inst_4274:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12759*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12759*FLEN/8, x13, x9, x10)

inst_4275:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12762*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12762*FLEN/8, x13, x9, x10)

inst_4276:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x800000; valaddr_reg:x12; val_offset:12765*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12765*FLEN/8, x13, x9, x10)

inst_4277:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:12768*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12768*FLEN/8, x13, x9, x10)

inst_4278:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x800001; valaddr_reg:x12; val_offset:12771*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12771*FLEN/8, x13, x9, x10)

inst_4279:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:12774*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12774*FLEN/8, x13, x9, x10)

inst_4280:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12777*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12777*FLEN/8, x13, x9, x10)

inst_4281:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12780*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12780*FLEN/8, x13, x9, x10)

inst_4282:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12783*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12783*FLEN/8, x13, x9, x10)

inst_4283:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:12786*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12786*FLEN/8, x13, x9, x10)

inst_4284:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12789*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12789*FLEN/8, x13, x9, x10)

inst_4285:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12792*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12792*FLEN/8, x13, x9, x10)

inst_4286:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12795*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12795*FLEN/8, x13, x9, x10)

inst_4287:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12798*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12798*FLEN/8, x13, x9, x10)

inst_4288:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12801*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12801*FLEN/8, x13, x9, x10)

inst_4289:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12804*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12804*FLEN/8, x13, x9, x10)

inst_4290:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12807*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12807*FLEN/8, x13, x9, x10)

inst_4291:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12810*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12810*FLEN/8, x13, x9, x10)

inst_4292:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x0; valaddr_reg:x12; val_offset:12813*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12813*FLEN/8, x13, x9, x10)

inst_4293:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:12816*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12816*FLEN/8, x13, x9, x10)

inst_4294:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x1; valaddr_reg:x12; val_offset:12819*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12819*FLEN/8, x13, x9, x10)

inst_4295:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:12822*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12822*FLEN/8, x13, x9, x10)

inst_4296:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x2; valaddr_reg:x12; val_offset:12825*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12825*FLEN/8, x13, x9, x10)

inst_4297:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12828*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12828*FLEN/8, x13, x9, x10)

inst_4298:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12831*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12831*FLEN/8, x13, x9, x10)

inst_4299:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12834*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12834*FLEN/8, x13, x9, x10)

inst_4300:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x800000; valaddr_reg:x12; val_offset:12837*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12837*FLEN/8, x13, x9, x10)

inst_4301:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:12840*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12840*FLEN/8, x13, x9, x10)

inst_4302:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x800001; valaddr_reg:x12; val_offset:12843*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12843*FLEN/8, x13, x9, x10)

inst_4303:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:12846*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12846*FLEN/8, x13, x9, x10)

inst_4304:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12849*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12849*FLEN/8, x13, x9, x10)

inst_4305:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12852*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12852*FLEN/8, x13, x9, x10)

inst_4306:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12855*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12855*FLEN/8, x13, x9, x10)

inst_4307:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:12858*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12858*FLEN/8, x13, x9, x10)

inst_4308:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12861*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12861*FLEN/8, x13, x9, x10)

inst_4309:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12864*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12864*FLEN/8, x13, x9, x10)

inst_4310:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12867*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12867*FLEN/8, x13, x9, x10)

inst_4311:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12870*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12870*FLEN/8, x13, x9, x10)

inst_4312:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12873*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12873*FLEN/8, x13, x9, x10)

inst_4313:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12876*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12876*FLEN/8, x13, x9, x10)

inst_4314:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12879*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12879*FLEN/8, x13, x9, x10)

inst_4315:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xff800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12882*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12882*FLEN/8, x13, x9, x10)

inst_4316:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x0; valaddr_reg:x12; val_offset:12885*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12885*FLEN/8, x13, x9, x10)

inst_4317:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x80000000; valaddr_reg:x12; val_offset:12888*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12888*FLEN/8, x13, x9, x10)

inst_4318:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x1; valaddr_reg:x12; val_offset:12891*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12891*FLEN/8, x13, x9, x10)

inst_4319:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x80000001; valaddr_reg:x12; val_offset:12894*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12894*FLEN/8, x13, x9, x10)

inst_4320:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x2; valaddr_reg:x12; val_offset:12897*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12897*FLEN/8, x13, x9, x10)

inst_4321:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12900*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12900*FLEN/8, x13, x9, x10)

inst_4322:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12903*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12903*FLEN/8, x13, x9, x10)

inst_4323:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12906*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12906*FLEN/8, x13, x9, x10)

inst_4324:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x800000; valaddr_reg:x12; val_offset:12909*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12909*FLEN/8, x13, x9, x10)

inst_4325:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x80800000; valaddr_reg:x12; val_offset:12912*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12912*FLEN/8, x13, x9, x10)

inst_4326:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x800001; valaddr_reg:x12; val_offset:12915*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12915*FLEN/8, x13, x9, x10)

inst_4327:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x80855555; valaddr_reg:x12; val_offset:12918*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12918*FLEN/8, x13, x9, x10)

inst_4328:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12921*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12921*FLEN/8, x13, x9, x10)

inst_4329:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12924*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12924*FLEN/8, x13, x9, x10)

inst_4330:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12927*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12927*FLEN/8, x13, x9, x10)

inst_4331:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0xff800000; valaddr_reg:x12; val_offset:12930*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12930*FLEN/8, x13, x9, x10)

inst_4332:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:12933*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12933*FLEN/8, x13, x9, x10)

inst_4333:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:12936*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12936*FLEN/8, x13, x9, x10)

inst_4334:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:12939*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12939*FLEN/8, x13, x9, x10)

inst_4335:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:12942*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12942*FLEN/8, x13, x9, x10)

inst_4336:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:12945*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12945*FLEN/8, x13, x9, x10)

inst_4337:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:12948*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12948*FLEN/8, x13, x9, x10)

inst_4338:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:12951*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12951*FLEN/8, x13, x9, x10)

inst_4339:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:12954*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12954*FLEN/8, x13, x9, x10)

inst_4340:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x0; valaddr_reg:x12; val_offset:12957*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12957*FLEN/8, x13, x9, x10)

inst_4341:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x80000000; valaddr_reg:x12; val_offset:12960*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12960*FLEN/8, x13, x9, x10)

inst_4342:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x1; valaddr_reg:x12; val_offset:12963*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12963*FLEN/8, x13, x9, x10)

inst_4343:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x80000001; valaddr_reg:x12; val_offset:12966*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12966*FLEN/8, x13, x9, x10)

inst_4344:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x2; valaddr_reg:x12; val_offset:12969*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12969*FLEN/8, x13, x9, x10)

inst_4345:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:12972*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12972*FLEN/8, x13, x9, x10)

inst_4346:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:12975*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12975*FLEN/8, x13, x9, x10)

inst_4347:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:12978*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12978*FLEN/8, x13, x9, x10)

inst_4348:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x800000; valaddr_reg:x12; val_offset:12981*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12981*FLEN/8, x13, x9, x10)

inst_4349:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x80800000; valaddr_reg:x12; val_offset:12984*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12984*FLEN/8, x13, x9, x10)

inst_4350:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x800001; valaddr_reg:x12; val_offset:12987*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12987*FLEN/8, x13, x9, x10)

inst_4351:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x80855555; valaddr_reg:x12; val_offset:12990*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12990*FLEN/8, x13, x9, x10)

inst_4352:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:12993*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12993*FLEN/8, x13, x9, x10)

inst_4353:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:12996*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12996*FLEN/8, x13, x9, x10)

inst_4354:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:12999*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 12999*FLEN/8, x13, x9, x10)

inst_4355:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0xff800000; valaddr_reg:x12; val_offset:13002*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13002*FLEN/8, x13, x9, x10)

inst_4356:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13005*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13005*FLEN/8, x13, x9, x10)

inst_4357:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13008*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13008*FLEN/8, x13, x9, x10)

inst_4358:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13011*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13011*FLEN/8, x13, x9, x10)

inst_4359:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13014*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13014*FLEN/8, x13, x9, x10)

inst_4360:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13017*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13017*FLEN/8, x13, x9, x10)

inst_4361:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13020*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13020*FLEN/8, x13, x9, x10)

inst_4362:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13023*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13023*FLEN/8, x13, x9, x10)

inst_4363:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13026*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13026*FLEN/8, x13, x9, x10)

inst_4364:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x0; valaddr_reg:x12; val_offset:13029*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13029*FLEN/8, x13, x9, x10)

inst_4365:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x80000000; valaddr_reg:x12; val_offset:13032*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13032*FLEN/8, x13, x9, x10)

inst_4366:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x1; valaddr_reg:x12; val_offset:13035*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13035*FLEN/8, x13, x9, x10)

inst_4367:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x80000001; valaddr_reg:x12; val_offset:13038*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13038*FLEN/8, x13, x9, x10)

inst_4368:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x2; valaddr_reg:x12; val_offset:13041*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13041*FLEN/8, x13, x9, x10)

inst_4369:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13044*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13044*FLEN/8, x13, x9, x10)

inst_4370:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13047*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13047*FLEN/8, x13, x9, x10)

inst_4371:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13050*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13050*FLEN/8, x13, x9, x10)

inst_4372:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x800000; valaddr_reg:x12; val_offset:13053*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13053*FLEN/8, x13, x9, x10)

inst_4373:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x80800000; valaddr_reg:x12; val_offset:13056*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13056*FLEN/8, x13, x9, x10)

inst_4374:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x800001; valaddr_reg:x12; val_offset:13059*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13059*FLEN/8, x13, x9, x10)

inst_4375:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x80855555; valaddr_reg:x12; val_offset:13062*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13062*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_34)
inst_4376:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13065*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13065*FLEN/8, x13, x9, x10)

inst_4377:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13068*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13068*FLEN/8, x13, x9, x10)

inst_4378:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13071*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13071*FLEN/8, x13, x9, x10)

inst_4379:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0xff800000; valaddr_reg:x12; val_offset:13074*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13074*FLEN/8, x13, x9, x10)

inst_4380:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13077*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13077*FLEN/8, x13, x9, x10)

inst_4381:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13080*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13080*FLEN/8, x13, x9, x10)

inst_4382:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13083*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13083*FLEN/8, x13, x9, x10)

inst_4383:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13086*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13086*FLEN/8, x13, x9, x10)

inst_4384:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13089*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13089*FLEN/8, x13, x9, x10)

inst_4385:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13092*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13092*FLEN/8, x13, x9, x10)

inst_4386:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13095*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13095*FLEN/8, x13, x9, x10)

inst_4387:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13098*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13098*FLEN/8, x13, x9, x10)

inst_4388:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x0; valaddr_reg:x12; val_offset:13101*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13101*FLEN/8, x13, x9, x10)

inst_4389:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x80000000; valaddr_reg:x12; val_offset:13104*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13104*FLEN/8, x13, x9, x10)

inst_4390:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x1; valaddr_reg:x12; val_offset:13107*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13107*FLEN/8, x13, x9, x10)

inst_4391:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x80000001; valaddr_reg:x12; val_offset:13110*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13110*FLEN/8, x13, x9, x10)

inst_4392:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x2; valaddr_reg:x12; val_offset:13113*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13113*FLEN/8, x13, x9, x10)

inst_4393:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13116*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13116*FLEN/8, x13, x9, x10)

inst_4394:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13119*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13119*FLEN/8, x13, x9, x10)

inst_4395:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13122*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13122*FLEN/8, x13, x9, x10)

inst_4396:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x800000; valaddr_reg:x12; val_offset:13125*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13125*FLEN/8, x13, x9, x10)

inst_4397:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x80800000; valaddr_reg:x12; val_offset:13128*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13128*FLEN/8, x13, x9, x10)

inst_4398:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x800001; valaddr_reg:x12; val_offset:13131*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13131*FLEN/8, x13, x9, x10)

inst_4399:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x80855555; valaddr_reg:x12; val_offset:13134*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13134*FLEN/8, x13, x9, x10)

inst_4400:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13137*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13137*FLEN/8, x13, x9, x10)

inst_4401:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13140*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13140*FLEN/8, x13, x9, x10)

inst_4402:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13143*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13143*FLEN/8, x13, x9, x10)

inst_4403:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0xff800000; valaddr_reg:x12; val_offset:13146*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13146*FLEN/8, x13, x9, x10)

inst_4404:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13149*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13149*FLEN/8, x13, x9, x10)

inst_4405:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13152*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13152*FLEN/8, x13, x9, x10)

inst_4406:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13155*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13155*FLEN/8, x13, x9, x10)

inst_4407:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13158*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13158*FLEN/8, x13, x9, x10)

inst_4408:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13161*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13161*FLEN/8, x13, x9, x10)

inst_4409:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13164*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13164*FLEN/8, x13, x9, x10)

inst_4410:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13167*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13167*FLEN/8, x13, x9, x10)

inst_4411:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13170*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13170*FLEN/8, x13, x9, x10)

inst_4412:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x0; valaddr_reg:x12; val_offset:13173*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13173*FLEN/8, x13, x9, x10)

inst_4413:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x80000000; valaddr_reg:x12; val_offset:13176*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13176*FLEN/8, x13, x9, x10)

inst_4414:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x1; valaddr_reg:x12; val_offset:13179*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13179*FLEN/8, x13, x9, x10)

inst_4415:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x80000001; valaddr_reg:x12; val_offset:13182*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13182*FLEN/8, x13, x9, x10)

inst_4416:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x2; valaddr_reg:x12; val_offset:13185*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13185*FLEN/8, x13, x9, x10)

inst_4417:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13188*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13188*FLEN/8, x13, x9, x10)

inst_4418:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13191*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13191*FLEN/8, x13, x9, x10)

inst_4419:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13194*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13194*FLEN/8, x13, x9, x10)

inst_4420:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x800000; valaddr_reg:x12; val_offset:13197*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13197*FLEN/8, x13, x9, x10)

inst_4421:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x80800000; valaddr_reg:x12; val_offset:13200*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13200*FLEN/8, x13, x9, x10)

inst_4422:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x800001; valaddr_reg:x12; val_offset:13203*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13203*FLEN/8, x13, x9, x10)

inst_4423:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x80855555; valaddr_reg:x12; val_offset:13206*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13206*FLEN/8, x13, x9, x10)

inst_4424:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13209*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13209*FLEN/8, x13, x9, x10)

inst_4425:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13212*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13212*FLEN/8, x13, x9, x10)

inst_4426:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13215*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13215*FLEN/8, x13, x9, x10)

inst_4427:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0xff800000; valaddr_reg:x12; val_offset:13218*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13218*FLEN/8, x13, x9, x10)

inst_4428:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13221*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13221*FLEN/8, x13, x9, x10)

inst_4429:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13224*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13224*FLEN/8, x13, x9, x10)

inst_4430:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13227*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13227*FLEN/8, x13, x9, x10)

inst_4431:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13230*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13230*FLEN/8, x13, x9, x10)

inst_4432:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13233*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13233*FLEN/8, x13, x9, x10)

inst_4433:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13236*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13236*FLEN/8, x13, x9, x10)

inst_4434:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13239*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13239*FLEN/8, x13, x9, x10)

inst_4435:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13242*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13242*FLEN/8, x13, x9, x10)

inst_4436:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x0; valaddr_reg:x12; val_offset:13245*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13245*FLEN/8, x13, x9, x10)

inst_4437:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x80000000; valaddr_reg:x12; val_offset:13248*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13248*FLEN/8, x13, x9, x10)

inst_4438:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x1; valaddr_reg:x12; val_offset:13251*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13251*FLEN/8, x13, x9, x10)

inst_4439:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x80000001; valaddr_reg:x12; val_offset:13254*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13254*FLEN/8, x13, x9, x10)

inst_4440:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x2; valaddr_reg:x12; val_offset:13257*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13257*FLEN/8, x13, x9, x10)

inst_4441:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13260*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13260*FLEN/8, x13, x9, x10)

inst_4442:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13263*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13263*FLEN/8, x13, x9, x10)

inst_4443:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13266*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13266*FLEN/8, x13, x9, x10)

inst_4444:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x800000; valaddr_reg:x12; val_offset:13269*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13269*FLEN/8, x13, x9, x10)

inst_4445:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x80800000; valaddr_reg:x12; val_offset:13272*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13272*FLEN/8, x13, x9, x10)

inst_4446:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x800001; valaddr_reg:x12; val_offset:13275*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13275*FLEN/8, x13, x9, x10)

inst_4447:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x80855555; valaddr_reg:x12; val_offset:13278*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13278*FLEN/8, x13, x9, x10)

inst_4448:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13281*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13281*FLEN/8, x13, x9, x10)

inst_4449:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13284*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13284*FLEN/8, x13, x9, x10)

inst_4450:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13287*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13287*FLEN/8, x13, x9, x10)

inst_4451:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0xff800000; valaddr_reg:x12; val_offset:13290*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13290*FLEN/8, x13, x9, x10)

inst_4452:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13293*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13293*FLEN/8, x13, x9, x10)

inst_4453:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13296*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13296*FLEN/8, x13, x9, x10)

inst_4454:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13299*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13299*FLEN/8, x13, x9, x10)

inst_4455:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13302*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13302*FLEN/8, x13, x9, x10)

inst_4456:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13305*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13305*FLEN/8, x13, x9, x10)

inst_4457:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13308*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13308*FLEN/8, x13, x9, x10)

inst_4458:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13311*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13311*FLEN/8, x13, x9, x10)

inst_4459:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13314*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13314*FLEN/8, x13, x9, x10)

inst_4460:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x0; valaddr_reg:x12; val_offset:13317*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13317*FLEN/8, x13, x9, x10)

inst_4461:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:13320*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13320*FLEN/8, x13, x9, x10)

inst_4462:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x1; valaddr_reg:x12; val_offset:13323*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13323*FLEN/8, x13, x9, x10)

inst_4463:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:13326*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13326*FLEN/8, x13, x9, x10)

inst_4464:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x2; valaddr_reg:x12; val_offset:13329*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13329*FLEN/8, x13, x9, x10)

inst_4465:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13332*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13332*FLEN/8, x13, x9, x10)

inst_4466:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13335*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13335*FLEN/8, x13, x9, x10)

inst_4467:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13338*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13338*FLEN/8, x13, x9, x10)

inst_4468:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x800000; valaddr_reg:x12; val_offset:13341*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13341*FLEN/8, x13, x9, x10)

inst_4469:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:13344*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13344*FLEN/8, x13, x9, x10)

inst_4470:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x800001; valaddr_reg:x12; val_offset:13347*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13347*FLEN/8, x13, x9, x10)

inst_4471:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:13350*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13350*FLEN/8, x13, x9, x10)

inst_4472:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13353*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13353*FLEN/8, x13, x9, x10)

inst_4473:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13356*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13356*FLEN/8, x13, x9, x10)

inst_4474:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13359*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13359*FLEN/8, x13, x9, x10)

inst_4475:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:13362*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13362*FLEN/8, x13, x9, x10)

inst_4476:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13365*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13365*FLEN/8, x13, x9, x10)

inst_4477:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13368*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13368*FLEN/8, x13, x9, x10)

inst_4478:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13371*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13371*FLEN/8, x13, x9, x10)

inst_4479:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13374*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13374*FLEN/8, x13, x9, x10)

inst_4480:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13377*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13377*FLEN/8, x13, x9, x10)

inst_4481:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13380*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13380*FLEN/8, x13, x9, x10)

inst_4482:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13383*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13383*FLEN/8, x13, x9, x10)

inst_4483:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13386*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13386*FLEN/8, x13, x9, x10)

inst_4484:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x0; valaddr_reg:x12; val_offset:13389*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13389*FLEN/8, x13, x9, x10)

inst_4485:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:13392*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13392*FLEN/8, x13, x9, x10)

inst_4486:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x1; valaddr_reg:x12; val_offset:13395*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13395*FLEN/8, x13, x9, x10)

inst_4487:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:13398*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13398*FLEN/8, x13, x9, x10)

inst_4488:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x2; valaddr_reg:x12; val_offset:13401*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13401*FLEN/8, x13, x9, x10)

inst_4489:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13404*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13404*FLEN/8, x13, x9, x10)

inst_4490:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13407*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13407*FLEN/8, x13, x9, x10)

inst_4491:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13410*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13410*FLEN/8, x13, x9, x10)

inst_4492:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x800000; valaddr_reg:x12; val_offset:13413*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13413*FLEN/8, x13, x9, x10)

inst_4493:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:13416*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13416*FLEN/8, x13, x9, x10)

inst_4494:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x800001; valaddr_reg:x12; val_offset:13419*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13419*FLEN/8, x13, x9, x10)

inst_4495:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:13422*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13422*FLEN/8, x13, x9, x10)

inst_4496:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13425*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13425*FLEN/8, x13, x9, x10)

inst_4497:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13428*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13428*FLEN/8, x13, x9, x10)

inst_4498:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13431*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13431*FLEN/8, x13, x9, x10)

inst_4499:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:13434*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13434*FLEN/8, x13, x9, x10)

inst_4500:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13437*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13437*FLEN/8, x13, x9, x10)

inst_4501:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13440*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13440*FLEN/8, x13, x9, x10)

inst_4502:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13443*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13443*FLEN/8, x13, x9, x10)

inst_4503:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13446*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13446*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_35)
inst_4504:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13449*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13449*FLEN/8, x13, x9, x10)

inst_4505:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13452*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13452*FLEN/8, x13, x9, x10)

inst_4506:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13455*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13455*FLEN/8, x13, x9, x10)

inst_4507:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13458*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13458*FLEN/8, x13, x9, x10)

inst_4508:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x0; valaddr_reg:x12; val_offset:13461*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13461*FLEN/8, x13, x9, x10)

inst_4509:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x80000000; valaddr_reg:x12; val_offset:13464*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13464*FLEN/8, x13, x9, x10)

inst_4510:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x1; valaddr_reg:x12; val_offset:13467*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13467*FLEN/8, x13, x9, x10)

inst_4511:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x80000001; valaddr_reg:x12; val_offset:13470*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13470*FLEN/8, x13, x9, x10)

inst_4512:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x2; valaddr_reg:x12; val_offset:13473*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13473*FLEN/8, x13, x9, x10)

inst_4513:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13476*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13476*FLEN/8, x13, x9, x10)

inst_4514:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13479*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13479*FLEN/8, x13, x9, x10)

inst_4515:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13482*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13482*FLEN/8, x13, x9, x10)

inst_4516:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x800000; valaddr_reg:x12; val_offset:13485*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13485*FLEN/8, x13, x9, x10)

inst_4517:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x80800000; valaddr_reg:x12; val_offset:13488*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13488*FLEN/8, x13, x9, x10)

inst_4518:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x800001; valaddr_reg:x12; val_offset:13491*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13491*FLEN/8, x13, x9, x10)

inst_4519:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x80855555; valaddr_reg:x12; val_offset:13494*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13494*FLEN/8, x13, x9, x10)

inst_4520:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13497*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13497*FLEN/8, x13, x9, x10)

inst_4521:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13500*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13500*FLEN/8, x13, x9, x10)

inst_4522:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13503*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13503*FLEN/8, x13, x9, x10)

inst_4523:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0xff800000; valaddr_reg:x12; val_offset:13506*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13506*FLEN/8, x13, x9, x10)

inst_4524:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13509*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13509*FLEN/8, x13, x9, x10)

inst_4525:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13512*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13512*FLEN/8, x13, x9, x10)

inst_4526:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13515*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13515*FLEN/8, x13, x9, x10)

inst_4527:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13518*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13518*FLEN/8, x13, x9, x10)

inst_4528:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13521*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13521*FLEN/8, x13, x9, x10)

inst_4529:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13524*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13524*FLEN/8, x13, x9, x10)

inst_4530:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13527*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13527*FLEN/8, x13, x9, x10)

inst_4531:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x0;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13530*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13530*FLEN/8, x13, x9, x10)

inst_4532:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x0; valaddr_reg:x12; val_offset:13533*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13533*FLEN/8, x13, x9, x10)

inst_4533:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x12; val_offset:13536*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13536*FLEN/8, x13, x9, x10)

inst_4534:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x1; valaddr_reg:x12; val_offset:13539*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13539*FLEN/8, x13, x9, x10)

inst_4535:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x12; val_offset:13542*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13542*FLEN/8, x13, x9, x10)

inst_4536:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x2; valaddr_reg:x12; val_offset:13545*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13545*FLEN/8, x13, x9, x10)

inst_4537:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:13548*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13548*FLEN/8, x13, x9, x10)

inst_4538:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:13551*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13551*FLEN/8, x13, x9, x10)

inst_4539:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:13554*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13554*FLEN/8, x13, x9, x10)

inst_4540:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x800000; valaddr_reg:x12; val_offset:13557*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13557*FLEN/8, x13, x9, x10)

inst_4541:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x12; val_offset:13560*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13560*FLEN/8, x13, x9, x10)

inst_4542:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x800001; valaddr_reg:x12; val_offset:13563*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13563*FLEN/8, x13, x9, x10)

inst_4543:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x80855555; valaddr_reg:x12; val_offset:13566*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13566*FLEN/8, x13, x9, x10)

inst_4544:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:13569*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13569*FLEN/8, x13, x9, x10)

inst_4545:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:13572*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13572*FLEN/8, x13, x9, x10)

inst_4546:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:13575*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13575*FLEN/8, x13, x9, x10)

inst_4547:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0xff800000; valaddr_reg:x12; val_offset:13578*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13578*FLEN/8, x13, x9, x10)

inst_4548:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:13581*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13581*FLEN/8, x13, x9, x10)

inst_4549:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:13584*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13584*FLEN/8, x13, x9, x10)

inst_4550:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:13587*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13587*FLEN/8, x13, x9, x10)

inst_4551:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:13590*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13590*FLEN/8, x13, x9, x10)

inst_4552:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:13593*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13593*FLEN/8, x13, x9, x10)

inst_4553:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:13596*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13596*FLEN/8, x13, x9, x10)

inst_4554:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:13599*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13599*FLEN/8, x13, x9, x10)

inst_4555:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x80000000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:13602*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13602*FLEN/8, x13, x9, x10)

inst_4556:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x1;
op3val:0x0; valaddr_reg:x12; val_offset:13605*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13605*FLEN/8, x13, x9, x10)

inst_4557:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x1;
op3val:0x80000000; valaddr_reg:x12; val_offset:13608*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13608*FLEN/8, x13, x9, x10)

inst_4558:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x1;
op3val:0x1; valaddr_reg:x12; val_offset:13611*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13611*FLEN/8, x13, x9, x10)

inst_4559:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x1;
op3val:0x80000001; valaddr_reg:x12; val_offset:13614*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13614*FLEN/8, x13, x9, x10)

inst_4560:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x1;
op3val:0x2; valaddr_reg:x12; val_offset:13617*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 13617*FLEN/8, x13, x9, x10)

#endif
RVTEST_CODE_END
RVMODEL_HALT
RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_12:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_13:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_14:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_15:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_16:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_17:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_18:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_19:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_20:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_21:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_22:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_23:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_24:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_25:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_26:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_27:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_28:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_29:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_30:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_31:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_32:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_33:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_34:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_35:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_36:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_37:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_38:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_39:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_40:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_41:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_42:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_43:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_44:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_45:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_46:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_47:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_48:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_49:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_50:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_51:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_52:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_53:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_54:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_55:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_56:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_57:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_58:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_59:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_60:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_61:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_62:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_63:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_64:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_65:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_66:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_67:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_68:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_69:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_70:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_71:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_72:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_73:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_74:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_75:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_76:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_77:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_78:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_79:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_80:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_81:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_82:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_83:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_84:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_85:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_86:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_87:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_88:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_89:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_90:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_91:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_92:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_93:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_94:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_95:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_96:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_97:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_98:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_99:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_100:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_101:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_102:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_103:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_104:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_105:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_106:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_107:
    .fill 30*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
