
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Apr 17 05:14:11 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/cgfs_fext/RV64Zfinx/fmsub.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fmsub_b1 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fmsub_b1)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9971:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0xff800000; valaddr_reg:x12; val_offset:29850*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29850*FLEN/8, x13, x9, x10)

inst_9972:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:29853*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29853*FLEN/8, x13, x9, x10)

inst_9973:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0xffc00000; valaddr_reg:x12; val_offset:29856*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29856*FLEN/8, x13, x9, x10)

inst_9974:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:29859*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29859*FLEN/8, x13, x9, x10)

inst_9975:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0xffc55555; valaddr_reg:x12; val_offset:29862*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29862*FLEN/8, x13, x9, x10)

inst_9976:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0x7f800001; valaddr_reg:x12; val_offset:29865*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29865*FLEN/8, x13, x9, x10)

inst_9977:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:29868*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29868*FLEN/8, x13, x9, x10)

inst_9978:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0x3f800000; valaddr_reg:x12; val_offset:29871*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29871*FLEN/8, x13, x9, x10)

inst_9979:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x80855555;
op3val:0xbf800000; valaddr_reg:x12; val_offset:29874*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29874*FLEN/8, x13, x9, x10)

inst_9980:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:29877*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29877*FLEN/8, x13, x9, x10)

inst_9981:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:29880*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29880*FLEN/8, x13, x9, x10)

inst_9982:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:29883*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29883*FLEN/8, x13, x9, x10)

inst_9983:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:29886*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29886*FLEN/8, x13, x9, x10)

inst_9984:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:29889*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29889*FLEN/8, x13, x9, x10)

inst_9985:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:29892*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29892*FLEN/8, x13, x9, x10)

inst_9986:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:29895*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29895*FLEN/8, x13, x9, x10)

inst_9987:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:29898*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29898*FLEN/8, x13, x9, x10)

inst_9988:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:29901*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29901*FLEN/8, x13, x9, x10)

inst_9989:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:29904*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29904*FLEN/8, x13, x9, x10)

inst_9990:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:29907*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29907*FLEN/8, x13, x9, x10)

inst_9991:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:29910*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29910*FLEN/8, x13, x9, x10)

inst_9992:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:29913*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29913*FLEN/8, x13, x9, x10)

inst_9993:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:29916*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29916*FLEN/8, x13, x9, x10)

inst_9994:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:29919*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29919*FLEN/8, x13, x9, x10)

inst_9995:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:29922*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29922*FLEN/8, x13, x9, x10)

inst_9996:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:29925*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29925*FLEN/8, x13, x9, x10)

inst_9997:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:29928*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29928*FLEN/8, x13, x9, x10)

inst_9998:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:29931*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29931*FLEN/8, x13, x9, x10)

inst_9999:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:29934*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29934*FLEN/8, x13, x9, x10)

inst_10000:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:29937*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29937*FLEN/8, x13, x9, x10)

inst_10001:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:29940*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29940*FLEN/8, x13, x9, x10)

inst_10002:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:29943*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29943*FLEN/8, x13, x9, x10)

inst_10003:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:29946*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29946*FLEN/8, x13, x9, x10)

inst_10004:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:29949*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29949*FLEN/8, x13, x9, x10)

inst_10005:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:29952*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29952*FLEN/8, x13, x9, x10)

inst_10006:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:29955*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29955*FLEN/8, x13, x9, x10)

inst_10007:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:29958*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29958*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_78)
inst_10008:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:29961*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29961*FLEN/8, x13, x9, x10)

inst_10009:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:29964*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29964*FLEN/8, x13, x9, x10)

inst_10010:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:29967*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29967*FLEN/8, x13, x9, x10)

inst_10011:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:29970*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29970*FLEN/8, x13, x9, x10)

inst_10012:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:29973*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29973*FLEN/8, x13, x9, x10)

inst_10013:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:29976*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29976*FLEN/8, x13, x9, x10)

inst_10014:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:29979*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29979*FLEN/8, x13, x9, x10)

inst_10015:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:29982*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29982*FLEN/8, x13, x9, x10)

inst_10016:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:29985*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29985*FLEN/8, x13, x9, x10)

inst_10017:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:29988*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29988*FLEN/8, x13, x9, x10)

inst_10018:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:29991*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29991*FLEN/8, x13, x9, x10)

inst_10019:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:29994*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29994*FLEN/8, x13, x9, x10)

inst_10020:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:29997*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 29997*FLEN/8, x13, x9, x10)

inst_10021:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30000*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30000*FLEN/8, x13, x9, x10)

inst_10022:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30003*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30003*FLEN/8, x13, x9, x10)

inst_10023:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30006*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30006*FLEN/8, x13, x9, x10)

inst_10024:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30009*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30009*FLEN/8, x13, x9, x10)

inst_10025:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30012*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30012*FLEN/8, x13, x9, x10)

inst_10026:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30015*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30015*FLEN/8, x13, x9, x10)

inst_10027:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30018*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30018*FLEN/8, x13, x9, x10)

inst_10028:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x0; valaddr_reg:x12; val_offset:30021*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30021*FLEN/8, x13, x9, x10)

inst_10029:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30024*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30024*FLEN/8, x13, x9, x10)

inst_10030:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x1; valaddr_reg:x12; val_offset:30027*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30027*FLEN/8, x13, x9, x10)

inst_10031:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30030*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30030*FLEN/8, x13, x9, x10)

inst_10032:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x2; valaddr_reg:x12; val_offset:30033*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30033*FLEN/8, x13, x9, x10)

inst_10033:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30036*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30036*FLEN/8, x13, x9, x10)

inst_10034:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30039*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30039*FLEN/8, x13, x9, x10)

inst_10035:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30042*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30042*FLEN/8, x13, x9, x10)

inst_10036:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x800000; valaddr_reg:x12; val_offset:30045*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30045*FLEN/8, x13, x9, x10)

inst_10037:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30048*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30048*FLEN/8, x13, x9, x10)

inst_10038:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x800001; valaddr_reg:x12; val_offset:30051*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30051*FLEN/8, x13, x9, x10)

inst_10039:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30054*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30054*FLEN/8, x13, x9, x10)

inst_10040:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30057*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30057*FLEN/8, x13, x9, x10)

inst_10041:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30060*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30060*FLEN/8, x13, x9, x10)

inst_10042:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30063*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30063*FLEN/8, x13, x9, x10)

inst_10043:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30066*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30066*FLEN/8, x13, x9, x10)

inst_10044:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30069*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30069*FLEN/8, x13, x9, x10)

inst_10045:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30072*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30072*FLEN/8, x13, x9, x10)

inst_10046:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30075*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30075*FLEN/8, x13, x9, x10)

inst_10047:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30078*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30078*FLEN/8, x13, x9, x10)

inst_10048:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30081*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30081*FLEN/8, x13, x9, x10)

inst_10049:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30084*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30084*FLEN/8, x13, x9, x10)

inst_10050:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30087*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30087*FLEN/8, x13, x9, x10)

inst_10051:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30090*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30090*FLEN/8, x13, x9, x10)

inst_10052:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x0; valaddr_reg:x12; val_offset:30093*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30093*FLEN/8, x13, x9, x10)

inst_10053:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30096*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30096*FLEN/8, x13, x9, x10)

inst_10054:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x1; valaddr_reg:x12; val_offset:30099*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30099*FLEN/8, x13, x9, x10)

inst_10055:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30102*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30102*FLEN/8, x13, x9, x10)

inst_10056:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x2; valaddr_reg:x12; val_offset:30105*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30105*FLEN/8, x13, x9, x10)

inst_10057:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30108*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30108*FLEN/8, x13, x9, x10)

inst_10058:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30111*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30111*FLEN/8, x13, x9, x10)

inst_10059:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30114*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30114*FLEN/8, x13, x9, x10)

inst_10060:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x800000; valaddr_reg:x12; val_offset:30117*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30117*FLEN/8, x13, x9, x10)

inst_10061:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30120*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30120*FLEN/8, x13, x9, x10)

inst_10062:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x800001; valaddr_reg:x12; val_offset:30123*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30123*FLEN/8, x13, x9, x10)

inst_10063:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30126*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30126*FLEN/8, x13, x9, x10)

inst_10064:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30129*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30129*FLEN/8, x13, x9, x10)

inst_10065:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30132*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30132*FLEN/8, x13, x9, x10)

inst_10066:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30135*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30135*FLEN/8, x13, x9, x10)

inst_10067:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30138*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30138*FLEN/8, x13, x9, x10)

inst_10068:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30141*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30141*FLEN/8, x13, x9, x10)

inst_10069:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30144*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30144*FLEN/8, x13, x9, x10)

inst_10070:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30147*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30147*FLEN/8, x13, x9, x10)

inst_10071:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30150*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30150*FLEN/8, x13, x9, x10)

inst_10072:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30153*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30153*FLEN/8, x13, x9, x10)

inst_10073:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30156*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30156*FLEN/8, x13, x9, x10)

inst_10074:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30159*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30159*FLEN/8, x13, x9, x10)

inst_10075:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xff800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30162*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30162*FLEN/8, x13, x9, x10)

inst_10076:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x0; valaddr_reg:x12; val_offset:30165*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30165*FLEN/8, x13, x9, x10)

inst_10077:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30168*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30168*FLEN/8, x13, x9, x10)

inst_10078:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x1; valaddr_reg:x12; val_offset:30171*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30171*FLEN/8, x13, x9, x10)

inst_10079:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30174*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30174*FLEN/8, x13, x9, x10)

inst_10080:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x2; valaddr_reg:x12; val_offset:30177*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30177*FLEN/8, x13, x9, x10)

inst_10081:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30180*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30180*FLEN/8, x13, x9, x10)

inst_10082:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30183*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30183*FLEN/8, x13, x9, x10)

inst_10083:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30186*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30186*FLEN/8, x13, x9, x10)

inst_10084:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x800000; valaddr_reg:x12; val_offset:30189*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30189*FLEN/8, x13, x9, x10)

inst_10085:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30192*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30192*FLEN/8, x13, x9, x10)

inst_10086:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x800001; valaddr_reg:x12; val_offset:30195*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30195*FLEN/8, x13, x9, x10)

inst_10087:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30198*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30198*FLEN/8, x13, x9, x10)

inst_10088:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30201*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30201*FLEN/8, x13, x9, x10)

inst_10089:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30204*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30204*FLEN/8, x13, x9, x10)

inst_10090:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30207*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30207*FLEN/8, x13, x9, x10)

inst_10091:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30210*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30210*FLEN/8, x13, x9, x10)

inst_10092:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30213*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30213*FLEN/8, x13, x9, x10)

inst_10093:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30216*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30216*FLEN/8, x13, x9, x10)

inst_10094:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30219*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30219*FLEN/8, x13, x9, x10)

inst_10095:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30222*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30222*FLEN/8, x13, x9, x10)

inst_10096:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30225*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30225*FLEN/8, x13, x9, x10)

inst_10097:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30228*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30228*FLEN/8, x13, x9, x10)

inst_10098:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30231*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30231*FLEN/8, x13, x9, x10)

inst_10099:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30234*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30234*FLEN/8, x13, x9, x10)

inst_10100:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x0; valaddr_reg:x12; val_offset:30237*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30237*FLEN/8, x13, x9, x10)

inst_10101:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30240*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30240*FLEN/8, x13, x9, x10)

inst_10102:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x1; valaddr_reg:x12; val_offset:30243*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30243*FLEN/8, x13, x9, x10)

inst_10103:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30246*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30246*FLEN/8, x13, x9, x10)

inst_10104:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x2; valaddr_reg:x12; val_offset:30249*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30249*FLEN/8, x13, x9, x10)

inst_10105:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30252*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30252*FLEN/8, x13, x9, x10)

inst_10106:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30255*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30255*FLEN/8, x13, x9, x10)

inst_10107:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30258*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30258*FLEN/8, x13, x9, x10)

inst_10108:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x800000; valaddr_reg:x12; val_offset:30261*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30261*FLEN/8, x13, x9, x10)

inst_10109:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30264*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30264*FLEN/8, x13, x9, x10)

inst_10110:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x800001; valaddr_reg:x12; val_offset:30267*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30267*FLEN/8, x13, x9, x10)

inst_10111:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30270*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30270*FLEN/8, x13, x9, x10)

inst_10112:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30273*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30273*FLEN/8, x13, x9, x10)

inst_10113:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30276*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30276*FLEN/8, x13, x9, x10)

inst_10114:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30279*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30279*FLEN/8, x13, x9, x10)

inst_10115:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30282*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30282*FLEN/8, x13, x9, x10)

inst_10116:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30285*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30285*FLEN/8, x13, x9, x10)

inst_10117:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30288*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30288*FLEN/8, x13, x9, x10)

inst_10118:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30291*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30291*FLEN/8, x13, x9, x10)

inst_10119:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30294*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30294*FLEN/8, x13, x9, x10)

inst_10120:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30297*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30297*FLEN/8, x13, x9, x10)

inst_10121:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30300*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30300*FLEN/8, x13, x9, x10)

inst_10122:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30303*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30303*FLEN/8, x13, x9, x10)

inst_10123:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30306*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30306*FLEN/8, x13, x9, x10)

inst_10124:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x0; valaddr_reg:x12; val_offset:30309*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30309*FLEN/8, x13, x9, x10)

inst_10125:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x80000000; valaddr_reg:x12; val_offset:30312*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30312*FLEN/8, x13, x9, x10)

inst_10126:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x1; valaddr_reg:x12; val_offset:30315*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30315*FLEN/8, x13, x9, x10)

inst_10127:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x80000001; valaddr_reg:x12; val_offset:30318*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30318*FLEN/8, x13, x9, x10)

inst_10128:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x2; valaddr_reg:x12; val_offset:30321*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30321*FLEN/8, x13, x9, x10)

inst_10129:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30324*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30324*FLEN/8, x13, x9, x10)

inst_10130:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30327*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30327*FLEN/8, x13, x9, x10)

inst_10131:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30330*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30330*FLEN/8, x13, x9, x10)

inst_10132:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x800000; valaddr_reg:x12; val_offset:30333*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30333*FLEN/8, x13, x9, x10)

inst_10133:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x80800000; valaddr_reg:x12; val_offset:30336*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30336*FLEN/8, x13, x9, x10)

inst_10134:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x800001; valaddr_reg:x12; val_offset:30339*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30339*FLEN/8, x13, x9, x10)

inst_10135:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x80855555; valaddr_reg:x12; val_offset:30342*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30342*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_79)
inst_10136:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30345*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30345*FLEN/8, x13, x9, x10)

inst_10137:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30348*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30348*FLEN/8, x13, x9, x10)

inst_10138:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30351*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30351*FLEN/8, x13, x9, x10)

inst_10139:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0xff800000; valaddr_reg:x12; val_offset:30354*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30354*FLEN/8, x13, x9, x10)

inst_10140:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30357*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30357*FLEN/8, x13, x9, x10)

inst_10141:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30360*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30360*FLEN/8, x13, x9, x10)

inst_10142:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30363*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30363*FLEN/8, x13, x9, x10)

inst_10143:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30366*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30366*FLEN/8, x13, x9, x10)

inst_10144:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30369*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30369*FLEN/8, x13, x9, x10)

inst_10145:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30372*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30372*FLEN/8, x13, x9, x10)

inst_10146:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30375*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30375*FLEN/8, x13, x9, x10)

inst_10147:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30378*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30378*FLEN/8, x13, x9, x10)

inst_10148:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x0; valaddr_reg:x12; val_offset:30381*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30381*FLEN/8, x13, x9, x10)

inst_10149:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x80000000; valaddr_reg:x12; val_offset:30384*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30384*FLEN/8, x13, x9, x10)

inst_10150:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x1; valaddr_reg:x12; val_offset:30387*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30387*FLEN/8, x13, x9, x10)

inst_10151:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x80000001; valaddr_reg:x12; val_offset:30390*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30390*FLEN/8, x13, x9, x10)

inst_10152:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x2; valaddr_reg:x12; val_offset:30393*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30393*FLEN/8, x13, x9, x10)

inst_10153:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30396*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30396*FLEN/8, x13, x9, x10)

inst_10154:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30399*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30399*FLEN/8, x13, x9, x10)

inst_10155:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30402*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30402*FLEN/8, x13, x9, x10)

inst_10156:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x800000; valaddr_reg:x12; val_offset:30405*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30405*FLEN/8, x13, x9, x10)

inst_10157:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x80800000; valaddr_reg:x12; val_offset:30408*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30408*FLEN/8, x13, x9, x10)

inst_10158:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x800001; valaddr_reg:x12; val_offset:30411*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30411*FLEN/8, x13, x9, x10)

inst_10159:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x80855555; valaddr_reg:x12; val_offset:30414*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30414*FLEN/8, x13, x9, x10)

inst_10160:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30417*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30417*FLEN/8, x13, x9, x10)

inst_10161:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30420*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30420*FLEN/8, x13, x9, x10)

inst_10162:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30423*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30423*FLEN/8, x13, x9, x10)

inst_10163:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0xff800000; valaddr_reg:x12; val_offset:30426*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30426*FLEN/8, x13, x9, x10)

inst_10164:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30429*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30429*FLEN/8, x13, x9, x10)

inst_10165:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30432*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30432*FLEN/8, x13, x9, x10)

inst_10166:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30435*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30435*FLEN/8, x13, x9, x10)

inst_10167:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30438*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30438*FLEN/8, x13, x9, x10)

inst_10168:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30441*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30441*FLEN/8, x13, x9, x10)

inst_10169:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30444*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30444*FLEN/8, x13, x9, x10)

inst_10170:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30447*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30447*FLEN/8, x13, x9, x10)

inst_10171:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30450*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30450*FLEN/8, x13, x9, x10)

inst_10172:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x0; valaddr_reg:x12; val_offset:30453*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30453*FLEN/8, x13, x9, x10)

inst_10173:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x80000000; valaddr_reg:x12; val_offset:30456*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30456*FLEN/8, x13, x9, x10)

inst_10174:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x1; valaddr_reg:x12; val_offset:30459*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30459*FLEN/8, x13, x9, x10)

inst_10175:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x80000001; valaddr_reg:x12; val_offset:30462*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30462*FLEN/8, x13, x9, x10)

inst_10176:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x2; valaddr_reg:x12; val_offset:30465*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30465*FLEN/8, x13, x9, x10)

inst_10177:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30468*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30468*FLEN/8, x13, x9, x10)

inst_10178:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30471*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30471*FLEN/8, x13, x9, x10)

inst_10179:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30474*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30474*FLEN/8, x13, x9, x10)

inst_10180:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x800000; valaddr_reg:x12; val_offset:30477*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30477*FLEN/8, x13, x9, x10)

inst_10181:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x80800000; valaddr_reg:x12; val_offset:30480*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30480*FLEN/8, x13, x9, x10)

inst_10182:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x800001; valaddr_reg:x12; val_offset:30483*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30483*FLEN/8, x13, x9, x10)

inst_10183:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x80855555; valaddr_reg:x12; val_offset:30486*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30486*FLEN/8, x13, x9, x10)

inst_10184:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30489*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30489*FLEN/8, x13, x9, x10)

inst_10185:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30492*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30492*FLEN/8, x13, x9, x10)

inst_10186:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30495*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30495*FLEN/8, x13, x9, x10)

inst_10187:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0xff800000; valaddr_reg:x12; val_offset:30498*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30498*FLEN/8, x13, x9, x10)

inst_10188:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30501*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30501*FLEN/8, x13, x9, x10)

inst_10189:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30504*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30504*FLEN/8, x13, x9, x10)

inst_10190:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30507*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30507*FLEN/8, x13, x9, x10)

inst_10191:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30510*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30510*FLEN/8, x13, x9, x10)

inst_10192:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30513*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30513*FLEN/8, x13, x9, x10)

inst_10193:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30516*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30516*FLEN/8, x13, x9, x10)

inst_10194:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30519*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30519*FLEN/8, x13, x9, x10)

inst_10195:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30522*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30522*FLEN/8, x13, x9, x10)

inst_10196:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x0; valaddr_reg:x12; val_offset:30525*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30525*FLEN/8, x13, x9, x10)

inst_10197:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x80000000; valaddr_reg:x12; val_offset:30528*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30528*FLEN/8, x13, x9, x10)

inst_10198:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x1; valaddr_reg:x12; val_offset:30531*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30531*FLEN/8, x13, x9, x10)

inst_10199:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x80000001; valaddr_reg:x12; val_offset:30534*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30534*FLEN/8, x13, x9, x10)

inst_10200:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x2; valaddr_reg:x12; val_offset:30537*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30537*FLEN/8, x13, x9, x10)

inst_10201:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30540*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30540*FLEN/8, x13, x9, x10)

inst_10202:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30543*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30543*FLEN/8, x13, x9, x10)

inst_10203:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30546*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30546*FLEN/8, x13, x9, x10)

inst_10204:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x800000; valaddr_reg:x12; val_offset:30549*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30549*FLEN/8, x13, x9, x10)

inst_10205:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x80800000; valaddr_reg:x12; val_offset:30552*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30552*FLEN/8, x13, x9, x10)

inst_10206:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x800001; valaddr_reg:x12; val_offset:30555*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30555*FLEN/8, x13, x9, x10)

inst_10207:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x80855555; valaddr_reg:x12; val_offset:30558*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30558*FLEN/8, x13, x9, x10)

inst_10208:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30561*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30561*FLEN/8, x13, x9, x10)

inst_10209:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30564*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30564*FLEN/8, x13, x9, x10)

inst_10210:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30567*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30567*FLEN/8, x13, x9, x10)

inst_10211:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0xff800000; valaddr_reg:x12; val_offset:30570*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30570*FLEN/8, x13, x9, x10)

inst_10212:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30573*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30573*FLEN/8, x13, x9, x10)

inst_10213:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30576*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30576*FLEN/8, x13, x9, x10)

inst_10214:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30579*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30579*FLEN/8, x13, x9, x10)

inst_10215:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30582*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30582*FLEN/8, x13, x9, x10)

inst_10216:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30585*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30585*FLEN/8, x13, x9, x10)

inst_10217:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30588*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30588*FLEN/8, x13, x9, x10)

inst_10218:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30591*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30591*FLEN/8, x13, x9, x10)

inst_10219:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30594*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30594*FLEN/8, x13, x9, x10)

inst_10220:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x0; valaddr_reg:x12; val_offset:30597*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30597*FLEN/8, x13, x9, x10)

inst_10221:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30600*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30600*FLEN/8, x13, x9, x10)

inst_10222:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x1; valaddr_reg:x12; val_offset:30603*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30603*FLEN/8, x13, x9, x10)

inst_10223:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30606*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30606*FLEN/8, x13, x9, x10)

inst_10224:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x2; valaddr_reg:x12; val_offset:30609*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30609*FLEN/8, x13, x9, x10)

inst_10225:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30612*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30612*FLEN/8, x13, x9, x10)

inst_10226:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30615*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30615*FLEN/8, x13, x9, x10)

inst_10227:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30618*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30618*FLEN/8, x13, x9, x10)

inst_10228:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x800000; valaddr_reg:x12; val_offset:30621*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30621*FLEN/8, x13, x9, x10)

inst_10229:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30624*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30624*FLEN/8, x13, x9, x10)

inst_10230:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x800001; valaddr_reg:x12; val_offset:30627*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30627*FLEN/8, x13, x9, x10)

inst_10231:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30630*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30630*FLEN/8, x13, x9, x10)

inst_10232:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30633*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30633*FLEN/8, x13, x9, x10)

inst_10233:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30636*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30636*FLEN/8, x13, x9, x10)

inst_10234:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30639*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30639*FLEN/8, x13, x9, x10)

inst_10235:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30642*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30642*FLEN/8, x13, x9, x10)

inst_10236:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30645*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30645*FLEN/8, x13, x9, x10)

inst_10237:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30648*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30648*FLEN/8, x13, x9, x10)

inst_10238:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30651*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30651*FLEN/8, x13, x9, x10)

inst_10239:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30654*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30654*FLEN/8, x13, x9, x10)

inst_10240:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30657*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30657*FLEN/8, x13, x9, x10)

inst_10241:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30660*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30660*FLEN/8, x13, x9, x10)

inst_10242:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30663*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30663*FLEN/8, x13, x9, x10)

inst_10243:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30666*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30666*FLEN/8, x13, x9, x10)

inst_10244:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x0; valaddr_reg:x12; val_offset:30669*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30669*FLEN/8, x13, x9, x10)

inst_10245:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30672*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30672*FLEN/8, x13, x9, x10)

inst_10246:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x1; valaddr_reg:x12; val_offset:30675*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30675*FLEN/8, x13, x9, x10)

inst_10247:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30678*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30678*FLEN/8, x13, x9, x10)

inst_10248:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x2; valaddr_reg:x12; val_offset:30681*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30681*FLEN/8, x13, x9, x10)

inst_10249:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30684*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30684*FLEN/8, x13, x9, x10)

inst_10250:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30687*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30687*FLEN/8, x13, x9, x10)

inst_10251:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30690*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30690*FLEN/8, x13, x9, x10)

inst_10252:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x800000; valaddr_reg:x12; val_offset:30693*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30693*FLEN/8, x13, x9, x10)

inst_10253:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30696*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30696*FLEN/8, x13, x9, x10)

inst_10254:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x800001; valaddr_reg:x12; val_offset:30699*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30699*FLEN/8, x13, x9, x10)

inst_10255:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30702*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30702*FLEN/8, x13, x9, x10)

inst_10256:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30705*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30705*FLEN/8, x13, x9, x10)

inst_10257:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30708*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30708*FLEN/8, x13, x9, x10)

inst_10258:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30711*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30711*FLEN/8, x13, x9, x10)

inst_10259:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30714*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30714*FLEN/8, x13, x9, x10)

inst_10260:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30717*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30717*FLEN/8, x13, x9, x10)

inst_10261:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30720*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30720*FLEN/8, x13, x9, x10)

inst_10262:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30723*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30723*FLEN/8, x13, x9, x10)

inst_10263:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30726*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30726*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_80)
inst_10264:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30729*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30729*FLEN/8, x13, x9, x10)

inst_10265:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30732*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30732*FLEN/8, x13, x9, x10)

inst_10266:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30735*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30735*FLEN/8, x13, x9, x10)

inst_10267:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30738*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30738*FLEN/8, x13, x9, x10)

inst_10268:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x0; valaddr_reg:x12; val_offset:30741*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30741*FLEN/8, x13, x9, x10)

inst_10269:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x80000000; valaddr_reg:x12; val_offset:30744*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30744*FLEN/8, x13, x9, x10)

inst_10270:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x1; valaddr_reg:x12; val_offset:30747*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30747*FLEN/8, x13, x9, x10)

inst_10271:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x80000001; valaddr_reg:x12; val_offset:30750*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30750*FLEN/8, x13, x9, x10)

inst_10272:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x2; valaddr_reg:x12; val_offset:30753*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30753*FLEN/8, x13, x9, x10)

inst_10273:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30756*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30756*FLEN/8, x13, x9, x10)

inst_10274:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30759*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30759*FLEN/8, x13, x9, x10)

inst_10275:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30762*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30762*FLEN/8, x13, x9, x10)

inst_10276:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x800000; valaddr_reg:x12; val_offset:30765*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30765*FLEN/8, x13, x9, x10)

inst_10277:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x80800000; valaddr_reg:x12; val_offset:30768*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30768*FLEN/8, x13, x9, x10)

inst_10278:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x800001; valaddr_reg:x12; val_offset:30771*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30771*FLEN/8, x13, x9, x10)

inst_10279:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x80855555; valaddr_reg:x12; val_offset:30774*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30774*FLEN/8, x13, x9, x10)

inst_10280:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30777*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30777*FLEN/8, x13, x9, x10)

inst_10281:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30780*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30780*FLEN/8, x13, x9, x10)

inst_10282:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30783*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30783*FLEN/8, x13, x9, x10)

inst_10283:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0xff800000; valaddr_reg:x12; val_offset:30786*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30786*FLEN/8, x13, x9, x10)

inst_10284:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30789*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30789*FLEN/8, x13, x9, x10)

inst_10285:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30792*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30792*FLEN/8, x13, x9, x10)

inst_10286:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30795*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30795*FLEN/8, x13, x9, x10)

inst_10287:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30798*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30798*FLEN/8, x13, x9, x10)

inst_10288:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30801*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30801*FLEN/8, x13, x9, x10)

inst_10289:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30804*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30804*FLEN/8, x13, x9, x10)

inst_10290:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30807*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30807*FLEN/8, x13, x9, x10)

inst_10291:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x0;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30810*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30810*FLEN/8, x13, x9, x10)

inst_10292:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x0; valaddr_reg:x12; val_offset:30813*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30813*FLEN/8, x13, x9, x10)

inst_10293:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x12; val_offset:30816*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30816*FLEN/8, x13, x9, x10)

inst_10294:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x1; valaddr_reg:x12; val_offset:30819*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30819*FLEN/8, x13, x9, x10)

inst_10295:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x12; val_offset:30822*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30822*FLEN/8, x13, x9, x10)

inst_10296:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x2; valaddr_reg:x12; val_offset:30825*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30825*FLEN/8, x13, x9, x10)

inst_10297:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30828*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30828*FLEN/8, x13, x9, x10)

inst_10298:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30831*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30831*FLEN/8, x13, x9, x10)

inst_10299:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30834*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30834*FLEN/8, x13, x9, x10)

inst_10300:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x800000; valaddr_reg:x12; val_offset:30837*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30837*FLEN/8, x13, x9, x10)

inst_10301:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x12; val_offset:30840*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30840*FLEN/8, x13, x9, x10)

inst_10302:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x800001; valaddr_reg:x12; val_offset:30843*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30843*FLEN/8, x13, x9, x10)

inst_10303:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x80855555; valaddr_reg:x12; val_offset:30846*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30846*FLEN/8, x13, x9, x10)

inst_10304:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30849*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30849*FLEN/8, x13, x9, x10)

inst_10305:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30852*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30852*FLEN/8, x13, x9, x10)

inst_10306:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30855*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30855*FLEN/8, x13, x9, x10)

inst_10307:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0xff800000; valaddr_reg:x12; val_offset:30858*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30858*FLEN/8, x13, x9, x10)

inst_10308:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30861*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30861*FLEN/8, x13, x9, x10)

inst_10309:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30864*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30864*FLEN/8, x13, x9, x10)

inst_10310:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30867*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30867*FLEN/8, x13, x9, x10)

inst_10311:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30870*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30870*FLEN/8, x13, x9, x10)

inst_10312:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30873*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30873*FLEN/8, x13, x9, x10)

inst_10313:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30876*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30876*FLEN/8, x13, x9, x10)

inst_10314:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30879*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30879*FLEN/8, x13, x9, x10)

inst_10315:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30882*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30882*FLEN/8, x13, x9, x10)

inst_10316:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x0; valaddr_reg:x12; val_offset:30885*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30885*FLEN/8, x13, x9, x10)

inst_10317:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x80000000; valaddr_reg:x12; val_offset:30888*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30888*FLEN/8, x13, x9, x10)

inst_10318:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x1; valaddr_reg:x12; val_offset:30891*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30891*FLEN/8, x13, x9, x10)

inst_10319:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x80000001; valaddr_reg:x12; val_offset:30894*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30894*FLEN/8, x13, x9, x10)

inst_10320:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x2; valaddr_reg:x12; val_offset:30897*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30897*FLEN/8, x13, x9, x10)

inst_10321:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30900*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30900*FLEN/8, x13, x9, x10)

inst_10322:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30903*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30903*FLEN/8, x13, x9, x10)

inst_10323:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30906*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30906*FLEN/8, x13, x9, x10)

inst_10324:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x800000; valaddr_reg:x12; val_offset:30909*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30909*FLEN/8, x13, x9, x10)

inst_10325:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x80800000; valaddr_reg:x12; val_offset:30912*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30912*FLEN/8, x13, x9, x10)

inst_10326:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x800001; valaddr_reg:x12; val_offset:30915*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30915*FLEN/8, x13, x9, x10)

inst_10327:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x80855555; valaddr_reg:x12; val_offset:30918*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30918*FLEN/8, x13, x9, x10)

inst_10328:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30921*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30921*FLEN/8, x13, x9, x10)

inst_10329:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30924*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30924*FLEN/8, x13, x9, x10)

inst_10330:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30927*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30927*FLEN/8, x13, x9, x10)

inst_10331:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0xff800000; valaddr_reg:x12; val_offset:30930*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30930*FLEN/8, x13, x9, x10)

inst_10332:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:30933*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30933*FLEN/8, x13, x9, x10)

inst_10333:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0xffc00000; valaddr_reg:x12; val_offset:30936*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30936*FLEN/8, x13, x9, x10)

inst_10334:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:30939*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30939*FLEN/8, x13, x9, x10)

inst_10335:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0xffc55555; valaddr_reg:x12; val_offset:30942*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30942*FLEN/8, x13, x9, x10)

inst_10336:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x7f800001; valaddr_reg:x12; val_offset:30945*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30945*FLEN/8, x13, x9, x10)

inst_10337:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:30948*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30948*FLEN/8, x13, x9, x10)

inst_10338:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0x3f800000; valaddr_reg:x12; val_offset:30951*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30951*FLEN/8, x13, x9, x10)

inst_10339:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x1;
op3val:0xbf800000; valaddr_reg:x12; val_offset:30954*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30954*FLEN/8, x13, x9, x10)

inst_10340:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x0; valaddr_reg:x12; val_offset:30957*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30957*FLEN/8, x13, x9, x10)

inst_10341:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x80000000; valaddr_reg:x12; val_offset:30960*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30960*FLEN/8, x13, x9, x10)

inst_10342:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x1; valaddr_reg:x12; val_offset:30963*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30963*FLEN/8, x13, x9, x10)

inst_10343:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x80000001; valaddr_reg:x12; val_offset:30966*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30966*FLEN/8, x13, x9, x10)

inst_10344:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x2; valaddr_reg:x12; val_offset:30969*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30969*FLEN/8, x13, x9, x10)

inst_10345:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:30972*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30972*FLEN/8, x13, x9, x10)

inst_10346:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:30975*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30975*FLEN/8, x13, x9, x10)

inst_10347:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:30978*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30978*FLEN/8, x13, x9, x10)

inst_10348:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x800000; valaddr_reg:x12; val_offset:30981*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30981*FLEN/8, x13, x9, x10)

inst_10349:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x80800000; valaddr_reg:x12; val_offset:30984*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30984*FLEN/8, x13, x9, x10)

inst_10350:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x800001; valaddr_reg:x12; val_offset:30987*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30987*FLEN/8, x13, x9, x10)

inst_10351:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x80855555; valaddr_reg:x12; val_offset:30990*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30990*FLEN/8, x13, x9, x10)

inst_10352:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:30993*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30993*FLEN/8, x13, x9, x10)

inst_10353:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:30996*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30996*FLEN/8, x13, x9, x10)

inst_10354:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:30999*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 30999*FLEN/8, x13, x9, x10)

inst_10355:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0xff800000; valaddr_reg:x12; val_offset:31002*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31002*FLEN/8, x13, x9, x10)

inst_10356:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31005*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31005*FLEN/8, x13, x9, x10)

inst_10357:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31008*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31008*FLEN/8, x13, x9, x10)

inst_10358:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31011*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31011*FLEN/8, x13, x9, x10)

inst_10359:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31014*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31014*FLEN/8, x13, x9, x10)

inst_10360:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31017*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31017*FLEN/8, x13, x9, x10)

inst_10361:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31020*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31020*FLEN/8, x13, x9, x10)

inst_10362:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31023*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31023*FLEN/8, x13, x9, x10)

inst_10363:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31026*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31026*FLEN/8, x13, x9, x10)

inst_10364:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x0; valaddr_reg:x12; val_offset:31029*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31029*FLEN/8, x13, x9, x10)

inst_10365:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x80000000; valaddr_reg:x12; val_offset:31032*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31032*FLEN/8, x13, x9, x10)

inst_10366:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x1; valaddr_reg:x12; val_offset:31035*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31035*FLEN/8, x13, x9, x10)

inst_10367:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x80000001; valaddr_reg:x12; val_offset:31038*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31038*FLEN/8, x13, x9, x10)

inst_10368:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x2; valaddr_reg:x12; val_offset:31041*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31041*FLEN/8, x13, x9, x10)

inst_10369:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31044*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31044*FLEN/8, x13, x9, x10)

inst_10370:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31047*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31047*FLEN/8, x13, x9, x10)

inst_10371:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31050*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31050*FLEN/8, x13, x9, x10)

inst_10372:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x800000; valaddr_reg:x12; val_offset:31053*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31053*FLEN/8, x13, x9, x10)

inst_10373:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x80800000; valaddr_reg:x12; val_offset:31056*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31056*FLEN/8, x13, x9, x10)

inst_10374:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x800001; valaddr_reg:x12; val_offset:31059*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31059*FLEN/8, x13, x9, x10)

inst_10375:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x80855555; valaddr_reg:x12; val_offset:31062*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31062*FLEN/8, x13, x9, x10)

inst_10376:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31065*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31065*FLEN/8, x13, x9, x10)

inst_10377:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31068*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31068*FLEN/8, x13, x9, x10)

inst_10378:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31071*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31071*FLEN/8, x13, x9, x10)

inst_10379:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0xff800000; valaddr_reg:x12; val_offset:31074*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31074*FLEN/8, x13, x9, x10)

inst_10380:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31077*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31077*FLEN/8, x13, x9, x10)

inst_10381:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31080*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31080*FLEN/8, x13, x9, x10)

inst_10382:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31083*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31083*FLEN/8, x13, x9, x10)

inst_10383:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31086*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31086*FLEN/8, x13, x9, x10)

inst_10384:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31089*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31089*FLEN/8, x13, x9, x10)

inst_10385:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31092*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31092*FLEN/8, x13, x9, x10)

inst_10386:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31095*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31095*FLEN/8, x13, x9, x10)

inst_10387:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x2;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31098*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31098*FLEN/8, x13, x9, x10)

inst_10388:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x0; valaddr_reg:x12; val_offset:31101*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31101*FLEN/8, x13, x9, x10)

inst_10389:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x80000000; valaddr_reg:x12; val_offset:31104*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31104*FLEN/8, x13, x9, x10)

inst_10390:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x1; valaddr_reg:x12; val_offset:31107*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31107*FLEN/8, x13, x9, x10)

inst_10391:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x80000001; valaddr_reg:x12; val_offset:31110*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31110*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_81)
inst_10392:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x2; valaddr_reg:x12; val_offset:31113*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31113*FLEN/8, x13, x9, x10)

inst_10393:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31116*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31116*FLEN/8, x13, x9, x10)

inst_10394:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31119*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31119*FLEN/8, x13, x9, x10)

inst_10395:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31122*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31122*FLEN/8, x13, x9, x10)

inst_10396:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x800000; valaddr_reg:x12; val_offset:31125*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31125*FLEN/8, x13, x9, x10)

inst_10397:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x80800000; valaddr_reg:x12; val_offset:31128*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31128*FLEN/8, x13, x9, x10)

inst_10398:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x800001; valaddr_reg:x12; val_offset:31131*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31131*FLEN/8, x13, x9, x10)

inst_10399:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x80855555; valaddr_reg:x12; val_offset:31134*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31134*FLEN/8, x13, x9, x10)

inst_10400:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31137*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31137*FLEN/8, x13, x9, x10)

inst_10401:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31140*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31140*FLEN/8, x13, x9, x10)

inst_10402:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31143*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31143*FLEN/8, x13, x9, x10)

inst_10403:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0xff800000; valaddr_reg:x12; val_offset:31146*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31146*FLEN/8, x13, x9, x10)

inst_10404:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31149*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31149*FLEN/8, x13, x9, x10)

inst_10405:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31152*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31152*FLEN/8, x13, x9, x10)

inst_10406:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31155*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31155*FLEN/8, x13, x9, x10)

inst_10407:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31158*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31158*FLEN/8, x13, x9, x10)

inst_10408:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31161*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31161*FLEN/8, x13, x9, x10)

inst_10409:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31164*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31164*FLEN/8, x13, x9, x10)

inst_10410:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31167*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31167*FLEN/8, x13, x9, x10)

inst_10411:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31170*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31170*FLEN/8, x13, x9, x10)

inst_10412:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:31173*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31173*FLEN/8, x13, x9, x10)

inst_10413:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:31176*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31176*FLEN/8, x13, x9, x10)

inst_10414:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:31179*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31179*FLEN/8, x13, x9, x10)

inst_10415:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:31182*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31182*FLEN/8, x13, x9, x10)

inst_10416:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:31185*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31185*FLEN/8, x13, x9, x10)

inst_10417:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31188*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31188*FLEN/8, x13, x9, x10)

inst_10418:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31191*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31191*FLEN/8, x13, x9, x10)

inst_10419:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31194*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31194*FLEN/8, x13, x9, x10)

inst_10420:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:31197*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31197*FLEN/8, x13, x9, x10)

inst_10421:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:31200*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31200*FLEN/8, x13, x9, x10)

inst_10422:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:31203*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31203*FLEN/8, x13, x9, x10)

inst_10423:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:31206*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31206*FLEN/8, x13, x9, x10)

inst_10424:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31209*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31209*FLEN/8, x13, x9, x10)

inst_10425:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31212*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31212*FLEN/8, x13, x9, x10)

inst_10426:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31215*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31215*FLEN/8, x13, x9, x10)

inst_10427:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:31218*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31218*FLEN/8, x13, x9, x10)

inst_10428:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31221*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31221*FLEN/8, x13, x9, x10)

inst_10429:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31224*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31224*FLEN/8, x13, x9, x10)

inst_10430:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31227*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31227*FLEN/8, x13, x9, x10)

inst_10431:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31230*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31230*FLEN/8, x13, x9, x10)

inst_10432:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31233*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31233*FLEN/8, x13, x9, x10)

inst_10433:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31236*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31236*FLEN/8, x13, x9, x10)

inst_10434:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31239*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31239*FLEN/8, x13, x9, x10)

inst_10435:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31242*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31242*FLEN/8, x13, x9, x10)

inst_10436:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x0; valaddr_reg:x12; val_offset:31245*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31245*FLEN/8, x13, x9, x10)

inst_10437:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:31248*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31248*FLEN/8, x13, x9, x10)

inst_10438:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x1; valaddr_reg:x12; val_offset:31251*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31251*FLEN/8, x13, x9, x10)

inst_10439:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:31254*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31254*FLEN/8, x13, x9, x10)

inst_10440:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x2; valaddr_reg:x12; val_offset:31257*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31257*FLEN/8, x13, x9, x10)

inst_10441:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31260*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31260*FLEN/8, x13, x9, x10)

inst_10442:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31263*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31263*FLEN/8, x13, x9, x10)

inst_10443:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31266*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31266*FLEN/8, x13, x9, x10)

inst_10444:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:31269*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31269*FLEN/8, x13, x9, x10)

inst_10445:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:31272*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31272*FLEN/8, x13, x9, x10)

inst_10446:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:31275*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31275*FLEN/8, x13, x9, x10)

inst_10447:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:31278*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31278*FLEN/8, x13, x9, x10)

inst_10448:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31281*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31281*FLEN/8, x13, x9, x10)

inst_10449:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31284*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31284*FLEN/8, x13, x9, x10)

inst_10450:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31287*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31287*FLEN/8, x13, x9, x10)

inst_10451:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:31290*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31290*FLEN/8, x13, x9, x10)

inst_10452:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31293*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31293*FLEN/8, x13, x9, x10)

inst_10453:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31296*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31296*FLEN/8, x13, x9, x10)

inst_10454:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31299*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31299*FLEN/8, x13, x9, x10)

inst_10455:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31302*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31302*FLEN/8, x13, x9, x10)

inst_10456:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31305*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31305*FLEN/8, x13, x9, x10)

inst_10457:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31308*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31308*FLEN/8, x13, x9, x10)

inst_10458:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31311*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31311*FLEN/8, x13, x9, x10)

inst_10459:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31314*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31314*FLEN/8, x13, x9, x10)

inst_10460:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x0; valaddr_reg:x12; val_offset:31317*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31317*FLEN/8, x13, x9, x10)

inst_10461:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:31320*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31320*FLEN/8, x13, x9, x10)

inst_10462:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x1; valaddr_reg:x12; val_offset:31323*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31323*FLEN/8, x13, x9, x10)

inst_10463:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:31326*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31326*FLEN/8, x13, x9, x10)

inst_10464:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x2; valaddr_reg:x12; val_offset:31329*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31329*FLEN/8, x13, x9, x10)

inst_10465:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31332*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31332*FLEN/8, x13, x9, x10)

inst_10466:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31335*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31335*FLEN/8, x13, x9, x10)

inst_10467:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31338*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31338*FLEN/8, x13, x9, x10)

inst_10468:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x800000; valaddr_reg:x12; val_offset:31341*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31341*FLEN/8, x13, x9, x10)

inst_10469:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:31344*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31344*FLEN/8, x13, x9, x10)

inst_10470:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x800001; valaddr_reg:x12; val_offset:31347*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31347*FLEN/8, x13, x9, x10)

inst_10471:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:31350*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31350*FLEN/8, x13, x9, x10)

inst_10472:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31353*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31353*FLEN/8, x13, x9, x10)

inst_10473:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31356*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31356*FLEN/8, x13, x9, x10)

inst_10474:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31359*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31359*FLEN/8, x13, x9, x10)

inst_10475:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:31362*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31362*FLEN/8, x13, x9, x10)

inst_10476:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31365*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31365*FLEN/8, x13, x9, x10)

inst_10477:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31368*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31368*FLEN/8, x13, x9, x10)

inst_10478:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31371*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31371*FLEN/8, x13, x9, x10)

inst_10479:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31374*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31374*FLEN/8, x13, x9, x10)

inst_10480:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31377*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31377*FLEN/8, x13, x9, x10)

inst_10481:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31380*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31380*FLEN/8, x13, x9, x10)

inst_10482:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31383*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31383*FLEN/8, x13, x9, x10)

inst_10483:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31386*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31386*FLEN/8, x13, x9, x10)

inst_10484:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x0; valaddr_reg:x12; val_offset:31389*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31389*FLEN/8, x13, x9, x10)

inst_10485:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:31392*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31392*FLEN/8, x13, x9, x10)

inst_10486:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x1; valaddr_reg:x12; val_offset:31395*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31395*FLEN/8, x13, x9, x10)

inst_10487:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:31398*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31398*FLEN/8, x13, x9, x10)

inst_10488:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x2; valaddr_reg:x12; val_offset:31401*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31401*FLEN/8, x13, x9, x10)

inst_10489:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31404*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31404*FLEN/8, x13, x9, x10)

inst_10490:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31407*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31407*FLEN/8, x13, x9, x10)

inst_10491:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31410*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31410*FLEN/8, x13, x9, x10)

inst_10492:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x800000; valaddr_reg:x12; val_offset:31413*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31413*FLEN/8, x13, x9, x10)

inst_10493:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:31416*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31416*FLEN/8, x13, x9, x10)

inst_10494:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x800001; valaddr_reg:x12; val_offset:31419*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31419*FLEN/8, x13, x9, x10)

inst_10495:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:31422*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31422*FLEN/8, x13, x9, x10)

inst_10496:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31425*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31425*FLEN/8, x13, x9, x10)

inst_10497:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31428*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31428*FLEN/8, x13, x9, x10)

inst_10498:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31431*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31431*FLEN/8, x13, x9, x10)

inst_10499:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:31434*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31434*FLEN/8, x13, x9, x10)

inst_10500:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31437*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31437*FLEN/8, x13, x9, x10)

inst_10501:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31440*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31440*FLEN/8, x13, x9, x10)

inst_10502:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31443*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31443*FLEN/8, x13, x9, x10)

inst_10503:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31446*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31446*FLEN/8, x13, x9, x10)

inst_10504:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31449*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31449*FLEN/8, x13, x9, x10)

inst_10505:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31452*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31452*FLEN/8, x13, x9, x10)

inst_10506:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31455*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31455*FLEN/8, x13, x9, x10)

inst_10507:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31458*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31458*FLEN/8, x13, x9, x10)

inst_10508:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x0; valaddr_reg:x12; val_offset:31461*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31461*FLEN/8, x13, x9, x10)

inst_10509:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x80000000; valaddr_reg:x12; val_offset:31464*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31464*FLEN/8, x13, x9, x10)

inst_10510:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x1; valaddr_reg:x12; val_offset:31467*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31467*FLEN/8, x13, x9, x10)

inst_10511:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x80000001; valaddr_reg:x12; val_offset:31470*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31470*FLEN/8, x13, x9, x10)

inst_10512:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x2; valaddr_reg:x12; val_offset:31473*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31473*FLEN/8, x13, x9, x10)

inst_10513:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31476*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31476*FLEN/8, x13, x9, x10)

inst_10514:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31479*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31479*FLEN/8, x13, x9, x10)

inst_10515:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31482*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31482*FLEN/8, x13, x9, x10)

inst_10516:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x800000; valaddr_reg:x12; val_offset:31485*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31485*FLEN/8, x13, x9, x10)

inst_10517:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x80800000; valaddr_reg:x12; val_offset:31488*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31488*FLEN/8, x13, x9, x10)

inst_10518:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x800001; valaddr_reg:x12; val_offset:31491*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31491*FLEN/8, x13, x9, x10)

inst_10519:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x80855555; valaddr_reg:x12; val_offset:31494*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31494*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_82)
inst_10520:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31497*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31497*FLEN/8, x13, x9, x10)

inst_10521:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31500*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31500*FLEN/8, x13, x9, x10)

inst_10522:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31503*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31503*FLEN/8, x13, x9, x10)

inst_10523:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0xff800000; valaddr_reg:x12; val_offset:31506*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31506*FLEN/8, x13, x9, x10)

inst_10524:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31509*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31509*FLEN/8, x13, x9, x10)

inst_10525:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31512*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31512*FLEN/8, x13, x9, x10)

inst_10526:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31515*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31515*FLEN/8, x13, x9, x10)

inst_10527:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31518*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31518*FLEN/8, x13, x9, x10)

inst_10528:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31521*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31521*FLEN/8, x13, x9, x10)

inst_10529:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31524*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31524*FLEN/8, x13, x9, x10)

inst_10530:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31527*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31527*FLEN/8, x13, x9, x10)

inst_10531:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x800001;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31530*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31530*FLEN/8, x13, x9, x10)

inst_10532:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x0; valaddr_reg:x12; val_offset:31533*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31533*FLEN/8, x13, x9, x10)

inst_10533:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x80000000; valaddr_reg:x12; val_offset:31536*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31536*FLEN/8, x13, x9, x10)

inst_10534:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x1; valaddr_reg:x12; val_offset:31539*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31539*FLEN/8, x13, x9, x10)

inst_10535:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x80000001; valaddr_reg:x12; val_offset:31542*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31542*FLEN/8, x13, x9, x10)

inst_10536:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x2; valaddr_reg:x12; val_offset:31545*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31545*FLEN/8, x13, x9, x10)

inst_10537:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31548*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31548*FLEN/8, x13, x9, x10)

inst_10538:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31551*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31551*FLEN/8, x13, x9, x10)

inst_10539:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31554*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31554*FLEN/8, x13, x9, x10)

inst_10540:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x800000; valaddr_reg:x12; val_offset:31557*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31557*FLEN/8, x13, x9, x10)

inst_10541:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x80800000; valaddr_reg:x12; val_offset:31560*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31560*FLEN/8, x13, x9, x10)

inst_10542:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x800001; valaddr_reg:x12; val_offset:31563*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31563*FLEN/8, x13, x9, x10)

inst_10543:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x80855555; valaddr_reg:x12; val_offset:31566*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31566*FLEN/8, x13, x9, x10)

inst_10544:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31569*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31569*FLEN/8, x13, x9, x10)

inst_10545:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31572*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31572*FLEN/8, x13, x9, x10)

inst_10546:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31575*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31575*FLEN/8, x13, x9, x10)

inst_10547:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0xff800000; valaddr_reg:x12; val_offset:31578*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31578*FLEN/8, x13, x9, x10)

inst_10548:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31581*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31581*FLEN/8, x13, x9, x10)

inst_10549:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31584*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31584*FLEN/8, x13, x9, x10)

inst_10550:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31587*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31587*FLEN/8, x13, x9, x10)

inst_10551:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31590*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31590*FLEN/8, x13, x9, x10)

inst_10552:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31593*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31593*FLEN/8, x13, x9, x10)

inst_10553:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31596*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31596*FLEN/8, x13, x9, x10)

inst_10554:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31599*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31599*FLEN/8, x13, x9, x10)

inst_10555:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31602*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31602*FLEN/8, x13, x9, x10)

inst_10556:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:31605*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31605*FLEN/8, x13, x9, x10)

inst_10557:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:31608*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31608*FLEN/8, x13, x9, x10)

inst_10558:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:31611*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31611*FLEN/8, x13, x9, x10)

inst_10559:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:31614*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31614*FLEN/8, x13, x9, x10)

inst_10560:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:31617*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31617*FLEN/8, x13, x9, x10)

inst_10561:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31620*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31620*FLEN/8, x13, x9, x10)

inst_10562:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31623*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31623*FLEN/8, x13, x9, x10)

inst_10563:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31626*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31626*FLEN/8, x13, x9, x10)

inst_10564:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:31629*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31629*FLEN/8, x13, x9, x10)

inst_10565:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:31632*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31632*FLEN/8, x13, x9, x10)

inst_10566:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:31635*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31635*FLEN/8, x13, x9, x10)

inst_10567:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:31638*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31638*FLEN/8, x13, x9, x10)

inst_10568:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31641*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31641*FLEN/8, x13, x9, x10)

inst_10569:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31644*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31644*FLEN/8, x13, x9, x10)

inst_10570:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31647*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31647*FLEN/8, x13, x9, x10)

inst_10571:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:31650*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31650*FLEN/8, x13, x9, x10)

inst_10572:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31653*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31653*FLEN/8, x13, x9, x10)

inst_10573:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31656*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31656*FLEN/8, x13, x9, x10)

inst_10574:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31659*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31659*FLEN/8, x13, x9, x10)

inst_10575:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31662*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31662*FLEN/8, x13, x9, x10)

inst_10576:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31665*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31665*FLEN/8, x13, x9, x10)

inst_10577:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31668*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31668*FLEN/8, x13, x9, x10)

inst_10578:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31671*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31671*FLEN/8, x13, x9, x10)

inst_10579:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31674*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31674*FLEN/8, x13, x9, x10)

inst_10580:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x0; valaddr_reg:x12; val_offset:31677*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31677*FLEN/8, x13, x9, x10)

inst_10581:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x80000000; valaddr_reg:x12; val_offset:31680*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31680*FLEN/8, x13, x9, x10)

inst_10582:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x1; valaddr_reg:x12; val_offset:31683*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31683*FLEN/8, x13, x9, x10)

inst_10583:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x80000001; valaddr_reg:x12; val_offset:31686*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31686*FLEN/8, x13, x9, x10)

inst_10584:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x2; valaddr_reg:x12; val_offset:31689*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31689*FLEN/8, x13, x9, x10)

inst_10585:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31692*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31692*FLEN/8, x13, x9, x10)

inst_10586:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31695*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31695*FLEN/8, x13, x9, x10)

inst_10587:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31698*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31698*FLEN/8, x13, x9, x10)

inst_10588:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x800000; valaddr_reg:x12; val_offset:31701*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31701*FLEN/8, x13, x9, x10)

inst_10589:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x80800000; valaddr_reg:x12; val_offset:31704*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31704*FLEN/8, x13, x9, x10)

inst_10590:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x800001; valaddr_reg:x12; val_offset:31707*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31707*FLEN/8, x13, x9, x10)

inst_10591:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x80855555; valaddr_reg:x12; val_offset:31710*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31710*FLEN/8, x13, x9, x10)

inst_10592:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31713*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31713*FLEN/8, x13, x9, x10)

inst_10593:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31716*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31716*FLEN/8, x13, x9, x10)

inst_10594:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31719*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31719*FLEN/8, x13, x9, x10)

inst_10595:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0xff800000; valaddr_reg:x12; val_offset:31722*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31722*FLEN/8, x13, x9, x10)

inst_10596:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31725*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31725*FLEN/8, x13, x9, x10)

inst_10597:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31728*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31728*FLEN/8, x13, x9, x10)

inst_10598:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31731*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31731*FLEN/8, x13, x9, x10)

inst_10599:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31734*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31734*FLEN/8, x13, x9, x10)

inst_10600:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31737*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31737*FLEN/8, x13, x9, x10)

inst_10601:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31740*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31740*FLEN/8, x13, x9, x10)

inst_10602:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31743*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31743*FLEN/8, x13, x9, x10)

inst_10603:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31746*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31746*FLEN/8, x13, x9, x10)

inst_10604:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x0; valaddr_reg:x12; val_offset:31749*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31749*FLEN/8, x13, x9, x10)

inst_10605:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:31752*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31752*FLEN/8, x13, x9, x10)

inst_10606:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x1; valaddr_reg:x12; val_offset:31755*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31755*FLEN/8, x13, x9, x10)

inst_10607:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:31758*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31758*FLEN/8, x13, x9, x10)

inst_10608:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x2; valaddr_reg:x12; val_offset:31761*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31761*FLEN/8, x13, x9, x10)

inst_10609:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31764*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31764*FLEN/8, x13, x9, x10)

inst_10610:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31767*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31767*FLEN/8, x13, x9, x10)

inst_10611:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31770*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31770*FLEN/8, x13, x9, x10)

inst_10612:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x800000; valaddr_reg:x12; val_offset:31773*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31773*FLEN/8, x13, x9, x10)

inst_10613:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:31776*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31776*FLEN/8, x13, x9, x10)

inst_10614:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x800001; valaddr_reg:x12; val_offset:31779*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31779*FLEN/8, x13, x9, x10)

inst_10615:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:31782*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31782*FLEN/8, x13, x9, x10)

inst_10616:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31785*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31785*FLEN/8, x13, x9, x10)

inst_10617:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31788*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31788*FLEN/8, x13, x9, x10)

inst_10618:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31791*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31791*FLEN/8, x13, x9, x10)

inst_10619:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:31794*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31794*FLEN/8, x13, x9, x10)

inst_10620:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31797*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31797*FLEN/8, x13, x9, x10)

inst_10621:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31800*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31800*FLEN/8, x13, x9, x10)

inst_10622:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31803*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31803*FLEN/8, x13, x9, x10)

inst_10623:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31806*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31806*FLEN/8, x13, x9, x10)

inst_10624:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31809*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31809*FLEN/8, x13, x9, x10)

inst_10625:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31812*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31812*FLEN/8, x13, x9, x10)

inst_10626:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31815*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31815*FLEN/8, x13, x9, x10)

inst_10627:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31818*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31818*FLEN/8, x13, x9, x10)

inst_10628:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x0; valaddr_reg:x12; val_offset:31821*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31821*FLEN/8, x13, x9, x10)

inst_10629:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x80000000; valaddr_reg:x12; val_offset:31824*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31824*FLEN/8, x13, x9, x10)

inst_10630:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x1; valaddr_reg:x12; val_offset:31827*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31827*FLEN/8, x13, x9, x10)

inst_10631:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x80000001; valaddr_reg:x12; val_offset:31830*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31830*FLEN/8, x13, x9, x10)

inst_10632:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x2; valaddr_reg:x12; val_offset:31833*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31833*FLEN/8, x13, x9, x10)

inst_10633:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31836*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31836*FLEN/8, x13, x9, x10)

inst_10634:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31839*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31839*FLEN/8, x13, x9, x10)

inst_10635:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31842*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31842*FLEN/8, x13, x9, x10)

inst_10636:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x800000; valaddr_reg:x12; val_offset:31845*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31845*FLEN/8, x13, x9, x10)

inst_10637:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x80800000; valaddr_reg:x12; val_offset:31848*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31848*FLEN/8, x13, x9, x10)

inst_10638:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x800001; valaddr_reg:x12; val_offset:31851*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31851*FLEN/8, x13, x9, x10)

inst_10639:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x80855555; valaddr_reg:x12; val_offset:31854*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31854*FLEN/8, x13, x9, x10)

inst_10640:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31857*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31857*FLEN/8, x13, x9, x10)

inst_10641:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31860*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31860*FLEN/8, x13, x9, x10)

inst_10642:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31863*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31863*FLEN/8, x13, x9, x10)

inst_10643:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0xff800000; valaddr_reg:x12; val_offset:31866*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31866*FLEN/8, x13, x9, x10)

inst_10644:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31869*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31869*FLEN/8, x13, x9, x10)

inst_10645:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31872*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31872*FLEN/8, x13, x9, x10)

inst_10646:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31875*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31875*FLEN/8, x13, x9, x10)

inst_10647:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31878*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31878*FLEN/8, x13, x9, x10)

RVTEST_SIGBASE(x9,signature_x9_83)
inst_10648:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31881*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31881*FLEN/8, x13, x9, x10)

inst_10649:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31884*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31884*FLEN/8, x13, x9, x10)

inst_10650:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31887*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31887*FLEN/8, x13, x9, x10)

inst_10651:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31890*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31890*FLEN/8, x13, x9, x10)

inst_10652:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x0; valaddr_reg:x12; val_offset:31893*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31893*FLEN/8, x13, x9, x10)

inst_10653:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x80000000; valaddr_reg:x12; val_offset:31896*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31896*FLEN/8, x13, x9, x10)

inst_10654:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x1; valaddr_reg:x12; val_offset:31899*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31899*FLEN/8, x13, x9, x10)

inst_10655:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x80000001; valaddr_reg:x12; val_offset:31902*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31902*FLEN/8, x13, x9, x10)

inst_10656:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x2; valaddr_reg:x12; val_offset:31905*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31905*FLEN/8, x13, x9, x10)

inst_10657:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31908*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31908*FLEN/8, x13, x9, x10)

inst_10658:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31911*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31911*FLEN/8, x13, x9, x10)

inst_10659:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31914*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31914*FLEN/8, x13, x9, x10)

inst_10660:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x800000; valaddr_reg:x12; val_offset:31917*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31917*FLEN/8, x13, x9, x10)

inst_10661:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x80800000; valaddr_reg:x12; val_offset:31920*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31920*FLEN/8, x13, x9, x10)

inst_10662:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x800001; valaddr_reg:x12; val_offset:31923*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31923*FLEN/8, x13, x9, x10)

inst_10663:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x80855555; valaddr_reg:x12; val_offset:31926*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31926*FLEN/8, x13, x9, x10)

inst_10664:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:31929*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31929*FLEN/8, x13, x9, x10)

inst_10665:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:31932*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31932*FLEN/8, x13, x9, x10)

inst_10666:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:31935*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31935*FLEN/8, x13, x9, x10)

inst_10667:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0xff800000; valaddr_reg:x12; val_offset:31938*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31938*FLEN/8, x13, x9, x10)

inst_10668:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:31941*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31941*FLEN/8, x13, x9, x10)

inst_10669:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:31944*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31944*FLEN/8, x13, x9, x10)

inst_10670:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:31947*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31947*FLEN/8, x13, x9, x10)

inst_10671:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:31950*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31950*FLEN/8, x13, x9, x10)

inst_10672:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:31953*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31953*FLEN/8, x13, x9, x10)

inst_10673:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x2aaaaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0xffaaaaaa; valaddr_reg:x12; val_offset:31956*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31956*FLEN/8, x13, x9, x10)

inst_10674:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0x3f800000; valaddr_reg:x12; val_offset:31959*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31959*FLEN/8, x13, x9, x10)

inst_10675:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
op3val:0xbf800000; valaddr_reg:x12; val_offset:31962*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31962*FLEN/8, x13, x9, x10)

inst_10676:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x0; valaddr_reg:x12; val_offset:31965*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31965*FLEN/8, x13, x9, x10)

inst_10677:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x80000000; valaddr_reg:x12; val_offset:31968*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31968*FLEN/8, x13, x9, x10)

inst_10678:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x1; valaddr_reg:x12; val_offset:31971*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31971*FLEN/8, x13, x9, x10)

inst_10679:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x80000001; valaddr_reg:x12; val_offset:31974*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31974*FLEN/8, x13, x9, x10)

inst_10680:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x2; valaddr_reg:x12; val_offset:31977*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31977*FLEN/8, x13, x9, x10)

inst_10681:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x807ffffe; valaddr_reg:x12; val_offset:31980*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31980*FLEN/8, x13, x9, x10)

inst_10682:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x7fffff; valaddr_reg:x12; val_offset:31983*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31983*FLEN/8, x13, x9, x10)

inst_10683:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x807fffff; valaddr_reg:x12; val_offset:31986*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31986*FLEN/8, x13, x9, x10)

inst_10684:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x800000; valaddr_reg:x12; val_offset:31989*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31989*FLEN/8, x13, x9, x10)

inst_10685:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x80800000; valaddr_reg:x12; val_offset:31992*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31992*FLEN/8, x13, x9, x10)

inst_10686:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x800001; valaddr_reg:x12; val_offset:31995*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31995*FLEN/8, x13, x9, x10)

inst_10687:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x055555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x80855555; valaddr_reg:x12; val_offset:31998*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 31998*FLEN/8, x13, x9, x10)

inst_10688:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x7f7fffff; valaddr_reg:x12; val_offset:32001*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32001*FLEN/8, x13, x9, x10)

inst_10689:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0xff7fffff; valaddr_reg:x12; val_offset:32004*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32004*FLEN/8, x13, x9, x10)

inst_10690:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x7f800000; valaddr_reg:x12; val_offset:32007*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32007*FLEN/8, x13, x9, x10)

inst_10691:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0xff800000; valaddr_reg:x12; val_offset:32010*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32010*FLEN/8, x13, x9, x10)

inst_10692:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x7fc00000; valaddr_reg:x12; val_offset:32013*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32013*FLEN/8, x13, x9, x10)

inst_10693:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0xffc00000; valaddr_reg:x12; val_offset:32016*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32016*FLEN/8, x13, x9, x10)

inst_10694:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x7fc00001; valaddr_reg:x12; val_offset:32019*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32019*FLEN/8, x13, x9, x10)

inst_10695:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 1 and fe3 == 0xff and fm3 == 0x455555 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0xffc55555; valaddr_reg:x12; val_offset:32022*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32022*FLEN/8, x13, x9, x10)

inst_10696:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xff and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
op3val:0x7f800001; valaddr_reg:x12; val_offset:32025*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x12, 32025*FLEN/8, x13, x9, x10)

#endif
RVTEST_CODE_END
RVMODEL_HALT
RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_12:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_13:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_14:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_15:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_16:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_17:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_18:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_19:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_20:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_21:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_22:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_23:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_24:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_25:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_26:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_27:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_28:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_29:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_30:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_31:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_32:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_33:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_34:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_35:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_36:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_37:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_38:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_39:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_40:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_41:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_42:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_43:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_44:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_45:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_46:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_47:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_48:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_49:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_50:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_51:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_52:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_53:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_54:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_55:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_56:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_57:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_58:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_59:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_60:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_61:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_62:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_63:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_64:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_65:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_66:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_67:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_68:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_69:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_70:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_71:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_72:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_73:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_74:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_75:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_76:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_77:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_78:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_79:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_80:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_81:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_82:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_83:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_84:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_85:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_86:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_87:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_88:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_89:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_90:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_91:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_92:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_93:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_94:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_95:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_96:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_97:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_98:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_99:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_100:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_101:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_102:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_103:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_104:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_105:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_106:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_107:
    .fill 30*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
