
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Apr 17 11:59:21 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/cgfs_fext/RV64Zfinx/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fnmadd_b15)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3001fff; valaddr_reg:x13; val_offset:64365*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64365*FLEN/8, x14, x8, x12)

inst_21477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37fe000; valaddr_reg:x13; val_offset:64368*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64368*FLEN/8, x14, x8, x12)

inst_21478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3000fff; valaddr_reg:x13; val_offset:64371*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64371*FLEN/8, x14, x8, x12)

inst_21479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ff000; valaddr_reg:x13; val_offset:64374*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64374*FLEN/8, x14, x8, x12)

inst_21480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x30007ff; valaddr_reg:x13; val_offset:64377*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64377*FLEN/8, x14, x8, x12)

inst_21481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ff800; valaddr_reg:x13; val_offset:64380*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64380*FLEN/8, x14, x8, x12)

inst_21482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x30003ff; valaddr_reg:x13; val_offset:64383*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64383*FLEN/8, x14, x8, x12)

inst_21483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ffc00; valaddr_reg:x13; val_offset:64386*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64386*FLEN/8, x14, x8, x12)

inst_21484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x30001ff; valaddr_reg:x13; val_offset:64389*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64389*FLEN/8, x14, x8, x12)

inst_21485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ffe00; valaddr_reg:x13; val_offset:64392*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64392*FLEN/8, x14, x8, x12)

inst_21486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x30000ff; valaddr_reg:x13; val_offset:64395*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64395*FLEN/8, x14, x8, x12)

inst_21487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37fff00; valaddr_reg:x13; val_offset:64398*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64398*FLEN/8, x14, x8, x12)

inst_21488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x300007f; valaddr_reg:x13; val_offset:64401*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64401*FLEN/8, x14, x8, x12)

inst_21489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37fff80; valaddr_reg:x13; val_offset:64404*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64404*FLEN/8, x14, x8, x12)

inst_21490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x300003f; valaddr_reg:x13; val_offset:64407*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64407*FLEN/8, x14, x8, x12)

inst_21491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37fffc0; valaddr_reg:x13; val_offset:64410*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64410*FLEN/8, x14, x8, x12)

inst_21492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x300001f; valaddr_reg:x13; val_offset:64413*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64413*FLEN/8, x14, x8, x12)

inst_21493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37fffe0; valaddr_reg:x13; val_offset:64416*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64416*FLEN/8, x14, x8, x12)

inst_21494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x300000f; valaddr_reg:x13; val_offset:64419*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64419*FLEN/8, x14, x8, x12)

inst_21495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ffff0; valaddr_reg:x13; val_offset:64422*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64422*FLEN/8, x14, x8, x12)

inst_21496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3000007; valaddr_reg:x13; val_offset:64425*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64425*FLEN/8, x14, x8, x12)

inst_21497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ffff8; valaddr_reg:x13; val_offset:64428*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64428*FLEN/8, x14, x8, x12)

inst_21498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3000003; valaddr_reg:x13; val_offset:64431*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64431*FLEN/8, x14, x8, x12)

inst_21499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ffffc; valaddr_reg:x13; val_offset:64434*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64434*FLEN/8, x14, x8, x12)

inst_21500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3000001; valaddr_reg:x13; val_offset:64437*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64437*FLEN/8, x14, x8, x12)

inst_21501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x37ffffe; valaddr_reg:x13; val_offset:64440*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64440*FLEN/8, x14, x8, x12)

inst_21502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:64443*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64443*FLEN/8, x14, x8, x12)

inst_21503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:64446*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64446*FLEN/8, x14, x8, x12)

inst_21504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:64449*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64449*FLEN/8, x14, x8, x12)

inst_21505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:64452*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64452*FLEN/8, x14, x8, x12)

inst_21506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:64455*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64455*FLEN/8, x14, x8, x12)

inst_21507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:64458*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64458*FLEN/8, x14, x8, x12)

inst_21508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:64461*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64461*FLEN/8, x14, x8, x12)

inst_21509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:64464*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64464*FLEN/8, x14, x8, x12)

inst_21510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:64467*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64467*FLEN/8, x14, x8, x12)

inst_21511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:64470*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64470*FLEN/8, x14, x8, x12)

inst_21512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:64473*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64473*FLEN/8, x14, x8, x12)

inst_21513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:64476*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64476*FLEN/8, x14, x8, x12)

inst_21514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:64479*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64479*FLEN/8, x14, x8, x12)

inst_21515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:64482*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64482*FLEN/8, x14, x8, x12)

inst_21516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:64485*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64485*FLEN/8, x14, x8, x12)

inst_21517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e2c6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2e2c6b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:64488*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64488*FLEN/8, x14, x8, x12)

inst_21518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x13; val_offset:64491*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64491*FLEN/8, x14, x8, x12)

inst_21519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800000; valaddr_reg:x13; val_offset:64494*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64494*FLEN/8, x14, x8, x12)

inst_21520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3bfffff; valaddr_reg:x13; val_offset:64497*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64497*FLEN/8, x14, x8, x12)

inst_21521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3c00000; valaddr_reg:x13; val_offset:64500*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64500*FLEN/8, x14, x8, x12)

inst_21522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x39fffff; valaddr_reg:x13; val_offset:64503*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64503*FLEN/8, x14, x8, x12)

inst_21523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3e00000; valaddr_reg:x13; val_offset:64506*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64506*FLEN/8, x14, x8, x12)

inst_21524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38fffff; valaddr_reg:x13; val_offset:64509*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64509*FLEN/8, x14, x8, x12)

inst_21525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3f00000; valaddr_reg:x13; val_offset:64512*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64512*FLEN/8, x14, x8, x12)

inst_21526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x387ffff; valaddr_reg:x13; val_offset:64515*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64515*FLEN/8, x14, x8, x12)

inst_21527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3f80000; valaddr_reg:x13; val_offset:64518*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64518*FLEN/8, x14, x8, x12)

inst_21528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x383ffff; valaddr_reg:x13; val_offset:64521*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64521*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_168)
inst_21529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fc0000; valaddr_reg:x13; val_offset:64524*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64524*FLEN/8, x14, x8, x12)

inst_21530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x381ffff; valaddr_reg:x13; val_offset:64527*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64527*FLEN/8, x14, x8, x12)

inst_21531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fe0000; valaddr_reg:x13; val_offset:64530*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64530*FLEN/8, x14, x8, x12)

inst_21532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380ffff; valaddr_reg:x13; val_offset:64533*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64533*FLEN/8, x14, x8, x12)

inst_21533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ff0000; valaddr_reg:x13; val_offset:64536*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64536*FLEN/8, x14, x8, x12)

inst_21534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3807fff; valaddr_reg:x13; val_offset:64539*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64539*FLEN/8, x14, x8, x12)

inst_21535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ff8000; valaddr_reg:x13; val_offset:64542*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64542*FLEN/8, x14, x8, x12)

inst_21536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3803fff; valaddr_reg:x13; val_offset:64545*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64545*FLEN/8, x14, x8, x12)

inst_21537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x13; val_offset:64548*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64548*FLEN/8, x14, x8, x12)

inst_21538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3801fff; valaddr_reg:x13; val_offset:64551*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64551*FLEN/8, x14, x8, x12)

inst_21539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x13; val_offset:64554*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64554*FLEN/8, x14, x8, x12)

inst_21540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800fff; valaddr_reg:x13; val_offset:64557*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64557*FLEN/8, x14, x8, x12)

inst_21541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x13; val_offset:64560*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64560*FLEN/8, x14, x8, x12)

inst_21542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38007ff; valaddr_reg:x13; val_offset:64563*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64563*FLEN/8, x14, x8, x12)

inst_21543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x13; val_offset:64566*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64566*FLEN/8, x14, x8, x12)

inst_21544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38003ff; valaddr_reg:x13; val_offset:64569*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64569*FLEN/8, x14, x8, x12)

inst_21545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x13; val_offset:64572*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64572*FLEN/8, x14, x8, x12)

inst_21546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38001ff; valaddr_reg:x13; val_offset:64575*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64575*FLEN/8, x14, x8, x12)

inst_21547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x13; val_offset:64578*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64578*FLEN/8, x14, x8, x12)

inst_21548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38000ff; valaddr_reg:x13; val_offset:64581*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64581*FLEN/8, x14, x8, x12)

inst_21549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x13; val_offset:64584*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64584*FLEN/8, x14, x8, x12)

inst_21550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380007f; valaddr_reg:x13; val_offset:64587*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64587*FLEN/8, x14, x8, x12)

inst_21551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x13; val_offset:64590*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64590*FLEN/8, x14, x8, x12)

inst_21552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380003f; valaddr_reg:x13; val_offset:64593*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64593*FLEN/8, x14, x8, x12)

inst_21553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x13; val_offset:64596*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64596*FLEN/8, x14, x8, x12)

inst_21554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380001f; valaddr_reg:x13; val_offset:64599*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64599*FLEN/8, x14, x8, x12)

inst_21555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x13; val_offset:64602*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64602*FLEN/8, x14, x8, x12)

inst_21556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380000f; valaddr_reg:x13; val_offset:64605*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64605*FLEN/8, x14, x8, x12)

inst_21557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x13; val_offset:64608*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64608*FLEN/8, x14, x8, x12)

inst_21558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800007; valaddr_reg:x13; val_offset:64611*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64611*FLEN/8, x14, x8, x12)

inst_21559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x13; val_offset:64614*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64614*FLEN/8, x14, x8, x12)

inst_21560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800003; valaddr_reg:x13; val_offset:64617*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64617*FLEN/8, x14, x8, x12)

inst_21561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x13; val_offset:64620*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64620*FLEN/8, x14, x8, x12)

inst_21562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800001; valaddr_reg:x13; val_offset:64623*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64623*FLEN/8, x14, x8, x12)

inst_21563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x13; val_offset:64626*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64626*FLEN/8, x14, x8, x12)

inst_21564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:64629*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64629*FLEN/8, x14, x8, x12)

inst_21565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:64632*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64632*FLEN/8, x14, x8, x12)

inst_21566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:64635*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64635*FLEN/8, x14, x8, x12)

inst_21567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:64638*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64638*FLEN/8, x14, x8, x12)

inst_21568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:64641*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64641*FLEN/8, x14, x8, x12)

inst_21569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:64644*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64644*FLEN/8, x14, x8, x12)

inst_21570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:64647*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64647*FLEN/8, x14, x8, x12)

inst_21571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:64650*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64650*FLEN/8, x14, x8, x12)

inst_21572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:64653*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64653*FLEN/8, x14, x8, x12)

inst_21573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:64656*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64656*FLEN/8, x14, x8, x12)

inst_21574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:64659*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64659*FLEN/8, x14, x8, x12)

inst_21575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:64662*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64662*FLEN/8, x14, x8, x12)

inst_21576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:64665*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64665*FLEN/8, x14, x8, x12)

inst_21577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:64668*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64668*FLEN/8, x14, x8, x12)

inst_21578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:64671*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64671*FLEN/8, x14, x8, x12)

inst_21579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f216afe; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:64674*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64674*FLEN/8, x14, x8, x12)

inst_21580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fffff; valaddr_reg:x13; val_offset:64677*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64677*FLEN/8, x14, x8, x12)

inst_21581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4000000; valaddr_reg:x13; val_offset:64680*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64680*FLEN/8, x14, x8, x12)

inst_21582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x43fffff; valaddr_reg:x13; val_offset:64683*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64683*FLEN/8, x14, x8, x12)

inst_21583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4400000; valaddr_reg:x13; val_offset:64686*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64686*FLEN/8, x14, x8, x12)

inst_21584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x41fffff; valaddr_reg:x13; val_offset:64689*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64689*FLEN/8, x14, x8, x12)

inst_21585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4600000; valaddr_reg:x13; val_offset:64692*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64692*FLEN/8, x14, x8, x12)

inst_21586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x40fffff; valaddr_reg:x13; val_offset:64695*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64695*FLEN/8, x14, x8, x12)

inst_21587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4700000; valaddr_reg:x13; val_offset:64698*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64698*FLEN/8, x14, x8, x12)

inst_21588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x407ffff; valaddr_reg:x13; val_offset:64701*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64701*FLEN/8, x14, x8, x12)

inst_21589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4780000; valaddr_reg:x13; val_offset:64704*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64704*FLEN/8, x14, x8, x12)

inst_21590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x403ffff; valaddr_reg:x13; val_offset:64707*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64707*FLEN/8, x14, x8, x12)

inst_21591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47c0000; valaddr_reg:x13; val_offset:64710*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64710*FLEN/8, x14, x8, x12)

inst_21592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x401ffff; valaddr_reg:x13; val_offset:64713*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64713*FLEN/8, x14, x8, x12)

inst_21593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47e0000; valaddr_reg:x13; val_offset:64716*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64716*FLEN/8, x14, x8, x12)

inst_21594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x400ffff; valaddr_reg:x13; val_offset:64719*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64719*FLEN/8, x14, x8, x12)

inst_21595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47f0000; valaddr_reg:x13; val_offset:64722*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64722*FLEN/8, x14, x8, x12)

inst_21596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4007fff; valaddr_reg:x13; val_offset:64725*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64725*FLEN/8, x14, x8, x12)

inst_21597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47f8000; valaddr_reg:x13; val_offset:64728*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64728*FLEN/8, x14, x8, x12)

inst_21598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4003fff; valaddr_reg:x13; val_offset:64731*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64731*FLEN/8, x14, x8, x12)

inst_21599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fc000; valaddr_reg:x13; val_offset:64734*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64734*FLEN/8, x14, x8, x12)

inst_21600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4001fff; valaddr_reg:x13; val_offset:64737*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64737*FLEN/8, x14, x8, x12)

inst_21601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fe000; valaddr_reg:x13; val_offset:64740*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64740*FLEN/8, x14, x8, x12)

inst_21602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4000fff; valaddr_reg:x13; val_offset:64743*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64743*FLEN/8, x14, x8, x12)

inst_21603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ff000; valaddr_reg:x13; val_offset:64746*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64746*FLEN/8, x14, x8, x12)

inst_21604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x40007ff; valaddr_reg:x13; val_offset:64749*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64749*FLEN/8, x14, x8, x12)

inst_21605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ff800; valaddr_reg:x13; val_offset:64752*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64752*FLEN/8, x14, x8, x12)

inst_21606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x40003ff; valaddr_reg:x13; val_offset:64755*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64755*FLEN/8, x14, x8, x12)

inst_21607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ffc00; valaddr_reg:x13; val_offset:64758*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64758*FLEN/8, x14, x8, x12)

inst_21608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x40001ff; valaddr_reg:x13; val_offset:64761*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64761*FLEN/8, x14, x8, x12)

inst_21609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ffe00; valaddr_reg:x13; val_offset:64764*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64764*FLEN/8, x14, x8, x12)

inst_21610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x40000ff; valaddr_reg:x13; val_offset:64767*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64767*FLEN/8, x14, x8, x12)

inst_21611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fff00; valaddr_reg:x13; val_offset:64770*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64770*FLEN/8, x14, x8, x12)

inst_21612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x400007f; valaddr_reg:x13; val_offset:64773*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64773*FLEN/8, x14, x8, x12)

inst_21613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fff80; valaddr_reg:x13; val_offset:64776*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64776*FLEN/8, x14, x8, x12)

inst_21614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x400003f; valaddr_reg:x13; val_offset:64779*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64779*FLEN/8, x14, x8, x12)

inst_21615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fffc0; valaddr_reg:x13; val_offset:64782*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64782*FLEN/8, x14, x8, x12)

inst_21616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x400001f; valaddr_reg:x13; val_offset:64785*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64785*FLEN/8, x14, x8, x12)

inst_21617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47fffe0; valaddr_reg:x13; val_offset:64788*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64788*FLEN/8, x14, x8, x12)

inst_21618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x400000f; valaddr_reg:x13; val_offset:64791*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64791*FLEN/8, x14, x8, x12)

inst_21619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ffff0; valaddr_reg:x13; val_offset:64794*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64794*FLEN/8, x14, x8, x12)

inst_21620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4000007; valaddr_reg:x13; val_offset:64797*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64797*FLEN/8, x14, x8, x12)

inst_21621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ffff8; valaddr_reg:x13; val_offset:64800*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64800*FLEN/8, x14, x8, x12)

inst_21622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4000003; valaddr_reg:x13; val_offset:64803*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64803*FLEN/8, x14, x8, x12)

inst_21623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ffffc; valaddr_reg:x13; val_offset:64806*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64806*FLEN/8, x14, x8, x12)

inst_21624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4000001; valaddr_reg:x13; val_offset:64809*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64809*FLEN/8, x14, x8, x12)

inst_21625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x47ffffe; valaddr_reg:x13; val_offset:64812*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64812*FLEN/8, x14, x8, x12)

inst_21626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:64815*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64815*FLEN/8, x14, x8, x12)

inst_21627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:64818*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64818*FLEN/8, x14, x8, x12)

inst_21628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:64821*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64821*FLEN/8, x14, x8, x12)

inst_21629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:64824*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64824*FLEN/8, x14, x8, x12)

inst_21630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:64827*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64827*FLEN/8, x14, x8, x12)

inst_21631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:64830*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64830*FLEN/8, x14, x8, x12)

inst_21632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:64833*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64833*FLEN/8, x14, x8, x12)

inst_21633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:64836*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64836*FLEN/8, x14, x8, x12)

inst_21634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:64839*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64839*FLEN/8, x14, x8, x12)

inst_21635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:64842*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64842*FLEN/8, x14, x8, x12)

inst_21636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:64845*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64845*FLEN/8, x14, x8, x12)

inst_21637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:64848*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64848*FLEN/8, x14, x8, x12)

inst_21638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:64851*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64851*FLEN/8, x14, x8, x12)

inst_21639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:64854*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64854*FLEN/8, x14, x8, x12)

inst_21640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:64857*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64857*FLEN/8, x14, x8, x12)

inst_21641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f447a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f447a; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:64860*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64860*FLEN/8, x14, x8, x12)

inst_21642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x13; val_offset:64863*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64863*FLEN/8, x14, x8, x12)

inst_21643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4800000; valaddr_reg:x13; val_offset:64866*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64866*FLEN/8, x14, x8, x12)

inst_21644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x13; val_offset:64869*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64869*FLEN/8, x14, x8, x12)

inst_21645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x13; val_offset:64872*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64872*FLEN/8, x14, x8, x12)

inst_21646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x13; val_offset:64875*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64875*FLEN/8, x14, x8, x12)

inst_21647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x13; val_offset:64878*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64878*FLEN/8, x14, x8, x12)

inst_21648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x13; val_offset:64881*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64881*FLEN/8, x14, x8, x12)

inst_21649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x13; val_offset:64884*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64884*FLEN/8, x14, x8, x12)

inst_21650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x13; val_offset:64887*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64887*FLEN/8, x14, x8, x12)

inst_21651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x13; val_offset:64890*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64890*FLEN/8, x14, x8, x12)

inst_21652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x13; val_offset:64893*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64893*FLEN/8, x14, x8, x12)

inst_21653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x13; val_offset:64896*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64896*FLEN/8, x14, x8, x12)

inst_21654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x13; val_offset:64899*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64899*FLEN/8, x14, x8, x12)

inst_21655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x13; val_offset:64902*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64902*FLEN/8, x14, x8, x12)

inst_21656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x13; val_offset:64905*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64905*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_169)
inst_21657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x13; val_offset:64908*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64908*FLEN/8, x14, x8, x12)

inst_21658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x13; val_offset:64911*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64911*FLEN/8, x14, x8, x12)

inst_21659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x13; val_offset:64914*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64914*FLEN/8, x14, x8, x12)

inst_21660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x13; val_offset:64917*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64917*FLEN/8, x14, x8, x12)

inst_21661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x13; val_offset:64920*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64920*FLEN/8, x14, x8, x12)

inst_21662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x13; val_offset:64923*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64923*FLEN/8, x14, x8, x12)

inst_21663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x13; val_offset:64926*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64926*FLEN/8, x14, x8, x12)

inst_21664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x13; val_offset:64929*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64929*FLEN/8, x14, x8, x12)

inst_21665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x13; val_offset:64932*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64932*FLEN/8, x14, x8, x12)

inst_21666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x13; val_offset:64935*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64935*FLEN/8, x14, x8, x12)

inst_21667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x13; val_offset:64938*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64938*FLEN/8, x14, x8, x12)

inst_21668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x13; val_offset:64941*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64941*FLEN/8, x14, x8, x12)

inst_21669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x13; val_offset:64944*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64944*FLEN/8, x14, x8, x12)

inst_21670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x13; val_offset:64947*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64947*FLEN/8, x14, x8, x12)

inst_21671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x13; val_offset:64950*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64950*FLEN/8, x14, x8, x12)

inst_21672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x13; val_offset:64953*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64953*FLEN/8, x14, x8, x12)

inst_21673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x13; val_offset:64956*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64956*FLEN/8, x14, x8, x12)

inst_21674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x480007f; valaddr_reg:x13; val_offset:64959*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64959*FLEN/8, x14, x8, x12)

inst_21675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x13; val_offset:64962*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64962*FLEN/8, x14, x8, x12)

inst_21676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x480003f; valaddr_reg:x13; val_offset:64965*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64965*FLEN/8, x14, x8, x12)

inst_21677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x13; val_offset:64968*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64968*FLEN/8, x14, x8, x12)

inst_21678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x480001f; valaddr_reg:x13; val_offset:64971*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64971*FLEN/8, x14, x8, x12)

inst_21679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x13; val_offset:64974*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64974*FLEN/8, x14, x8, x12)

inst_21680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x480000f; valaddr_reg:x13; val_offset:64977*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64977*FLEN/8, x14, x8, x12)

inst_21681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x13; val_offset:64980*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64980*FLEN/8, x14, x8, x12)

inst_21682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4800007; valaddr_reg:x13; val_offset:64983*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64983*FLEN/8, x14, x8, x12)

inst_21683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x13; val_offset:64986*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64986*FLEN/8, x14, x8, x12)

inst_21684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4800003; valaddr_reg:x13; val_offset:64989*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64989*FLEN/8, x14, x8, x12)

inst_21685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x13; val_offset:64992*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64992*FLEN/8, x14, x8, x12)

inst_21686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4800001; valaddr_reg:x13; val_offset:64995*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64995*FLEN/8, x14, x8, x12)

inst_21687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x13; val_offset:64998*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 64998*FLEN/8, x14, x8, x12)

inst_21688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:65001*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65001*FLEN/8, x14, x8, x12)

inst_21689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:65004*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65004*FLEN/8, x14, x8, x12)

inst_21690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:65007*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65007*FLEN/8, x14, x8, x12)

inst_21691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:65010*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65010*FLEN/8, x14, x8, x12)

inst_21692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:65013*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65013*FLEN/8, x14, x8, x12)

inst_21693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:65016*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65016*FLEN/8, x14, x8, x12)

inst_21694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:65019*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65019*FLEN/8, x14, x8, x12)

inst_21695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:65022*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65022*FLEN/8, x14, x8, x12)

inst_21696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:65025*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65025*FLEN/8, x14, x8, x12)

inst_21697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:65028*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65028*FLEN/8, x14, x8, x12)

inst_21698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:65031*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65031*FLEN/8, x14, x8, x12)

inst_21699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:65034*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65034*FLEN/8, x14, x8, x12)

inst_21700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:65037*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65037*FLEN/8, x14, x8, x12)

inst_21701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:65040*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65040*FLEN/8, x14, x8, x12)

inst_21702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:65043*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65043*FLEN/8, x14, x8, x12)

inst_21703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0466fb; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:65046*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65046*FLEN/8, x14, x8, x12)

inst_21704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x13; val_offset:65049*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65049*FLEN/8, x14, x8, x12)

inst_21705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5000000; valaddr_reg:x13; val_offset:65052*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65052*FLEN/8, x14, x8, x12)

inst_21706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x13; val_offset:65055*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65055*FLEN/8, x14, x8, x12)

inst_21707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5400000; valaddr_reg:x13; val_offset:65058*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65058*FLEN/8, x14, x8, x12)

inst_21708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x13; val_offset:65061*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65061*FLEN/8, x14, x8, x12)

inst_21709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5600000; valaddr_reg:x13; val_offset:65064*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65064*FLEN/8, x14, x8, x12)

inst_21710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x13; val_offset:65067*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65067*FLEN/8, x14, x8, x12)

inst_21711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5700000; valaddr_reg:x13; val_offset:65070*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65070*FLEN/8, x14, x8, x12)

inst_21712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x13; val_offset:65073*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65073*FLEN/8, x14, x8, x12)

inst_21713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5780000; valaddr_reg:x13; val_offset:65076*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65076*FLEN/8, x14, x8, x12)

inst_21714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x13; val_offset:65079*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65079*FLEN/8, x14, x8, x12)

inst_21715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x13; val_offset:65082*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65082*FLEN/8, x14, x8, x12)

inst_21716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x13; val_offset:65085*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65085*FLEN/8, x14, x8, x12)

inst_21717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x13; val_offset:65088*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65088*FLEN/8, x14, x8, x12)

inst_21718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x13; val_offset:65091*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65091*FLEN/8, x14, x8, x12)

inst_21719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x13; val_offset:65094*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65094*FLEN/8, x14, x8, x12)

inst_21720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x13; val_offset:65097*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65097*FLEN/8, x14, x8, x12)

inst_21721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x13; val_offset:65100*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65100*FLEN/8, x14, x8, x12)

inst_21722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x13; val_offset:65103*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65103*FLEN/8, x14, x8, x12)

inst_21723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x13; val_offset:65106*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65106*FLEN/8, x14, x8, x12)

inst_21724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x13; val_offset:65109*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65109*FLEN/8, x14, x8, x12)

inst_21725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x13; val_offset:65112*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65112*FLEN/8, x14, x8, x12)

inst_21726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x13; val_offset:65115*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65115*FLEN/8, x14, x8, x12)

inst_21727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x13; val_offset:65118*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65118*FLEN/8, x14, x8, x12)

inst_21728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x13; val_offset:65121*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65121*FLEN/8, x14, x8, x12)

inst_21729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x13; val_offset:65124*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65124*FLEN/8, x14, x8, x12)

inst_21730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x13; val_offset:65127*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65127*FLEN/8, x14, x8, x12)

inst_21731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x13; val_offset:65130*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65130*FLEN/8, x14, x8, x12)

inst_21732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x13; val_offset:65133*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65133*FLEN/8, x14, x8, x12)

inst_21733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x13; val_offset:65136*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65136*FLEN/8, x14, x8, x12)

inst_21734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x13; val_offset:65139*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65139*FLEN/8, x14, x8, x12)

inst_21735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x13; val_offset:65142*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65142*FLEN/8, x14, x8, x12)

inst_21736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x500007f; valaddr_reg:x13; val_offset:65145*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65145*FLEN/8, x14, x8, x12)

inst_21737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x13; val_offset:65148*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65148*FLEN/8, x14, x8, x12)

inst_21738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x500003f; valaddr_reg:x13; val_offset:65151*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65151*FLEN/8, x14, x8, x12)

inst_21739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x13; val_offset:65154*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65154*FLEN/8, x14, x8, x12)

inst_21740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x500001f; valaddr_reg:x13; val_offset:65157*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65157*FLEN/8, x14, x8, x12)

inst_21741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x13; val_offset:65160*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65160*FLEN/8, x14, x8, x12)

inst_21742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x500000f; valaddr_reg:x13; val_offset:65163*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65163*FLEN/8, x14, x8, x12)

inst_21743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x13; val_offset:65166*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65166*FLEN/8, x14, x8, x12)

inst_21744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5000007; valaddr_reg:x13; val_offset:65169*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65169*FLEN/8, x14, x8, x12)

inst_21745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x13; val_offset:65172*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65172*FLEN/8, x14, x8, x12)

inst_21746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5000003; valaddr_reg:x13; val_offset:65175*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65175*FLEN/8, x14, x8, x12)

inst_21747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x13; val_offset:65178*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65178*FLEN/8, x14, x8, x12)

inst_21748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5000001; valaddr_reg:x13; val_offset:65181*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65181*FLEN/8, x14, x8, x12)

inst_21749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x13; val_offset:65184*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65184*FLEN/8, x14, x8, x12)

inst_21750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:65187*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65187*FLEN/8, x14, x8, x12)

inst_21751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:65190*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65190*FLEN/8, x14, x8, x12)

inst_21752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:65193*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65193*FLEN/8, x14, x8, x12)

inst_21753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:65196*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65196*FLEN/8, x14, x8, x12)

inst_21754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:65199*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65199*FLEN/8, x14, x8, x12)

inst_21755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:65202*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65202*FLEN/8, x14, x8, x12)

inst_21756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:65205*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65205*FLEN/8, x14, x8, x12)

inst_21757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:65208*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65208*FLEN/8, x14, x8, x12)

inst_21758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:65211*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65211*FLEN/8, x14, x8, x12)

inst_21759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:65214*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65214*FLEN/8, x14, x8, x12)

inst_21760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:65217*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65217*FLEN/8, x14, x8, x12)

inst_21761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:65220*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65220*FLEN/8, x14, x8, x12)

inst_21762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:65223*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65223*FLEN/8, x14, x8, x12)

inst_21763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:65226*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65226*FLEN/8, x14, x8, x12)

inst_21764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:65229*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65229*FLEN/8, x14, x8, x12)

inst_21765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x08d2ab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e08d2ab; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:65232*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65232*FLEN/8, x14, x8, x12)

inst_21766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffffff; valaddr_reg:x13; val_offset:65235*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65235*FLEN/8, x14, x8, x12)

inst_21767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800000; valaddr_reg:x13; val_offset:65238*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65238*FLEN/8, x14, x8, x12)

inst_21768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x13; val_offset:65241*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65241*FLEN/8, x14, x8, x12)

inst_21769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x13; val_offset:65244*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65244*FLEN/8, x14, x8, x12)

inst_21770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x13; val_offset:65247*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65247*FLEN/8, x14, x8, x12)

inst_21771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x13; val_offset:65250*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65250*FLEN/8, x14, x8, x12)

inst_21772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x13; val_offset:65253*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65253*FLEN/8, x14, x8, x12)

inst_21773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x13; val_offset:65256*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65256*FLEN/8, x14, x8, x12)

inst_21774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x13; val_offset:65259*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65259*FLEN/8, x14, x8, x12)

inst_21775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x13; val_offset:65262*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65262*FLEN/8, x14, x8, x12)

inst_21776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x13; val_offset:65265*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65265*FLEN/8, x14, x8, x12)

inst_21777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x13; val_offset:65268*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65268*FLEN/8, x14, x8, x12)

inst_21778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x13; val_offset:65271*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65271*FLEN/8, x14, x8, x12)

inst_21779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x13; val_offset:65274*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65274*FLEN/8, x14, x8, x12)

inst_21780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x13; val_offset:65277*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65277*FLEN/8, x14, x8, x12)

inst_21781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x13; val_offset:65280*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65280*FLEN/8, x14, x8, x12)

inst_21782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x13; val_offset:65283*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65283*FLEN/8, x14, x8, x12)

inst_21783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x13; val_offset:65286*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65286*FLEN/8, x14, x8, x12)

inst_21784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x13; val_offset:65289*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65289*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_170)
inst_21785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffc000; valaddr_reg:x13; val_offset:65292*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65292*FLEN/8, x14, x8, x12)

inst_21786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x13; val_offset:65295*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65295*FLEN/8, x14, x8, x12)

inst_21787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffe000; valaddr_reg:x13; val_offset:65298*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65298*FLEN/8, x14, x8, x12)

inst_21788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x13; val_offset:65301*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65301*FLEN/8, x14, x8, x12)

inst_21789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fff000; valaddr_reg:x13; val_offset:65304*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65304*FLEN/8, x14, x8, x12)

inst_21790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x13; val_offset:65307*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65307*FLEN/8, x14, x8, x12)

inst_21791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fff800; valaddr_reg:x13; val_offset:65310*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65310*FLEN/8, x14, x8, x12)

inst_21792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x13; val_offset:65313*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65313*FLEN/8, x14, x8, x12)

inst_21793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffc00; valaddr_reg:x13; val_offset:65316*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65316*FLEN/8, x14, x8, x12)

inst_21794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x13; val_offset:65319*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65319*FLEN/8, x14, x8, x12)

inst_21795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffe00; valaddr_reg:x13; val_offset:65322*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65322*FLEN/8, x14, x8, x12)

inst_21796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x13; val_offset:65325*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65325*FLEN/8, x14, x8, x12)

inst_21797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffff00; valaddr_reg:x13; val_offset:65328*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65328*FLEN/8, x14, x8, x12)

inst_21798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580007f; valaddr_reg:x13; val_offset:65331*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65331*FLEN/8, x14, x8, x12)

inst_21799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffff80; valaddr_reg:x13; val_offset:65334*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65334*FLEN/8, x14, x8, x12)

inst_21800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580003f; valaddr_reg:x13; val_offset:65337*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65337*FLEN/8, x14, x8, x12)

inst_21801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffffc0; valaddr_reg:x13; val_offset:65340*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65340*FLEN/8, x14, x8, x12)

inst_21802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580001f; valaddr_reg:x13; val_offset:65343*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65343*FLEN/8, x14, x8, x12)

inst_21803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffffe0; valaddr_reg:x13; val_offset:65346*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65346*FLEN/8, x14, x8, x12)

inst_21804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580000f; valaddr_reg:x13; val_offset:65349*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65349*FLEN/8, x14, x8, x12)

inst_21805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffff0; valaddr_reg:x13; val_offset:65352*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65352*FLEN/8, x14, x8, x12)

inst_21806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800007; valaddr_reg:x13; val_offset:65355*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65355*FLEN/8, x14, x8, x12)

inst_21807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffff8; valaddr_reg:x13; val_offset:65358*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65358*FLEN/8, x14, x8, x12)

inst_21808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800003; valaddr_reg:x13; val_offset:65361*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65361*FLEN/8, x14, x8, x12)

inst_21809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffffc; valaddr_reg:x13; val_offset:65364*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65364*FLEN/8, x14, x8, x12)

inst_21810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800001; valaddr_reg:x13; val_offset:65367*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65367*FLEN/8, x14, x8, x12)

inst_21811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffffe; valaddr_reg:x13; val_offset:65370*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65370*FLEN/8, x14, x8, x12)

inst_21812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:65373*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65373*FLEN/8, x14, x8, x12)

inst_21813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:65376*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65376*FLEN/8, x14, x8, x12)

inst_21814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:65379*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65379*FLEN/8, x14, x8, x12)

inst_21815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:65382*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65382*FLEN/8, x14, x8, x12)

inst_21816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:65385*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65385*FLEN/8, x14, x8, x12)

inst_21817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:65388*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65388*FLEN/8, x14, x8, x12)

inst_21818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:65391*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65391*FLEN/8, x14, x8, x12)

inst_21819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:65394*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65394*FLEN/8, x14, x8, x12)

inst_21820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:65397*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65397*FLEN/8, x14, x8, x12)

inst_21821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:65400*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65400*FLEN/8, x14, x8, x12)

inst_21822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:65403*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65403*FLEN/8, x14, x8, x12)

inst_21823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:65406*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65406*FLEN/8, x14, x8, x12)

inst_21824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:65409*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65409*FLEN/8, x14, x8, x12)

inst_21825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:65412*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65412*FLEN/8, x14, x8, x12)

inst_21826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:65415*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65415*FLEN/8, x14, x8, x12)

inst_21827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:65418*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65418*FLEN/8, x14, x8, x12)

inst_21828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x13; val_offset:65421*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65421*FLEN/8, x14, x8, x12)

inst_21829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000000; valaddr_reg:x13; val_offset:65424*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65424*FLEN/8, x14, x8, x12)

inst_21830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x63fffff; valaddr_reg:x13; val_offset:65427*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65427*FLEN/8, x14, x8, x12)

inst_21831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6400000; valaddr_reg:x13; val_offset:65430*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65430*FLEN/8, x14, x8, x12)

inst_21832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x61fffff; valaddr_reg:x13; val_offset:65433*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65433*FLEN/8, x14, x8, x12)

inst_21833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6600000; valaddr_reg:x13; val_offset:65436*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65436*FLEN/8, x14, x8, x12)

inst_21834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60fffff; valaddr_reg:x13; val_offset:65439*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65439*FLEN/8, x14, x8, x12)

inst_21835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6700000; valaddr_reg:x13; val_offset:65442*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65442*FLEN/8, x14, x8, x12)

inst_21836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x607ffff; valaddr_reg:x13; val_offset:65445*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65445*FLEN/8, x14, x8, x12)

inst_21837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6780000; valaddr_reg:x13; val_offset:65448*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65448*FLEN/8, x14, x8, x12)

inst_21838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x603ffff; valaddr_reg:x13; val_offset:65451*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65451*FLEN/8, x14, x8, x12)

inst_21839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x13; val_offset:65454*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65454*FLEN/8, x14, x8, x12)

inst_21840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x601ffff; valaddr_reg:x13; val_offset:65457*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65457*FLEN/8, x14, x8, x12)

inst_21841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x13; val_offset:65460*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65460*FLEN/8, x14, x8, x12)

inst_21842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600ffff; valaddr_reg:x13; val_offset:65463*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65463*FLEN/8, x14, x8, x12)

inst_21843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x13; val_offset:65466*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65466*FLEN/8, x14, x8, x12)

inst_21844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6007fff; valaddr_reg:x13; val_offset:65469*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65469*FLEN/8, x14, x8, x12)

inst_21845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x13; val_offset:65472*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65472*FLEN/8, x14, x8, x12)

inst_21846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6003fff; valaddr_reg:x13; val_offset:65475*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65475*FLEN/8, x14, x8, x12)

inst_21847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x13; val_offset:65478*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65478*FLEN/8, x14, x8, x12)

inst_21848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6001fff; valaddr_reg:x13; val_offset:65481*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65481*FLEN/8, x14, x8, x12)

inst_21849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x13; val_offset:65484*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65484*FLEN/8, x14, x8, x12)

inst_21850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000fff; valaddr_reg:x13; val_offset:65487*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65487*FLEN/8, x14, x8, x12)

inst_21851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x13; val_offset:65490*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65490*FLEN/8, x14, x8, x12)

inst_21852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60007ff; valaddr_reg:x13; val_offset:65493*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65493*FLEN/8, x14, x8, x12)

inst_21853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x13; val_offset:65496*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65496*FLEN/8, x14, x8, x12)

inst_21854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60003ff; valaddr_reg:x13; val_offset:65499*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65499*FLEN/8, x14, x8, x12)

inst_21855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x13; val_offset:65502*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65502*FLEN/8, x14, x8, x12)

inst_21856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60001ff; valaddr_reg:x13; val_offset:65505*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65505*FLEN/8, x14, x8, x12)

inst_21857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x13; val_offset:65508*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65508*FLEN/8, x14, x8, x12)

inst_21858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60000ff; valaddr_reg:x13; val_offset:65511*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65511*FLEN/8, x14, x8, x12)

inst_21859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x13; val_offset:65514*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65514*FLEN/8, x14, x8, x12)

inst_21860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600007f; valaddr_reg:x13; val_offset:65517*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65517*FLEN/8, x14, x8, x12)

inst_21861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x13; val_offset:65520*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65520*FLEN/8, x14, x8, x12)

inst_21862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600003f; valaddr_reg:x13; val_offset:65523*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65523*FLEN/8, x14, x8, x12)

inst_21863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x13; val_offset:65526*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65526*FLEN/8, x14, x8, x12)

inst_21864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600001f; valaddr_reg:x13; val_offset:65529*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65529*FLEN/8, x14, x8, x12)

inst_21865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x13; val_offset:65532*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65532*FLEN/8, x14, x8, x12)

inst_21866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600000f; valaddr_reg:x13; val_offset:65535*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65535*FLEN/8, x14, x8, x12)

inst_21867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x13; val_offset:65538*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65538*FLEN/8, x14, x8, x12)

inst_21868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000007; valaddr_reg:x13; val_offset:65541*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65541*FLEN/8, x14, x8, x12)

inst_21869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x13; val_offset:65544*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65544*FLEN/8, x14, x8, x12)

inst_21870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000003; valaddr_reg:x13; val_offset:65547*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65547*FLEN/8, x14, x8, x12)

inst_21871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x13; val_offset:65550*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65550*FLEN/8, x14, x8, x12)

inst_21872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000001; valaddr_reg:x13; val_offset:65553*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65553*FLEN/8, x14, x8, x12)

inst_21873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x13; val_offset:65556*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65556*FLEN/8, x14, x8, x12)

inst_21874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:65559*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65559*FLEN/8, x14, x8, x12)

inst_21875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:65562*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65562*FLEN/8, x14, x8, x12)

inst_21876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:65565*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65565*FLEN/8, x14, x8, x12)

inst_21877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:65568*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65568*FLEN/8, x14, x8, x12)

inst_21878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:65571*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65571*FLEN/8, x14, x8, x12)

inst_21879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:65574*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65574*FLEN/8, x14, x8, x12)

inst_21880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:65577*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65577*FLEN/8, x14, x8, x12)

inst_21881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:65580*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65580*FLEN/8, x14, x8, x12)

inst_21882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:65583*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65583*FLEN/8, x14, x8, x12)

inst_21883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:65586*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65586*FLEN/8, x14, x8, x12)

inst_21884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:65589*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65589*FLEN/8, x14, x8, x12)

inst_21885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:65592*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65592*FLEN/8, x14, x8, x12)

inst_21886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:65595*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65595*FLEN/8, x14, x8, x12)

inst_21887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:65598*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65598*FLEN/8, x14, x8, x12)

inst_21888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:65601*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65601*FLEN/8, x14, x8, x12)

inst_21889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df2879a; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:65604*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65604*FLEN/8, x14, x8, x12)

inst_21890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffffff; valaddr_reg:x13; val_offset:65607*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65607*FLEN/8, x14, x8, x12)

inst_21891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800000; valaddr_reg:x13; val_offset:65610*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65610*FLEN/8, x14, x8, x12)

inst_21892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6bfffff; valaddr_reg:x13; val_offset:65613*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65613*FLEN/8, x14, x8, x12)

inst_21893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6c00000; valaddr_reg:x13; val_offset:65616*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65616*FLEN/8, x14, x8, x12)

inst_21894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x69fffff; valaddr_reg:x13; val_offset:65619*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65619*FLEN/8, x14, x8, x12)

inst_21895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6e00000; valaddr_reg:x13; val_offset:65622*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65622*FLEN/8, x14, x8, x12)

inst_21896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68fffff; valaddr_reg:x13; val_offset:65625*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65625*FLEN/8, x14, x8, x12)

inst_21897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6f00000; valaddr_reg:x13; val_offset:65628*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65628*FLEN/8, x14, x8, x12)

inst_21898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x687ffff; valaddr_reg:x13; val_offset:65631*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65631*FLEN/8, x14, x8, x12)

inst_21899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6f80000; valaddr_reg:x13; val_offset:65634*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65634*FLEN/8, x14, x8, x12)

inst_21900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x683ffff; valaddr_reg:x13; val_offset:65637*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65637*FLEN/8, x14, x8, x12)

inst_21901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fc0000; valaddr_reg:x13; val_offset:65640*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65640*FLEN/8, x14, x8, x12)

inst_21902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x681ffff; valaddr_reg:x13; val_offset:65643*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65643*FLEN/8, x14, x8, x12)

inst_21903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fe0000; valaddr_reg:x13; val_offset:65646*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65646*FLEN/8, x14, x8, x12)

inst_21904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680ffff; valaddr_reg:x13; val_offset:65649*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65649*FLEN/8, x14, x8, x12)

inst_21905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ff0000; valaddr_reg:x13; val_offset:65652*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65652*FLEN/8, x14, x8, x12)

inst_21906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6807fff; valaddr_reg:x13; val_offset:65655*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65655*FLEN/8, x14, x8, x12)

inst_21907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ff8000; valaddr_reg:x13; val_offset:65658*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65658*FLEN/8, x14, x8, x12)

inst_21908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6803fff; valaddr_reg:x13; val_offset:65661*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65661*FLEN/8, x14, x8, x12)

inst_21909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffc000; valaddr_reg:x13; val_offset:65664*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65664*FLEN/8, x14, x8, x12)

inst_21910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6801fff; valaddr_reg:x13; val_offset:65667*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65667*FLEN/8, x14, x8, x12)

inst_21911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffe000; valaddr_reg:x13; val_offset:65670*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65670*FLEN/8, x14, x8, x12)

inst_21912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800fff; valaddr_reg:x13; val_offset:65673*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65673*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_171)
inst_21913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fff000; valaddr_reg:x13; val_offset:65676*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65676*FLEN/8, x14, x8, x12)

inst_21914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68007ff; valaddr_reg:x13; val_offset:65679*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65679*FLEN/8, x14, x8, x12)

inst_21915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fff800; valaddr_reg:x13; val_offset:65682*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65682*FLEN/8, x14, x8, x12)

inst_21916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68003ff; valaddr_reg:x13; val_offset:65685*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65685*FLEN/8, x14, x8, x12)

inst_21917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffc00; valaddr_reg:x13; val_offset:65688*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65688*FLEN/8, x14, x8, x12)

inst_21918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68001ff; valaddr_reg:x13; val_offset:65691*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65691*FLEN/8, x14, x8, x12)

inst_21919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffe00; valaddr_reg:x13; val_offset:65694*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65694*FLEN/8, x14, x8, x12)

inst_21920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68000ff; valaddr_reg:x13; val_offset:65697*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65697*FLEN/8, x14, x8, x12)

inst_21921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffff00; valaddr_reg:x13; val_offset:65700*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65700*FLEN/8, x14, x8, x12)

inst_21922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680007f; valaddr_reg:x13; val_offset:65703*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65703*FLEN/8, x14, x8, x12)

inst_21923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffff80; valaddr_reg:x13; val_offset:65706*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65706*FLEN/8, x14, x8, x12)

inst_21924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680003f; valaddr_reg:x13; val_offset:65709*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65709*FLEN/8, x14, x8, x12)

inst_21925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffffc0; valaddr_reg:x13; val_offset:65712*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65712*FLEN/8, x14, x8, x12)

inst_21926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680001f; valaddr_reg:x13; val_offset:65715*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65715*FLEN/8, x14, x8, x12)

inst_21927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffffe0; valaddr_reg:x13; val_offset:65718*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65718*FLEN/8, x14, x8, x12)

inst_21928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680000f; valaddr_reg:x13; val_offset:65721*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65721*FLEN/8, x14, x8, x12)

inst_21929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffff0; valaddr_reg:x13; val_offset:65724*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65724*FLEN/8, x14, x8, x12)

inst_21930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800007; valaddr_reg:x13; val_offset:65727*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65727*FLEN/8, x14, x8, x12)

inst_21931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffff8; valaddr_reg:x13; val_offset:65730*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65730*FLEN/8, x14, x8, x12)

inst_21932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800003; valaddr_reg:x13; val_offset:65733*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65733*FLEN/8, x14, x8, x12)

inst_21933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffffc; valaddr_reg:x13; val_offset:65736*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65736*FLEN/8, x14, x8, x12)

inst_21934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800001; valaddr_reg:x13; val_offset:65739*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65739*FLEN/8, x14, x8, x12)

inst_21935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffffe; valaddr_reg:x13; val_offset:65742*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65742*FLEN/8, x14, x8, x12)

inst_21936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:65745*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65745*FLEN/8, x14, x8, x12)

inst_21937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:65748*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65748*FLEN/8, x14, x8, x12)

inst_21938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:65751*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65751*FLEN/8, x14, x8, x12)

inst_21939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:65754*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65754*FLEN/8, x14, x8, x12)

inst_21940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:65757*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65757*FLEN/8, x14, x8, x12)

inst_21941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:65760*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65760*FLEN/8, x14, x8, x12)

inst_21942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:65763*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65763*FLEN/8, x14, x8, x12)

inst_21943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:65766*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65766*FLEN/8, x14, x8, x12)

inst_21944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:65769*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65769*FLEN/8, x14, x8, x12)

inst_21945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:65772*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65772*FLEN/8, x14, x8, x12)

inst_21946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:65775*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65775*FLEN/8, x14, x8, x12)

inst_21947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:65778*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65778*FLEN/8, x14, x8, x12)

inst_21948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:65781*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65781*FLEN/8, x14, x8, x12)

inst_21949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:65784*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65784*FLEN/8, x14, x8, x12)

inst_21950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:65787*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65787*FLEN/8, x14, x8, x12)

inst_21951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:65790*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65790*FLEN/8, x14, x8, x12)

inst_21952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x13; val_offset:65793*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65793*FLEN/8, x14, x8, x12)

inst_21953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7000000; valaddr_reg:x13; val_offset:65796*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65796*FLEN/8, x14, x8, x12)

inst_21954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x73fffff; valaddr_reg:x13; val_offset:65799*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65799*FLEN/8, x14, x8, x12)

inst_21955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7400000; valaddr_reg:x13; val_offset:65802*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65802*FLEN/8, x14, x8, x12)

inst_21956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x71fffff; valaddr_reg:x13; val_offset:65805*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65805*FLEN/8, x14, x8, x12)

inst_21957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7600000; valaddr_reg:x13; val_offset:65808*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65808*FLEN/8, x14, x8, x12)

inst_21958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x70fffff; valaddr_reg:x13; val_offset:65811*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65811*FLEN/8, x14, x8, x12)

inst_21959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7700000; valaddr_reg:x13; val_offset:65814*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65814*FLEN/8, x14, x8, x12)

inst_21960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x707ffff; valaddr_reg:x13; val_offset:65817*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65817*FLEN/8, x14, x8, x12)

inst_21961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7780000; valaddr_reg:x13; val_offset:65820*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65820*FLEN/8, x14, x8, x12)

inst_21962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x703ffff; valaddr_reg:x13; val_offset:65823*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65823*FLEN/8, x14, x8, x12)

inst_21963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77c0000; valaddr_reg:x13; val_offset:65826*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65826*FLEN/8, x14, x8, x12)

inst_21964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x701ffff; valaddr_reg:x13; val_offset:65829*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65829*FLEN/8, x14, x8, x12)

inst_21965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77e0000; valaddr_reg:x13; val_offset:65832*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65832*FLEN/8, x14, x8, x12)

inst_21966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x700ffff; valaddr_reg:x13; val_offset:65835*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65835*FLEN/8, x14, x8, x12)

inst_21967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77f0000; valaddr_reg:x13; val_offset:65838*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65838*FLEN/8, x14, x8, x12)

inst_21968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x13; val_offset:65841*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65841*FLEN/8, x14, x8, x12)

inst_21969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77f8000; valaddr_reg:x13; val_offset:65844*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65844*FLEN/8, x14, x8, x12)

inst_21970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x13; val_offset:65847*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65847*FLEN/8, x14, x8, x12)

inst_21971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fc000; valaddr_reg:x13; val_offset:65850*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65850*FLEN/8, x14, x8, x12)

inst_21972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x13; val_offset:65853*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65853*FLEN/8, x14, x8, x12)

inst_21973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fe000; valaddr_reg:x13; val_offset:65856*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65856*FLEN/8, x14, x8, x12)

inst_21974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x13; val_offset:65859*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65859*FLEN/8, x14, x8, x12)

inst_21975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ff000; valaddr_reg:x13; val_offset:65862*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65862*FLEN/8, x14, x8, x12)

inst_21976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x13; val_offset:65865*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65865*FLEN/8, x14, x8, x12)

inst_21977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ff800; valaddr_reg:x13; val_offset:65868*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65868*FLEN/8, x14, x8, x12)

inst_21978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x13; val_offset:65871*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65871*FLEN/8, x14, x8, x12)

inst_21979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ffc00; valaddr_reg:x13; val_offset:65874*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65874*FLEN/8, x14, x8, x12)

inst_21980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x13; val_offset:65877*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65877*FLEN/8, x14, x8, x12)

inst_21981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ffe00; valaddr_reg:x13; val_offset:65880*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65880*FLEN/8, x14, x8, x12)

inst_21982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x13; val_offset:65883*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65883*FLEN/8, x14, x8, x12)

inst_21983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fff00; valaddr_reg:x13; val_offset:65886*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65886*FLEN/8, x14, x8, x12)

inst_21984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x700007f; valaddr_reg:x13; val_offset:65889*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65889*FLEN/8, x14, x8, x12)

inst_21985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fff80; valaddr_reg:x13; val_offset:65892*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65892*FLEN/8, x14, x8, x12)

inst_21986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x700003f; valaddr_reg:x13; val_offset:65895*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65895*FLEN/8, x14, x8, x12)

inst_21987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fffc0; valaddr_reg:x13; val_offset:65898*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65898*FLEN/8, x14, x8, x12)

inst_21988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x700001f; valaddr_reg:x13; val_offset:65901*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65901*FLEN/8, x14, x8, x12)

inst_21989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77fffe0; valaddr_reg:x13; val_offset:65904*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65904*FLEN/8, x14, x8, x12)

inst_21990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x700000f; valaddr_reg:x13; val_offset:65907*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65907*FLEN/8, x14, x8, x12)

inst_21991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ffff0; valaddr_reg:x13; val_offset:65910*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65910*FLEN/8, x14, x8, x12)

inst_21992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7000007; valaddr_reg:x13; val_offset:65913*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65913*FLEN/8, x14, x8, x12)

inst_21993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ffff8; valaddr_reg:x13; val_offset:65916*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65916*FLEN/8, x14, x8, x12)

inst_21994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7000003; valaddr_reg:x13; val_offset:65919*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65919*FLEN/8, x14, x8, x12)

inst_21995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ffffc; valaddr_reg:x13; val_offset:65922*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65922*FLEN/8, x14, x8, x12)

inst_21996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7000001; valaddr_reg:x13; val_offset:65925*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65925*FLEN/8, x14, x8, x12)

inst_21997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x77ffffe; valaddr_reg:x13; val_offset:65928*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65928*FLEN/8, x14, x8, x12)

inst_21998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:65931*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65931*FLEN/8, x14, x8, x12)

inst_21999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:65934*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65934*FLEN/8, x14, x8, x12)

inst_22000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:65937*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65937*FLEN/8, x14, x8, x12)

inst_22001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:65940*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65940*FLEN/8, x14, x8, x12)

inst_22002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:65943*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65943*FLEN/8, x14, x8, x12)

inst_22003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:65946*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65946*FLEN/8, x14, x8, x12)

inst_22004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:65949*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65949*FLEN/8, x14, x8, x12)

inst_22005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:65952*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65952*FLEN/8, x14, x8, x12)

inst_22006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:65955*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65955*FLEN/8, x14, x8, x12)

inst_22007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:65958*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65958*FLEN/8, x14, x8, x12)

inst_22008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:65961*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65961*FLEN/8, x14, x8, x12)

inst_22009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:65964*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65964*FLEN/8, x14, x8, x12)

inst_22010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:65967*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65967*FLEN/8, x14, x8, x12)

inst_22011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:65970*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65970*FLEN/8, x14, x8, x12)

inst_22012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:65973*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65973*FLEN/8, x14, x8, x12)

inst_22013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0036a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0036a8; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:65976*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65976*FLEN/8, x14, x8, x12)

inst_22014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffff; valaddr_reg:x13; val_offset:65979*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65979*FLEN/8, x14, x8, x12)

inst_22015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800000; valaddr_reg:x13; val_offset:65982*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65982*FLEN/8, x14, x8, x12)

inst_22016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7bfffff; valaddr_reg:x13; val_offset:65985*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65985*FLEN/8, x14, x8, x12)

inst_22017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7c00000; valaddr_reg:x13; val_offset:65988*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65988*FLEN/8, x14, x8, x12)

inst_22018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x79fffff; valaddr_reg:x13; val_offset:65991*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65991*FLEN/8, x14, x8, x12)

inst_22019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7e00000; valaddr_reg:x13; val_offset:65994*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65994*FLEN/8, x14, x8, x12)

inst_22020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78fffff; valaddr_reg:x13; val_offset:65997*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 65997*FLEN/8, x14, x8, x12)

inst_22021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7f00000; valaddr_reg:x13; val_offset:66000*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66000*FLEN/8, x14, x8, x12)

inst_22022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x787ffff; valaddr_reg:x13; val_offset:66003*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66003*FLEN/8, x14, x8, x12)

inst_22023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7f80000; valaddr_reg:x13; val_offset:66006*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66006*FLEN/8, x14, x8, x12)

inst_22024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x783ffff; valaddr_reg:x13; val_offset:66009*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66009*FLEN/8, x14, x8, x12)

inst_22025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fc0000; valaddr_reg:x13; val_offset:66012*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66012*FLEN/8, x14, x8, x12)

inst_22026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x781ffff; valaddr_reg:x13; val_offset:66015*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66015*FLEN/8, x14, x8, x12)

inst_22027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fe0000; valaddr_reg:x13; val_offset:66018*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66018*FLEN/8, x14, x8, x12)

inst_22028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780ffff; valaddr_reg:x13; val_offset:66021*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66021*FLEN/8, x14, x8, x12)

inst_22029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ff0000; valaddr_reg:x13; val_offset:66024*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66024*FLEN/8, x14, x8, x12)

inst_22030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7807fff; valaddr_reg:x13; val_offset:66027*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66027*FLEN/8, x14, x8, x12)

inst_22031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ff8000; valaddr_reg:x13; val_offset:66030*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66030*FLEN/8, x14, x8, x12)

inst_22032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7803fff; valaddr_reg:x13; val_offset:66033*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66033*FLEN/8, x14, x8, x12)

inst_22033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffc000; valaddr_reg:x13; val_offset:66036*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66036*FLEN/8, x14, x8, x12)

inst_22034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7801fff; valaddr_reg:x13; val_offset:66039*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66039*FLEN/8, x14, x8, x12)

inst_22035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffe000; valaddr_reg:x13; val_offset:66042*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66042*FLEN/8, x14, x8, x12)

inst_22036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800fff; valaddr_reg:x13; val_offset:66045*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66045*FLEN/8, x14, x8, x12)

inst_22037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fff000; valaddr_reg:x13; val_offset:66048*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66048*FLEN/8, x14, x8, x12)

inst_22038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78007ff; valaddr_reg:x13; val_offset:66051*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66051*FLEN/8, x14, x8, x12)

inst_22039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fff800; valaddr_reg:x13; val_offset:66054*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66054*FLEN/8, x14, x8, x12)

inst_22040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78003ff; valaddr_reg:x13; val_offset:66057*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66057*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_172)
inst_22041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffc00; valaddr_reg:x13; val_offset:66060*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66060*FLEN/8, x14, x8, x12)

inst_22042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78001ff; valaddr_reg:x13; val_offset:66063*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66063*FLEN/8, x14, x8, x12)

inst_22043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffe00; valaddr_reg:x13; val_offset:66066*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66066*FLEN/8, x14, x8, x12)

inst_22044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78000ff; valaddr_reg:x13; val_offset:66069*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66069*FLEN/8, x14, x8, x12)

inst_22045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffff00; valaddr_reg:x13; val_offset:66072*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66072*FLEN/8, x14, x8, x12)

inst_22046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780007f; valaddr_reg:x13; val_offset:66075*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66075*FLEN/8, x14, x8, x12)

inst_22047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffff80; valaddr_reg:x13; val_offset:66078*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66078*FLEN/8, x14, x8, x12)

inst_22048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780003f; valaddr_reg:x13; val_offset:66081*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66081*FLEN/8, x14, x8, x12)

inst_22049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffc0; valaddr_reg:x13; val_offset:66084*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66084*FLEN/8, x14, x8, x12)

inst_22050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780001f; valaddr_reg:x13; val_offset:66087*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66087*FLEN/8, x14, x8, x12)

inst_22051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffe0; valaddr_reg:x13; val_offset:66090*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66090*FLEN/8, x14, x8, x12)

inst_22052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780000f; valaddr_reg:x13; val_offset:66093*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66093*FLEN/8, x14, x8, x12)

inst_22053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffff0; valaddr_reg:x13; val_offset:66096*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66096*FLEN/8, x14, x8, x12)

inst_22054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800007; valaddr_reg:x13; val_offset:66099*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66099*FLEN/8, x14, x8, x12)

inst_22055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffff8; valaddr_reg:x13; val_offset:66102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66102*FLEN/8, x14, x8, x12)

inst_22056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800003; valaddr_reg:x13; val_offset:66105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66105*FLEN/8, x14, x8, x12)

inst_22057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffffc; valaddr_reg:x13; val_offset:66108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66108*FLEN/8, x14, x8, x12)

inst_22058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800001; valaddr_reg:x13; val_offset:66111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66111*FLEN/8, x14, x8, x12)

inst_22059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffffe; valaddr_reg:x13; val_offset:66114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66114*FLEN/8, x14, x8, x12)

inst_22060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:66117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66117*FLEN/8, x14, x8, x12)

inst_22061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:66120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66120*FLEN/8, x14, x8, x12)

inst_22062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:66123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66123*FLEN/8, x14, x8, x12)

inst_22063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:66126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66126*FLEN/8, x14, x8, x12)

inst_22064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:66129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66129*FLEN/8, x14, x8, x12)

inst_22065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:66132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66132*FLEN/8, x14, x8, x12)

inst_22066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:66135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66135*FLEN/8, x14, x8, x12)

inst_22067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:66138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66138*FLEN/8, x14, x8, x12)

inst_22068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:66141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66141*FLEN/8, x14, x8, x12)

inst_22069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:66144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66144*FLEN/8, x14, x8, x12)

inst_22070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:66147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66147*FLEN/8, x14, x8, x12)

inst_22071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:66150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66150*FLEN/8, x14, x8, x12)

inst_22072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:66153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66153*FLEN/8, x14, x8, x12)

inst_22073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:66156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66156*FLEN/8, x14, x8, x12)

inst_22074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:66159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66159*FLEN/8, x14, x8, x12)

inst_22075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:66162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66162*FLEN/8, x14, x8, x12)

inst_22076:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fffff; valaddr_reg:x13; val_offset:66165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66165*FLEN/8, x14, x8, x12)

inst_22077:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8000000; valaddr_reg:x13; val_offset:66168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66168*FLEN/8, x14, x8, x12)

inst_22078:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x83fffff; valaddr_reg:x13; val_offset:66171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66171*FLEN/8, x14, x8, x12)

inst_22079:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8400000; valaddr_reg:x13; val_offset:66174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66174*FLEN/8, x14, x8, x12)

inst_22080:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x81fffff; valaddr_reg:x13; val_offset:66177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66177*FLEN/8, x14, x8, x12)

inst_22081:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8600000; valaddr_reg:x13; val_offset:66180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66180*FLEN/8, x14, x8, x12)

inst_22082:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x80fffff; valaddr_reg:x13; val_offset:66183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66183*FLEN/8, x14, x8, x12)

inst_22083:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8700000; valaddr_reg:x13; val_offset:66186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66186*FLEN/8, x14, x8, x12)

inst_22084:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x807ffff; valaddr_reg:x13; val_offset:66189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66189*FLEN/8, x14, x8, x12)

inst_22085:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8780000; valaddr_reg:x13; val_offset:66192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66192*FLEN/8, x14, x8, x12)

inst_22086:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x803ffff; valaddr_reg:x13; val_offset:66195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66195*FLEN/8, x14, x8, x12)

inst_22087:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87c0000; valaddr_reg:x13; val_offset:66198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66198*FLEN/8, x14, x8, x12)

inst_22088:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x801ffff; valaddr_reg:x13; val_offset:66201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66201*FLEN/8, x14, x8, x12)

inst_22089:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87e0000; valaddr_reg:x13; val_offset:66204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66204*FLEN/8, x14, x8, x12)

inst_22090:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x800ffff; valaddr_reg:x13; val_offset:66207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66207*FLEN/8, x14, x8, x12)

inst_22091:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87f0000; valaddr_reg:x13; val_offset:66210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66210*FLEN/8, x14, x8, x12)

inst_22092:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8007fff; valaddr_reg:x13; val_offset:66213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66213*FLEN/8, x14, x8, x12)

inst_22093:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87f8000; valaddr_reg:x13; val_offset:66216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66216*FLEN/8, x14, x8, x12)

inst_22094:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8003fff; valaddr_reg:x13; val_offset:66219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66219*FLEN/8, x14, x8, x12)

inst_22095:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fc000; valaddr_reg:x13; val_offset:66222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66222*FLEN/8, x14, x8, x12)

inst_22096:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8001fff; valaddr_reg:x13; val_offset:66225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66225*FLEN/8, x14, x8, x12)

inst_22097:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fe000; valaddr_reg:x13; val_offset:66228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66228*FLEN/8, x14, x8, x12)

inst_22098:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8000fff; valaddr_reg:x13; val_offset:66231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66231*FLEN/8, x14, x8, x12)

inst_22099:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ff000; valaddr_reg:x13; val_offset:66234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66234*FLEN/8, x14, x8, x12)

inst_22100:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x80007ff; valaddr_reg:x13; val_offset:66237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66237*FLEN/8, x14, x8, x12)

inst_22101:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ff800; valaddr_reg:x13; val_offset:66240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66240*FLEN/8, x14, x8, x12)

inst_22102:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x80003ff; valaddr_reg:x13; val_offset:66243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66243*FLEN/8, x14, x8, x12)

inst_22103:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ffc00; valaddr_reg:x13; val_offset:66246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66246*FLEN/8, x14, x8, x12)

inst_22104:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x80001ff; valaddr_reg:x13; val_offset:66249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66249*FLEN/8, x14, x8, x12)

inst_22105:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ffe00; valaddr_reg:x13; val_offset:66252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66252*FLEN/8, x14, x8, x12)

inst_22106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x80000ff; valaddr_reg:x13; val_offset:66255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66255*FLEN/8, x14, x8, x12)

inst_22107:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fff00; valaddr_reg:x13; val_offset:66258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66258*FLEN/8, x14, x8, x12)

inst_22108:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x800007f; valaddr_reg:x13; val_offset:66261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66261*FLEN/8, x14, x8, x12)

inst_22109:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fff80; valaddr_reg:x13; val_offset:66264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66264*FLEN/8, x14, x8, x12)

inst_22110:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x800003f; valaddr_reg:x13; val_offset:66267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66267*FLEN/8, x14, x8, x12)

inst_22111:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fffc0; valaddr_reg:x13; val_offset:66270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66270*FLEN/8, x14, x8, x12)

inst_22112:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x800001f; valaddr_reg:x13; val_offset:66273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66273*FLEN/8, x14, x8, x12)

inst_22113:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87fffe0; valaddr_reg:x13; val_offset:66276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66276*FLEN/8, x14, x8, x12)

inst_22114:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x800000f; valaddr_reg:x13; val_offset:66279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66279*FLEN/8, x14, x8, x12)

inst_22115:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ffff0; valaddr_reg:x13; val_offset:66282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66282*FLEN/8, x14, x8, x12)

inst_22116:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8000007; valaddr_reg:x13; val_offset:66285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66285*FLEN/8, x14, x8, x12)

inst_22117:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ffff8; valaddr_reg:x13; val_offset:66288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66288*FLEN/8, x14, x8, x12)

inst_22118:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8000003; valaddr_reg:x13; val_offset:66291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66291*FLEN/8, x14, x8, x12)

inst_22119:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ffffc; valaddr_reg:x13; val_offset:66294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66294*FLEN/8, x14, x8, x12)

inst_22120:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x8000001; valaddr_reg:x13; val_offset:66297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66297*FLEN/8, x14, x8, x12)

inst_22121:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x87ffffe; valaddr_reg:x13; val_offset:66300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66300*FLEN/8, x14, x8, x12)

inst_22122:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:66303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66303*FLEN/8, x14, x8, x12)

inst_22123:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:66306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66306*FLEN/8, x14, x8, x12)

inst_22124:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:66309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66309*FLEN/8, x14, x8, x12)

inst_22125:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:66312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66312*FLEN/8, x14, x8, x12)

inst_22126:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:66315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66315*FLEN/8, x14, x8, x12)

inst_22127:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:66318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66318*FLEN/8, x14, x8, x12)

inst_22128:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:66321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66321*FLEN/8, x14, x8, x12)

inst_22129:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:66324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66324*FLEN/8, x14, x8, x12)

inst_22130:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:66327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66327*FLEN/8, x14, x8, x12)

inst_22131:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:66330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66330*FLEN/8, x14, x8, x12)

inst_22132:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:66333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66333*FLEN/8, x14, x8, x12)

inst_22133:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:66336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66336*FLEN/8, x14, x8, x12)

inst_22134:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:66339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66339*FLEN/8, x14, x8, x12)

inst_22135:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:66342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66342*FLEN/8, x14, x8, x12)

inst_22136:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:66345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66345*FLEN/8, x14, x8, x12)

inst_22137:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x45e161 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d45e161; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:66348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66348*FLEN/8, x14, x8, x12)

inst_22138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffffff; valaddr_reg:x13; val_offset:66351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66351*FLEN/8, x14, x8, x12)

inst_22139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8800000; valaddr_reg:x13; val_offset:66354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66354*FLEN/8, x14, x8, x12)

inst_22140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8bfffff; valaddr_reg:x13; val_offset:66357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66357*FLEN/8, x14, x8, x12)

inst_22141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8c00000; valaddr_reg:x13; val_offset:66360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66360*FLEN/8, x14, x8, x12)

inst_22142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x89fffff; valaddr_reg:x13; val_offset:66363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66363*FLEN/8, x14, x8, x12)

inst_22143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8e00000; valaddr_reg:x13; val_offset:66366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66366*FLEN/8, x14, x8, x12)

inst_22144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x88fffff; valaddr_reg:x13; val_offset:66369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66369*FLEN/8, x14, x8, x12)

inst_22145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8f00000; valaddr_reg:x13; val_offset:66372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66372*FLEN/8, x14, x8, x12)

inst_22146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x887ffff; valaddr_reg:x13; val_offset:66375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66375*FLEN/8, x14, x8, x12)

inst_22147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8f80000; valaddr_reg:x13; val_offset:66378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66378*FLEN/8, x14, x8, x12)

inst_22148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x883ffff; valaddr_reg:x13; val_offset:66381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66381*FLEN/8, x14, x8, x12)

inst_22149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fc0000; valaddr_reg:x13; val_offset:66384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66384*FLEN/8, x14, x8, x12)

inst_22150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x881ffff; valaddr_reg:x13; val_offset:66387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66387*FLEN/8, x14, x8, x12)

inst_22151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fe0000; valaddr_reg:x13; val_offset:66390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66390*FLEN/8, x14, x8, x12)

inst_22152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x880ffff; valaddr_reg:x13; val_offset:66393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66393*FLEN/8, x14, x8, x12)

inst_22153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ff0000; valaddr_reg:x13; val_offset:66396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66396*FLEN/8, x14, x8, x12)

inst_22154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8807fff; valaddr_reg:x13; val_offset:66399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66399*FLEN/8, x14, x8, x12)

inst_22155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ff8000; valaddr_reg:x13; val_offset:66402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66402*FLEN/8, x14, x8, x12)

inst_22156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8803fff; valaddr_reg:x13; val_offset:66405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66405*FLEN/8, x14, x8, x12)

inst_22157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffc000; valaddr_reg:x13; val_offset:66408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66408*FLEN/8, x14, x8, x12)

inst_22158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8801fff; valaddr_reg:x13; val_offset:66411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66411*FLEN/8, x14, x8, x12)

inst_22159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffe000; valaddr_reg:x13; val_offset:66414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66414*FLEN/8, x14, x8, x12)

inst_22160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8800fff; valaddr_reg:x13; val_offset:66417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66417*FLEN/8, x14, x8, x12)

inst_22161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fff000; valaddr_reg:x13; val_offset:66420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66420*FLEN/8, x14, x8, x12)

inst_22162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x88007ff; valaddr_reg:x13; val_offset:66423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66423*FLEN/8, x14, x8, x12)

inst_22163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fff800; valaddr_reg:x13; val_offset:66426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66426*FLEN/8, x14, x8, x12)

inst_22164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x88003ff; valaddr_reg:x13; val_offset:66429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66429*FLEN/8, x14, x8, x12)

inst_22165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fffc00; valaddr_reg:x13; val_offset:66432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66432*FLEN/8, x14, x8, x12)

inst_22166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x88001ff; valaddr_reg:x13; val_offset:66435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66435*FLEN/8, x14, x8, x12)

inst_22167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fffe00; valaddr_reg:x13; val_offset:66438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66438*FLEN/8, x14, x8, x12)

inst_22168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x88000ff; valaddr_reg:x13; val_offset:66441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66441*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_173)
inst_22169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffff00; valaddr_reg:x13; val_offset:66444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66444*FLEN/8, x14, x8, x12)

inst_22170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x880007f; valaddr_reg:x13; val_offset:66447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66447*FLEN/8, x14, x8, x12)

inst_22171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffff80; valaddr_reg:x13; val_offset:66450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66450*FLEN/8, x14, x8, x12)

inst_22172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x880003f; valaddr_reg:x13; val_offset:66453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66453*FLEN/8, x14, x8, x12)

inst_22173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffffc0; valaddr_reg:x13; val_offset:66456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66456*FLEN/8, x14, x8, x12)

inst_22174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x880001f; valaddr_reg:x13; val_offset:66459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66459*FLEN/8, x14, x8, x12)

inst_22175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8ffffe0; valaddr_reg:x13; val_offset:66462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66462*FLEN/8, x14, x8, x12)

inst_22176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x880000f; valaddr_reg:x13; val_offset:66465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66465*FLEN/8, x14, x8, x12)

inst_22177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fffff0; valaddr_reg:x13; val_offset:66468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66468*FLEN/8, x14, x8, x12)

inst_22178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8800007; valaddr_reg:x13; val_offset:66471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66471*FLEN/8, x14, x8, x12)

inst_22179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fffff8; valaddr_reg:x13; val_offset:66474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66474*FLEN/8, x14, x8, x12)

inst_22180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8800003; valaddr_reg:x13; val_offset:66477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66477*FLEN/8, x14, x8, x12)

inst_22181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fffffc; valaddr_reg:x13; val_offset:66480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66480*FLEN/8, x14, x8, x12)

inst_22182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8800001; valaddr_reg:x13; val_offset:66483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66483*FLEN/8, x14, x8, x12)

inst_22183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x8fffffe; valaddr_reg:x13; val_offset:66486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66486*FLEN/8, x14, x8, x12)

inst_22184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x13; val_offset:66489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66489*FLEN/8, x14, x8, x12)

inst_22185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x7; valaddr_reg:x13; val_offset:66492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66492*FLEN/8, x14, x8, x12)

inst_22186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x13; val_offset:66495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66495*FLEN/8, x14, x8, x12)

inst_22187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:66498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66498*FLEN/8, x14, x8, x12)

inst_22188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x13; val_offset:66501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66501*FLEN/8, x14, x8, x12)

inst_22189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x1; valaddr_reg:x13; val_offset:66504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66504*FLEN/8, x14, x8, x12)

inst_22190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x13; val_offset:66507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66507*FLEN/8, x14, x8, x12)

inst_22191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x13; val_offset:66510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66510*FLEN/8, x14, x8, x12)

inst_22192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x199999; valaddr_reg:x13; val_offset:66513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66513*FLEN/8, x14, x8, x12)

inst_22193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x666666; valaddr_reg:x13; val_offset:66516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66516*FLEN/8, x14, x8, x12)

inst_22194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x13; val_offset:66519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66519*FLEN/8, x14, x8, x12)

inst_22195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x444444; valaddr_reg:x13; val_offset:66522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66522*FLEN/8, x14, x8, x12)

inst_22196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x249249; valaddr_reg:x13; val_offset:66525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66525*FLEN/8, x14, x8, x12)

inst_22197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x13; val_offset:66528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66528*FLEN/8, x14, x8, x12)

inst_22198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x333333; valaddr_reg:x13; val_offset:66531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66531*FLEN/8, x14, x8, x12)

inst_22199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f38f857; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x13; val_offset:66534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66534*FLEN/8, x14, x8, x12)

inst_22200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2f3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1b2f3b; op2val:0x0;
op3val:0x97fffff; valaddr_reg:x13; val_offset:66537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66537*FLEN/8, x14, x8, x12)

inst_22201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2f3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1b2f3b; op2val:0x0;
op3val:0x9000000; valaddr_reg:x13; val_offset:66540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66540*FLEN/8, x14, x8, x12)

#endif
RVTEST_CODE_END
RVMODEL_HALT
RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(50331663,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720240,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331655,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720248,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331651,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720252,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331649,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720254,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133732459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720256,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914559,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914560,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60817407,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65011712,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59768831,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66060288,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59244543,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66584576,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58982399,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66846720,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58851327,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66977792,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58785791,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67043328,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58753023,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67076096,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58736639,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58728447,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58724351,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58722303,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58721279,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720767,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720511,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720383,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720319,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720287,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720271,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720263,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720259,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720257,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497471,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303167,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303168,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(69206015,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(73400320,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68157439,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74448896,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67633151,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74973184,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67371007,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75235328,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67239935,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75366400,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67174399,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75431936,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67141631,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75464704,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67125247,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75481088,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67117055,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75489280,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67112959,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75493376,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67110911,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75495424,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109887,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496448,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109375,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496960,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109119,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497216,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108991,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497344,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108927,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497408,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108895,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497440,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108879,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497456,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108871,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497464,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108867,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497468,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108865,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497470,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131707002,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886080,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886081,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2114507435,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663295,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274688,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100630528,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100646912,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100655104,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100659200,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100661248,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662272,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662784,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663040,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663168,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274751,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663232,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274719,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663264,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274703,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663280,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274695,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663288,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274691,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663292,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274689,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663294,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051903,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663296,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857599,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857600,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(102760447,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(106954752,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101711871,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108003328,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101187583,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108527616,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100925439,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108789760,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100794367,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108920832,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100728831,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108986368,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100696063,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109019136,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100679679,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109035520,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100671487,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109043712,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100667391,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109047808,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100665343,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109049856,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100664319,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109050880,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663807,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051392,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663551,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051648,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663423,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051776,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663359,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051840,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663327,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051872,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663311,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051888,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663303,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051896,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663299,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051900,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663297,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051902,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2113046426,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440511,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051904,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246207,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246208,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(111149055,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(115343360,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(110100479,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116391936,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109576191,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116916224,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109314047,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117178368,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109182975,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117309440,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109117439,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117374976,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109084671,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117407744,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109068287,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117424128,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109060095,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117432320,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109055999,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117436416,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109053951,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117438464,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052927,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117439488,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052415,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440000,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052159,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440256,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052031,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440384,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051967,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440448,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051935,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440480,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051919,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440496,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051911,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440504,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051907,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440508,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051905,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440510,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634815,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634816,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(119537663,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(123731968,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(118489087,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(124780544,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117964799,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125304832,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117702655,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125566976,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117571583,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125698048,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117506047,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125763584,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125796352,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125812736,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125820928,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125825024,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125827072,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828096,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828608,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828864,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828992,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829056,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829088,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829104,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829112,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829116,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829118,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130720424,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217727,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829120,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023423,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023424,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127926271,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(132120576,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126877695,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133169152,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126353407,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133693440,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126091263,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133955584,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125960191,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134086656,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125894655,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134152192,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125861887,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134184960,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125845503,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134201344,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125837311,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134209536,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125833215,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134213632,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125831167,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134215680,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125830143,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134216704,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829631,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217216,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829375,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217472,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829247,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217600,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829183,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217664,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829151,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217696,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829135,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217712,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829127,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217720,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829123,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217724,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829121,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217726,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606335,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217728,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412031,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412032,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(136314879,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(140509184,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(135266303,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(141557760,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134742015,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142082048,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134479871,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142344192,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134348799,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142475264,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134283263,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142540800,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134250495,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142573568,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134234111,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142589952,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134225919,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142598144,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134221823,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142602240,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134219775,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142604288,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218751,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142605312,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218239,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142605824,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217983,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606080,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217855,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606208,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217791,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606272,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217759,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606304,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217743,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606320,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217735,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606328,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217731,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606332,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217729,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606334,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2101731681,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994943,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606336,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(146800639,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(146800640,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(144703487,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(148897792,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(143654911,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(149946368,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(143130623,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150470656,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142868479,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150732800,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142737407,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150863872,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142671871,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150929408,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142639103,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150962176,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142622719,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150978560,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142614527,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150986752,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142610431,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150990848,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142608383,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150992896,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142607359,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150993920,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606847,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994432,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606591,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994688,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606463,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994816,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606399,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994880,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606367,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994912,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606351,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994928,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606343,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994936,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606339,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994940,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606337,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994942,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383551,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189247,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189248,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(153092095,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(157286400,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(152043519,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158334976,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151519231,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158859264,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151257087,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159121408,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151126015,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159252480,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151060479,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159318016,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151027711,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159350784,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151011327,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159367168,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151003135,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159375360,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150999039,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159379456,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150996991,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159381504,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995967,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159382528,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995455,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383040,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995199,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383296,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995071,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383424,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995007,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383488,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994975,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383520,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994959,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383536,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994951,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383544,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994947,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383548,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383550,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132487995,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(0,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_12:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_13:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_14:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_15:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_16:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_17:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_18:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_19:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_20:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_21:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_22:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_23:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_24:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_25:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_26:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_27:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_28:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_29:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_30:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_31:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_32:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_33:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_34:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_35:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_36:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_37:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_38:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_39:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_40:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_41:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_42:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_43:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_44:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_45:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_46:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_47:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_48:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_49:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_50:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_51:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_52:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_53:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_54:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_55:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_56:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_57:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_58:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_59:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_60:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_61:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_62:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_63:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_64:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_65:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_66:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_67:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_68:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_69:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_70:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_71:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_72:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_73:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_74:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_75:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_76:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_77:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_78:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_79:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_80:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_81:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_82:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_83:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_84:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_85:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_86:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_87:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_88:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_89:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_90:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_91:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_92:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_93:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_94:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_95:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_96:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_97:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_98:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_99:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_100:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_101:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_102:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_103:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_104:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_105:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_106:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_107:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_108:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_109:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_110:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_111:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_112:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_113:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_114:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_115:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_116:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_117:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_118:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_119:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_120:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_121:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_122:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_123:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_124:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_125:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_126:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_127:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_128:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_129:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_130:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_131:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_132:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_133:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_134:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_135:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_136:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_137:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_138:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_139:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_140:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_141:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_142:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_143:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_144:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_145:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_146:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_147:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_148:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_149:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_150:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_151:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_152:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_153:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_154:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_155:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_156:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_157:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_158:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_159:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_160:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_161:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_162:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_163:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_164:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_165:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_166:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_167:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_168:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_169:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_170:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_171:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_172:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_173:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_174:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_175:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_176:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_177:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_178:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_179:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_180:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_181:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_182:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_183:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_184:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_185:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_186:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_187:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_188:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_189:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_190:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_191:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_192:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_193:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_194:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_195:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_196:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_197:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_198:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_199:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_200:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_201:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_202:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_203:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_204:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_205:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_206:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_207:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_208:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_209:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_210:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_211:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_212:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_213:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_214:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_215:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_216:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_217:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_218:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_219:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_220:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_221:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_222:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_223:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_224:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_225:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_226:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_227:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_228:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_229:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_230:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_231:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_232:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_233:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_234:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_235:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_236:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_237:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_238:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_239:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_240:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_241:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_242:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_243:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_244:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_245:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_246:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_247:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_248:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_249:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_250:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_251:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_252:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_253:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_254:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_255:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_256:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_257:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_258:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_259:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_260:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_261:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_262:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_263:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_264:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_265:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_266:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_267:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_268:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_269:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_270:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_271:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_272:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_273:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_274:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_275:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_276:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_277:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_278:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_279:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_280:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_281:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_282:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_283:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_284:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_285:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_286:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_287:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_288:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_289:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_290:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_291:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_292:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_293:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_294:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_295:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_296:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_297:
    .fill 82*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
