
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Apr 17 11:59:21 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/cgfs_fext/RV64Zfinx/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fnmadd_b15)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x13; val_offset:11442*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11442*FLEN/8, x14, x8, x12)

inst_3836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d400000; valaddr_reg:x13; val_offset:11445*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11445*FLEN/8, x14, x8, x12)

inst_3837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d3fffff; valaddr_reg:x13; val_offset:11448*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11448*FLEN/8, x14, x8, x12)

inst_3838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d600000; valaddr_reg:x13; val_offset:11451*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11451*FLEN/8, x14, x8, x12)

inst_3839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d1fffff; valaddr_reg:x13; val_offset:11454*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11454*FLEN/8, x14, x8, x12)

inst_3840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d700000; valaddr_reg:x13; val_offset:11457*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11457*FLEN/8, x14, x8, x12)

inst_3841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d0fffff; valaddr_reg:x13; val_offset:11460*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11460*FLEN/8, x14, x8, x12)

inst_3842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x13; val_offset:11463*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11463*FLEN/8, x14, x8, x12)

inst_3843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d07ffff; valaddr_reg:x13; val_offset:11466*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11466*FLEN/8, x14, x8, x12)

inst_3844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x13; val_offset:11469*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11469*FLEN/8, x14, x8, x12)

inst_3845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d03ffff; valaddr_reg:x13; val_offset:11472*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11472*FLEN/8, x14, x8, x12)

inst_3846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x13; val_offset:11475*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11475*FLEN/8, x14, x8, x12)

inst_3847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d01ffff; valaddr_reg:x13; val_offset:11478*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11478*FLEN/8, x14, x8, x12)

inst_3848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x13; val_offset:11481*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11481*FLEN/8, x14, x8, x12)

inst_3849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d00ffff; valaddr_reg:x13; val_offset:11484*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11484*FLEN/8, x14, x8, x12)

inst_3850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x13; val_offset:11487*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11487*FLEN/8, x14, x8, x12)

inst_3851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d007fff; valaddr_reg:x13; val_offset:11490*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11490*FLEN/8, x14, x8, x12)

inst_3852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x13; val_offset:11493*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11493*FLEN/8, x14, x8, x12)

inst_3853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d003fff; valaddr_reg:x13; val_offset:11496*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11496*FLEN/8, x14, x8, x12)

inst_3854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x13; val_offset:11499*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11499*FLEN/8, x14, x8, x12)

inst_3855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d001fff; valaddr_reg:x13; val_offset:11502*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11502*FLEN/8, x14, x8, x12)

inst_3856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x13; val_offset:11505*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11505*FLEN/8, x14, x8, x12)

inst_3857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d000fff; valaddr_reg:x13; val_offset:11508*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11508*FLEN/8, x14, x8, x12)

inst_3858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x13; val_offset:11511*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11511*FLEN/8, x14, x8, x12)

inst_3859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d0007ff; valaddr_reg:x13; val_offset:11514*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11514*FLEN/8, x14, x8, x12)

inst_3860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x13; val_offset:11517*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11517*FLEN/8, x14, x8, x12)

inst_3861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d0003ff; valaddr_reg:x13; val_offset:11520*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11520*FLEN/8, x14, x8, x12)

inst_3862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x13; val_offset:11523*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11523*FLEN/8, x14, x8, x12)

inst_3863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d0001ff; valaddr_reg:x13; val_offset:11526*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11526*FLEN/8, x14, x8, x12)

inst_3864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x13; val_offset:11529*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11529*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_30)
inst_3865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d0000ff; valaddr_reg:x13; val_offset:11532*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11532*FLEN/8, x14, x8, x12)

inst_3866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x13; val_offset:11535*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11535*FLEN/8, x14, x8, x12)

inst_3867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d00007f; valaddr_reg:x13; val_offset:11538*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11538*FLEN/8, x14, x8, x12)

inst_3868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x13; val_offset:11541*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11541*FLEN/8, x14, x8, x12)

inst_3869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d00003f; valaddr_reg:x13; val_offset:11544*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11544*FLEN/8, x14, x8, x12)

inst_3870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x13; val_offset:11547*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11547*FLEN/8, x14, x8, x12)

inst_3871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d00001f; valaddr_reg:x13; val_offset:11550*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11550*FLEN/8, x14, x8, x12)

inst_3872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x13; val_offset:11553*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11553*FLEN/8, x14, x8, x12)

inst_3873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d00000f; valaddr_reg:x13; val_offset:11556*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11556*FLEN/8, x14, x8, x12)

inst_3874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x13; val_offset:11559*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11559*FLEN/8, x14, x8, x12)

inst_3875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d000007; valaddr_reg:x13; val_offset:11562*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11562*FLEN/8, x14, x8, x12)

inst_3876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x13; val_offset:11565*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11565*FLEN/8, x14, x8, x12)

inst_3877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d000003; valaddr_reg:x13; val_offset:11568*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11568*FLEN/8, x14, x8, x12)

inst_3878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x13; val_offset:11571*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11571*FLEN/8, x14, x8, x12)

inst_3879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8d000001; valaddr_reg:x13; val_offset:11574*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11574*FLEN/8, x14, x8, x12)

inst_3880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:11577*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11577*FLEN/8, x14, x8, x12)

inst_3881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:11580*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11580*FLEN/8, x14, x8, x12)

inst_3882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:11583*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11583*FLEN/8, x14, x8, x12)

inst_3883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:11586*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11586*FLEN/8, x14, x8, x12)

inst_3884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:11589*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11589*FLEN/8, x14, x8, x12)

inst_3885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:11592*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11592*FLEN/8, x14, x8, x12)

inst_3886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:11595*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11595*FLEN/8, x14, x8, x12)

inst_3887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:11598*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11598*FLEN/8, x14, x8, x12)

inst_3888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:11601*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11601*FLEN/8, x14, x8, x12)

inst_3889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:11604*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11604*FLEN/8, x14, x8, x12)

inst_3890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:11607*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11607*FLEN/8, x14, x8, x12)

inst_3891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:11610*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11610*FLEN/8, x14, x8, x12)

inst_3892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:11613*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11613*FLEN/8, x14, x8, x12)

inst_3893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:11616*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11616*FLEN/8, x14, x8, x12)

inst_3894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:11619*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11619*FLEN/8, x14, x8, x12)

inst_3895:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x04d070 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d84d070; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:11622*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11622*FLEN/8, x14, x8, x12)

inst_3896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x13; val_offset:11625*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11625*FLEN/8, x14, x8, x12)

inst_3897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x13; val_offset:11628*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11628*FLEN/8, x14, x8, x12)

inst_3898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x13; val_offset:11631*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11631*FLEN/8, x14, x8, x12)

inst_3899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x13; val_offset:11634*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11634*FLEN/8, x14, x8, x12)

inst_3900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x13; val_offset:11637*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11637*FLEN/8, x14, x8, x12)

inst_3901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x13; val_offset:11640*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11640*FLEN/8, x14, x8, x12)

inst_3902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x13; val_offset:11643*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11643*FLEN/8, x14, x8, x12)

inst_3903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x13; val_offset:11646*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11646*FLEN/8, x14, x8, x12)

inst_3904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x13; val_offset:11649*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11649*FLEN/8, x14, x8, x12)

inst_3905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x13; val_offset:11652*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11652*FLEN/8, x14, x8, x12)

inst_3906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x13; val_offset:11655*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11655*FLEN/8, x14, x8, x12)

inst_3907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x13; val_offset:11658*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11658*FLEN/8, x14, x8, x12)

inst_3908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x13; val_offset:11661*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11661*FLEN/8, x14, x8, x12)

inst_3909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x13; val_offset:11664*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11664*FLEN/8, x14, x8, x12)

inst_3910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x13; val_offset:11667*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11667*FLEN/8, x14, x8, x12)

inst_3911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x13; val_offset:11670*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11670*FLEN/8, x14, x8, x12)

inst_3912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x13; val_offset:11673*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11673*FLEN/8, x14, x8, x12)

inst_3913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x13; val_offset:11676*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11676*FLEN/8, x14, x8, x12)

inst_3914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x13; val_offset:11679*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11679*FLEN/8, x14, x8, x12)

inst_3915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x13; val_offset:11682*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11682*FLEN/8, x14, x8, x12)

inst_3916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x13; val_offset:11685*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11685*FLEN/8, x14, x8, x12)

inst_3917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x13; val_offset:11688*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11688*FLEN/8, x14, x8, x12)

inst_3918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x13; val_offset:11691*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11691*FLEN/8, x14, x8, x12)

inst_3919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x13; val_offset:11694*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11694*FLEN/8, x14, x8, x12)

inst_3920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x13; val_offset:11697*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11697*FLEN/8, x14, x8, x12)

inst_3921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x13; val_offset:11700*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11700*FLEN/8, x14, x8, x12)

inst_3922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x13; val_offset:11703*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11703*FLEN/8, x14, x8, x12)

inst_3923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x13; val_offset:11706*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11706*FLEN/8, x14, x8, x12)

inst_3924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x13; val_offset:11709*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11709*FLEN/8, x14, x8, x12)

inst_3925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x13; val_offset:11712*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11712*FLEN/8, x14, x8, x12)

inst_3926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x13; val_offset:11715*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11715*FLEN/8, x14, x8, x12)

inst_3927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x13; val_offset:11718*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11718*FLEN/8, x14, x8, x12)

inst_3928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x13; val_offset:11721*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11721*FLEN/8, x14, x8, x12)

inst_3929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x13; val_offset:11724*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11724*FLEN/8, x14, x8, x12)

inst_3930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x13; val_offset:11727*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11727*FLEN/8, x14, x8, x12)

inst_3931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x13; val_offset:11730*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11730*FLEN/8, x14, x8, x12)

inst_3932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x13; val_offset:11733*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11733*FLEN/8, x14, x8, x12)

inst_3933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x13; val_offset:11736*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11736*FLEN/8, x14, x8, x12)

inst_3934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x13; val_offset:11739*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11739*FLEN/8, x14, x8, x12)

inst_3935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x13; val_offset:11742*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11742*FLEN/8, x14, x8, x12)

inst_3936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x13; val_offset:11745*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11745*FLEN/8, x14, x8, x12)

inst_3937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x13; val_offset:11748*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11748*FLEN/8, x14, x8, x12)

inst_3938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x13; val_offset:11751*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11751*FLEN/8, x14, x8, x12)

inst_3939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x13; val_offset:11754*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11754*FLEN/8, x14, x8, x12)

inst_3940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x13; val_offset:11757*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11757*FLEN/8, x14, x8, x12)

inst_3941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x13; val_offset:11760*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11760*FLEN/8, x14, x8, x12)

inst_3942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:11763*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11763*FLEN/8, x14, x8, x12)

inst_3943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:11766*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11766*FLEN/8, x14, x8, x12)

inst_3944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:11769*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11769*FLEN/8, x14, x8, x12)

inst_3945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:11772*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11772*FLEN/8, x14, x8, x12)

inst_3946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:11775*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11775*FLEN/8, x14, x8, x12)

inst_3947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:11778*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11778*FLEN/8, x14, x8, x12)

inst_3948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:11781*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11781*FLEN/8, x14, x8, x12)

inst_3949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:11784*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11784*FLEN/8, x14, x8, x12)

inst_3950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:11787*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11787*FLEN/8, x14, x8, x12)

inst_3951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:11790*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11790*FLEN/8, x14, x8, x12)

inst_3952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:11793*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11793*FLEN/8, x14, x8, x12)

inst_3953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:11796*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11796*FLEN/8, x14, x8, x12)

inst_3954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:11799*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11799*FLEN/8, x14, x8, x12)

inst_3955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:11802*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11802*FLEN/8, x14, x8, x12)

inst_3956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:11805*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11805*FLEN/8, x14, x8, x12)

inst_3957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ee20b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efee20b; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:11808*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11808*FLEN/8, x14, x8, x12)

inst_3958:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x13; val_offset:11811*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11811*FLEN/8, x14, x8, x12)

inst_3959:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x13; val_offset:11814*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11814*FLEN/8, x14, x8, x12)

inst_3960:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e400000; valaddr_reg:x13; val_offset:11817*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11817*FLEN/8, x14, x8, x12)

inst_3961:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e3fffff; valaddr_reg:x13; val_offset:11820*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11820*FLEN/8, x14, x8, x12)

inst_3962:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e600000; valaddr_reg:x13; val_offset:11823*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11823*FLEN/8, x14, x8, x12)

inst_3963:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e1fffff; valaddr_reg:x13; val_offset:11826*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11826*FLEN/8, x14, x8, x12)

inst_3964:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e700000; valaddr_reg:x13; val_offset:11829*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11829*FLEN/8, x14, x8, x12)

inst_3965:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e0fffff; valaddr_reg:x13; val_offset:11832*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11832*FLEN/8, x14, x8, x12)

inst_3966:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e780000; valaddr_reg:x13; val_offset:11835*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11835*FLEN/8, x14, x8, x12)

inst_3967:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e07ffff; valaddr_reg:x13; val_offset:11838*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11838*FLEN/8, x14, x8, x12)

inst_3968:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7c0000; valaddr_reg:x13; val_offset:11841*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11841*FLEN/8, x14, x8, x12)

inst_3969:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e03ffff; valaddr_reg:x13; val_offset:11844*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11844*FLEN/8, x14, x8, x12)

inst_3970:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7e0000; valaddr_reg:x13; val_offset:11847*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11847*FLEN/8, x14, x8, x12)

inst_3971:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e01ffff; valaddr_reg:x13; val_offset:11850*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11850*FLEN/8, x14, x8, x12)

inst_3972:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x13; val_offset:11853*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11853*FLEN/8, x14, x8, x12)

inst_3973:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e00ffff; valaddr_reg:x13; val_offset:11856*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11856*FLEN/8, x14, x8, x12)

inst_3974:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x13; val_offset:11859*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11859*FLEN/8, x14, x8, x12)

inst_3975:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e007fff; valaddr_reg:x13; val_offset:11862*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11862*FLEN/8, x14, x8, x12)

inst_3976:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x13; val_offset:11865*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11865*FLEN/8, x14, x8, x12)

inst_3977:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e003fff; valaddr_reg:x13; val_offset:11868*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11868*FLEN/8, x14, x8, x12)

inst_3978:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x13; val_offset:11871*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11871*FLEN/8, x14, x8, x12)

inst_3979:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e001fff; valaddr_reg:x13; val_offset:11874*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11874*FLEN/8, x14, x8, x12)

inst_3980:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x13; val_offset:11877*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11877*FLEN/8, x14, x8, x12)

inst_3981:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e000fff; valaddr_reg:x13; val_offset:11880*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11880*FLEN/8, x14, x8, x12)

inst_3982:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x13; val_offset:11883*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11883*FLEN/8, x14, x8, x12)

inst_3983:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e0007ff; valaddr_reg:x13; val_offset:11886*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11886*FLEN/8, x14, x8, x12)

inst_3984:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x13; val_offset:11889*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11889*FLEN/8, x14, x8, x12)

inst_3985:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e0003ff; valaddr_reg:x13; val_offset:11892*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11892*FLEN/8, x14, x8, x12)

inst_3986:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x13; val_offset:11895*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11895*FLEN/8, x14, x8, x12)

inst_3987:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x13; val_offset:11898*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11898*FLEN/8, x14, x8, x12)

inst_3988:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x13; val_offset:11901*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11901*FLEN/8, x14, x8, x12)

inst_3989:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x13; val_offset:11904*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11904*FLEN/8, x14, x8, x12)

inst_3990:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x13; val_offset:11907*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11907*FLEN/8, x14, x8, x12)

inst_3991:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x13; val_offset:11910*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11910*FLEN/8, x14, x8, x12)

inst_3992:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x13; val_offset:11913*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11913*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_31)
inst_3993:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x13; val_offset:11916*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11916*FLEN/8, x14, x8, x12)

inst_3994:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x13; val_offset:11919*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11919*FLEN/8, x14, x8, x12)

inst_3995:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x13; val_offset:11922*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11922*FLEN/8, x14, x8, x12)

inst_3996:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x13; val_offset:11925*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11925*FLEN/8, x14, x8, x12)

inst_3997:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x13; val_offset:11928*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11928*FLEN/8, x14, x8, x12)

inst_3998:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x13; val_offset:11931*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11931*FLEN/8, x14, x8, x12)

inst_3999:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x13; val_offset:11934*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11934*FLEN/8, x14, x8, x12)

inst_4000:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x13; val_offset:11937*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11937*FLEN/8, x14, x8, x12)

inst_4001:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x13; val_offset:11940*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11940*FLEN/8, x14, x8, x12)

inst_4002:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x13; val_offset:11943*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11943*FLEN/8, x14, x8, x12)

inst_4003:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x13; val_offset:11946*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11946*FLEN/8, x14, x8, x12)

inst_4004:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:11949*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11949*FLEN/8, x14, x8, x12)

inst_4005:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:11952*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11952*FLEN/8, x14, x8, x12)

inst_4006:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:11955*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11955*FLEN/8, x14, x8, x12)

inst_4007:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:11958*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11958*FLEN/8, x14, x8, x12)

inst_4008:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:11961*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11961*FLEN/8, x14, x8, x12)

inst_4009:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:11964*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11964*FLEN/8, x14, x8, x12)

inst_4010:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:11967*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11967*FLEN/8, x14, x8, x12)

inst_4011:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:11970*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11970*FLEN/8, x14, x8, x12)

inst_4012:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:11973*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11973*FLEN/8, x14, x8, x12)

inst_4013:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:11976*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11976*FLEN/8, x14, x8, x12)

inst_4014:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:11979*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11979*FLEN/8, x14, x8, x12)

inst_4015:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:11982*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11982*FLEN/8, x14, x8, x12)

inst_4016:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:11985*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11985*FLEN/8, x14, x8, x12)

inst_4017:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:11988*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11988*FLEN/8, x14, x8, x12)

inst_4018:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:11991*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11991*FLEN/8, x14, x8, x12)

inst_4019:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c84c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c84c; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:11994*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11994*FLEN/8, x14, x8, x12)

inst_4020:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e800000; valaddr_reg:x13; val_offset:11997*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 11997*FLEN/8, x14, x8, x12)

inst_4021:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effffff; valaddr_reg:x13; val_offset:12000*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12000*FLEN/8, x14, x8, x12)

inst_4022:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8ec00000; valaddr_reg:x13; val_offset:12003*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12003*FLEN/8, x14, x8, x12)

inst_4023:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8ebfffff; valaddr_reg:x13; val_offset:12006*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12006*FLEN/8, x14, x8, x12)

inst_4024:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8ee00000; valaddr_reg:x13; val_offset:12009*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12009*FLEN/8, x14, x8, x12)

inst_4025:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e9fffff; valaddr_reg:x13; val_offset:12012*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12012*FLEN/8, x14, x8, x12)

inst_4026:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8ef00000; valaddr_reg:x13; val_offset:12015*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12015*FLEN/8, x14, x8, x12)

inst_4027:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e8fffff; valaddr_reg:x13; val_offset:12018*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12018*FLEN/8, x14, x8, x12)

inst_4028:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8ef80000; valaddr_reg:x13; val_offset:12021*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12021*FLEN/8, x14, x8, x12)

inst_4029:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e87ffff; valaddr_reg:x13; val_offset:12024*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12024*FLEN/8, x14, x8, x12)

inst_4030:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efc0000; valaddr_reg:x13; val_offset:12027*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12027*FLEN/8, x14, x8, x12)

inst_4031:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e83ffff; valaddr_reg:x13; val_offset:12030*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12030*FLEN/8, x14, x8, x12)

inst_4032:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efe0000; valaddr_reg:x13; val_offset:12033*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12033*FLEN/8, x14, x8, x12)

inst_4033:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e81ffff; valaddr_reg:x13; val_offset:12036*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12036*FLEN/8, x14, x8, x12)

inst_4034:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8eff0000; valaddr_reg:x13; val_offset:12039*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12039*FLEN/8, x14, x8, x12)

inst_4035:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e80ffff; valaddr_reg:x13; val_offset:12042*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12042*FLEN/8, x14, x8, x12)

inst_4036:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8eff8000; valaddr_reg:x13; val_offset:12045*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12045*FLEN/8, x14, x8, x12)

inst_4037:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e807fff; valaddr_reg:x13; val_offset:12048*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12048*FLEN/8, x14, x8, x12)

inst_4038:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effc000; valaddr_reg:x13; val_offset:12051*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12051*FLEN/8, x14, x8, x12)

inst_4039:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e803fff; valaddr_reg:x13; val_offset:12054*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12054*FLEN/8, x14, x8, x12)

inst_4040:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effe000; valaddr_reg:x13; val_offset:12057*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12057*FLEN/8, x14, x8, x12)

inst_4041:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e801fff; valaddr_reg:x13; val_offset:12060*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12060*FLEN/8, x14, x8, x12)

inst_4042:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efff000; valaddr_reg:x13; val_offset:12063*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12063*FLEN/8, x14, x8, x12)

inst_4043:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e800fff; valaddr_reg:x13; val_offset:12066*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12066*FLEN/8, x14, x8, x12)

inst_4044:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efff800; valaddr_reg:x13; val_offset:12069*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12069*FLEN/8, x14, x8, x12)

inst_4045:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e8007ff; valaddr_reg:x13; val_offset:12072*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12072*FLEN/8, x14, x8, x12)

inst_4046:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efffc00; valaddr_reg:x13; val_offset:12075*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12075*FLEN/8, x14, x8, x12)

inst_4047:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e8003ff; valaddr_reg:x13; val_offset:12078*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12078*FLEN/8, x14, x8, x12)

inst_4048:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efffe00; valaddr_reg:x13; val_offset:12081*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12081*FLEN/8, x14, x8, x12)

inst_4049:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e8001ff; valaddr_reg:x13; val_offset:12084*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12084*FLEN/8, x14, x8, x12)

inst_4050:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effff00; valaddr_reg:x13; val_offset:12087*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12087*FLEN/8, x14, x8, x12)

inst_4051:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e8000ff; valaddr_reg:x13; val_offset:12090*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12090*FLEN/8, x14, x8, x12)

inst_4052:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effff80; valaddr_reg:x13; val_offset:12093*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12093*FLEN/8, x14, x8, x12)

inst_4053:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e80007f; valaddr_reg:x13; val_offset:12096*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12096*FLEN/8, x14, x8, x12)

inst_4054:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effffc0; valaddr_reg:x13; val_offset:12099*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12099*FLEN/8, x14, x8, x12)

inst_4055:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e80003f; valaddr_reg:x13; val_offset:12102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12102*FLEN/8, x14, x8, x12)

inst_4056:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8effffe0; valaddr_reg:x13; val_offset:12105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12105*FLEN/8, x14, x8, x12)

inst_4057:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e80001f; valaddr_reg:x13; val_offset:12108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12108*FLEN/8, x14, x8, x12)

inst_4058:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efffff0; valaddr_reg:x13; val_offset:12111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12111*FLEN/8, x14, x8, x12)

inst_4059:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e80000f; valaddr_reg:x13; val_offset:12114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12114*FLEN/8, x14, x8, x12)

inst_4060:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efffff8; valaddr_reg:x13; val_offset:12117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12117*FLEN/8, x14, x8, x12)

inst_4061:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e800007; valaddr_reg:x13; val_offset:12120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12120*FLEN/8, x14, x8, x12)

inst_4062:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efffffc; valaddr_reg:x13; val_offset:12123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12123*FLEN/8, x14, x8, x12)

inst_4063:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e800003; valaddr_reg:x13; val_offset:12126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12126*FLEN/8, x14, x8, x12)

inst_4064:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8efffffe; valaddr_reg:x13; val_offset:12129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12129*FLEN/8, x14, x8, x12)

inst_4065:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8e800001; valaddr_reg:x13; val_offset:12132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12132*FLEN/8, x14, x8, x12)

inst_4066:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:12135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12135*FLEN/8, x14, x8, x12)

inst_4067:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:12138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12138*FLEN/8, x14, x8, x12)

inst_4068:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:12141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12141*FLEN/8, x14, x8, x12)

inst_4069:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:12144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12144*FLEN/8, x14, x8, x12)

inst_4070:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:12147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12147*FLEN/8, x14, x8, x12)

inst_4071:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:12150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12150*FLEN/8, x14, x8, x12)

inst_4072:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:12153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12153*FLEN/8, x14, x8, x12)

inst_4073:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:12156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12156*FLEN/8, x14, x8, x12)

inst_4074:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:12159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12159*FLEN/8, x14, x8, x12)

inst_4075:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:12162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12162*FLEN/8, x14, x8, x12)

inst_4076:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:12165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12165*FLEN/8, x14, x8, x12)

inst_4077:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:12168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12168*FLEN/8, x14, x8, x12)

inst_4078:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:12171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12171*FLEN/8, x14, x8, x12)

inst_4079:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:12174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12174*FLEN/8, x14, x8, x12)

inst_4080:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:12177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12177*FLEN/8, x14, x8, x12)

inst_4081:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7b70c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dfb70c9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:12180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12180*FLEN/8, x14, x8, x12)

inst_4082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x13; val_offset:12183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12183*FLEN/8, x14, x8, x12)

inst_4083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x13; val_offset:12186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12186*FLEN/8, x14, x8, x12)

inst_4084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x13; val_offset:12189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12189*FLEN/8, x14, x8, x12)

inst_4085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x13; val_offset:12192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12192*FLEN/8, x14, x8, x12)

inst_4086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x13; val_offset:12195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12195*FLEN/8, x14, x8, x12)

inst_4087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x13; val_offset:12198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12198*FLEN/8, x14, x8, x12)

inst_4088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x13; val_offset:12201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12201*FLEN/8, x14, x8, x12)

inst_4089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x13; val_offset:12204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12204*FLEN/8, x14, x8, x12)

inst_4090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x13; val_offset:12207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12207*FLEN/8, x14, x8, x12)

inst_4091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x13; val_offset:12210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12210*FLEN/8, x14, x8, x12)

inst_4092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x13; val_offset:12213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12213*FLEN/8, x14, x8, x12)

inst_4093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x13; val_offset:12216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12216*FLEN/8, x14, x8, x12)

inst_4094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x13; val_offset:12219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12219*FLEN/8, x14, x8, x12)

inst_4095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x13; val_offset:12222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12222*FLEN/8, x14, x8, x12)

inst_4096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x13; val_offset:12225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12225*FLEN/8, x14, x8, x12)

inst_4097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x13; val_offset:12228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12228*FLEN/8, x14, x8, x12)

inst_4098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x13; val_offset:12231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12231*FLEN/8, x14, x8, x12)

inst_4099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x13; val_offset:12234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12234*FLEN/8, x14, x8, x12)

inst_4100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x13; val_offset:12237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12237*FLEN/8, x14, x8, x12)

inst_4101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x13; val_offset:12240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12240*FLEN/8, x14, x8, x12)

inst_4102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x13; val_offset:12243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12243*FLEN/8, x14, x8, x12)

inst_4103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x13; val_offset:12246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12246*FLEN/8, x14, x8, x12)

inst_4104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x13; val_offset:12249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12249*FLEN/8, x14, x8, x12)

inst_4105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x13; val_offset:12252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12252*FLEN/8, x14, x8, x12)

inst_4106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x13; val_offset:12255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12255*FLEN/8, x14, x8, x12)

inst_4107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x13; val_offset:12258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12258*FLEN/8, x14, x8, x12)

inst_4108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x13; val_offset:12261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12261*FLEN/8, x14, x8, x12)

inst_4109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x13; val_offset:12264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12264*FLEN/8, x14, x8, x12)

inst_4110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x13; val_offset:12267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12267*FLEN/8, x14, x8, x12)

inst_4111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x13; val_offset:12270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12270*FLEN/8, x14, x8, x12)

inst_4112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x13; val_offset:12273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12273*FLEN/8, x14, x8, x12)

inst_4113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x13; val_offset:12276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12276*FLEN/8, x14, x8, x12)

inst_4114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x13; val_offset:12279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12279*FLEN/8, x14, x8, x12)

inst_4115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x13; val_offset:12282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12282*FLEN/8, x14, x8, x12)

inst_4116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x13; val_offset:12285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12285*FLEN/8, x14, x8, x12)

inst_4117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x13; val_offset:12288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12288*FLEN/8, x14, x8, x12)

inst_4118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x13; val_offset:12291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12291*FLEN/8, x14, x8, x12)

inst_4119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x13; val_offset:12294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12294*FLEN/8, x14, x8, x12)

inst_4120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x13; val_offset:12297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12297*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_32)
inst_4121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x13; val_offset:12300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12300*FLEN/8, x14, x8, x12)

inst_4122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x13; val_offset:12303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12303*FLEN/8, x14, x8, x12)

inst_4123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x13; val_offset:12306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12306*FLEN/8, x14, x8, x12)

inst_4124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x13; val_offset:12309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12309*FLEN/8, x14, x8, x12)

inst_4125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x13; val_offset:12312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12312*FLEN/8, x14, x8, x12)

inst_4126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x13; val_offset:12315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12315*FLEN/8, x14, x8, x12)

inst_4127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x13; val_offset:12318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12318*FLEN/8, x14, x8, x12)

inst_4128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:12321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12321*FLEN/8, x14, x8, x12)

inst_4129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:12324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12324*FLEN/8, x14, x8, x12)

inst_4130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:12327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12327*FLEN/8, x14, x8, x12)

inst_4131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:12330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12330*FLEN/8, x14, x8, x12)

inst_4132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:12333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12333*FLEN/8, x14, x8, x12)

inst_4133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:12336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12336*FLEN/8, x14, x8, x12)

inst_4134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:12339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12339*FLEN/8, x14, x8, x12)

inst_4135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:12342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12342*FLEN/8, x14, x8, x12)

inst_4136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:12345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12345*FLEN/8, x14, x8, x12)

inst_4137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:12348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12348*FLEN/8, x14, x8, x12)

inst_4138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:12351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12351*FLEN/8, x14, x8, x12)

inst_4139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:12354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12354*FLEN/8, x14, x8, x12)

inst_4140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:12357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12357*FLEN/8, x14, x8, x12)

inst_4141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:12360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12360*FLEN/8, x14, x8, x12)

inst_4142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:12363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12363*FLEN/8, x14, x8, x12)

inst_4143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:12366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12366*FLEN/8, x14, x8, x12)

inst_4144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f800000; valaddr_reg:x13; val_offset:12369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12369*FLEN/8, x14, x8, x12)

inst_4145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x13; val_offset:12372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12372*FLEN/8, x14, x8, x12)

inst_4146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fc00000; valaddr_reg:x13; val_offset:12375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12375*FLEN/8, x14, x8, x12)

inst_4147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fbfffff; valaddr_reg:x13; val_offset:12378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12378*FLEN/8, x14, x8, x12)

inst_4148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fe00000; valaddr_reg:x13; val_offset:12381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12381*FLEN/8, x14, x8, x12)

inst_4149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f9fffff; valaddr_reg:x13; val_offset:12384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12384*FLEN/8, x14, x8, x12)

inst_4150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ff00000; valaddr_reg:x13; val_offset:12387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12387*FLEN/8, x14, x8, x12)

inst_4151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f8fffff; valaddr_reg:x13; val_offset:12390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12390*FLEN/8, x14, x8, x12)

inst_4152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ff80000; valaddr_reg:x13; val_offset:12393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12393*FLEN/8, x14, x8, x12)

inst_4153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f87ffff; valaddr_reg:x13; val_offset:12396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12396*FLEN/8, x14, x8, x12)

inst_4154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffc0000; valaddr_reg:x13; val_offset:12399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12399*FLEN/8, x14, x8, x12)

inst_4155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f83ffff; valaddr_reg:x13; val_offset:12402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12402*FLEN/8, x14, x8, x12)

inst_4156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffe0000; valaddr_reg:x13; val_offset:12405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12405*FLEN/8, x14, x8, x12)

inst_4157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f81ffff; valaddr_reg:x13; val_offset:12408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12408*FLEN/8, x14, x8, x12)

inst_4158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fff0000; valaddr_reg:x13; val_offset:12411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12411*FLEN/8, x14, x8, x12)

inst_4159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f80ffff; valaddr_reg:x13; val_offset:12414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12414*FLEN/8, x14, x8, x12)

inst_4160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fff8000; valaddr_reg:x13; val_offset:12417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12417*FLEN/8, x14, x8, x12)

inst_4161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f807fff; valaddr_reg:x13; val_offset:12420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12420*FLEN/8, x14, x8, x12)

inst_4162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffc000; valaddr_reg:x13; val_offset:12423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12423*FLEN/8, x14, x8, x12)

inst_4163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f803fff; valaddr_reg:x13; val_offset:12426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12426*FLEN/8, x14, x8, x12)

inst_4164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffe000; valaddr_reg:x13; val_offset:12429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12429*FLEN/8, x14, x8, x12)

inst_4165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f801fff; valaddr_reg:x13; val_offset:12432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12432*FLEN/8, x14, x8, x12)

inst_4166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffff000; valaddr_reg:x13; val_offset:12435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12435*FLEN/8, x14, x8, x12)

inst_4167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f800fff; valaddr_reg:x13; val_offset:12438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12438*FLEN/8, x14, x8, x12)

inst_4168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffff800; valaddr_reg:x13; val_offset:12441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12441*FLEN/8, x14, x8, x12)

inst_4169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f8007ff; valaddr_reg:x13; val_offset:12444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12444*FLEN/8, x14, x8, x12)

inst_4170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffffc00; valaddr_reg:x13; val_offset:12447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12447*FLEN/8, x14, x8, x12)

inst_4171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f8003ff; valaddr_reg:x13; val_offset:12450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12450*FLEN/8, x14, x8, x12)

inst_4172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffffe00; valaddr_reg:x13; val_offset:12453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12453*FLEN/8, x14, x8, x12)

inst_4173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f8001ff; valaddr_reg:x13; val_offset:12456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12456*FLEN/8, x14, x8, x12)

inst_4174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffff00; valaddr_reg:x13; val_offset:12459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12459*FLEN/8, x14, x8, x12)

inst_4175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f8000ff; valaddr_reg:x13; val_offset:12462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12462*FLEN/8, x14, x8, x12)

inst_4176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffff80; valaddr_reg:x13; val_offset:12465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12465*FLEN/8, x14, x8, x12)

inst_4177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f80007f; valaddr_reg:x13; val_offset:12468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12468*FLEN/8, x14, x8, x12)

inst_4178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffffc0; valaddr_reg:x13; val_offset:12471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12471*FLEN/8, x14, x8, x12)

inst_4179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f80003f; valaddr_reg:x13; val_offset:12474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12474*FLEN/8, x14, x8, x12)

inst_4180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8fffffe0; valaddr_reg:x13; val_offset:12477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12477*FLEN/8, x14, x8, x12)

inst_4181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f80001f; valaddr_reg:x13; val_offset:12480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12480*FLEN/8, x14, x8, x12)

inst_4182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffffff0; valaddr_reg:x13; val_offset:12483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12483*FLEN/8, x14, x8, x12)

inst_4183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f80000f; valaddr_reg:x13; val_offset:12486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12486*FLEN/8, x14, x8, x12)

inst_4184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffffff8; valaddr_reg:x13; val_offset:12489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12489*FLEN/8, x14, x8, x12)

inst_4185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f800007; valaddr_reg:x13; val_offset:12492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12492*FLEN/8, x14, x8, x12)

inst_4186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffffffc; valaddr_reg:x13; val_offset:12495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12495*FLEN/8, x14, x8, x12)

inst_4187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f800003; valaddr_reg:x13; val_offset:12498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12498*FLEN/8, x14, x8, x12)

inst_4188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x13; val_offset:12501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12501*FLEN/8, x14, x8, x12)

inst_4189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8f800001; valaddr_reg:x13; val_offset:12504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12504*FLEN/8, x14, x8, x12)

inst_4190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:12507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12507*FLEN/8, x14, x8, x12)

inst_4191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:12510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12510*FLEN/8, x14, x8, x12)

inst_4192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:12513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12513*FLEN/8, x14, x8, x12)

inst_4193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:12516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12516*FLEN/8, x14, x8, x12)

inst_4194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:12519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12519*FLEN/8, x14, x8, x12)

inst_4195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:12522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12522*FLEN/8, x14, x8, x12)

inst_4196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:12525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12525*FLEN/8, x14, x8, x12)

inst_4197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:12528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12528*FLEN/8, x14, x8, x12)

inst_4198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:12531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12531*FLEN/8, x14, x8, x12)

inst_4199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:12534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12534*FLEN/8, x14, x8, x12)

inst_4200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:12537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12537*FLEN/8, x14, x8, x12)

inst_4201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:12540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12540*FLEN/8, x14, x8, x12)

inst_4202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:12543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12543*FLEN/8, x14, x8, x12)

inst_4203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:12546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12546*FLEN/8, x14, x8, x12)

inst_4204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:12549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12549*FLEN/8, x14, x8, x12)

inst_4205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e47db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8e47db; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:12552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12552*FLEN/8, x14, x8, x12)

inst_4206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000000; valaddr_reg:x13; val_offset:12555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12555*FLEN/8, x14, x8, x12)

inst_4207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fffff; valaddr_reg:x13; val_offset:12558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12558*FLEN/8, x14, x8, x12)

inst_4208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90400000; valaddr_reg:x13; val_offset:12561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12561*FLEN/8, x14, x8, x12)

inst_4209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x903fffff; valaddr_reg:x13; val_offset:12564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12564*FLEN/8, x14, x8, x12)

inst_4210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90600000; valaddr_reg:x13; val_offset:12567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12567*FLEN/8, x14, x8, x12)

inst_4211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x901fffff; valaddr_reg:x13; val_offset:12570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12570*FLEN/8, x14, x8, x12)

inst_4212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90700000; valaddr_reg:x13; val_offset:12573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12573*FLEN/8, x14, x8, x12)

inst_4213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900fffff; valaddr_reg:x13; val_offset:12576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12576*FLEN/8, x14, x8, x12)

inst_4214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90780000; valaddr_reg:x13; val_offset:12579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12579*FLEN/8, x14, x8, x12)

inst_4215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9007ffff; valaddr_reg:x13; val_offset:12582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12582*FLEN/8, x14, x8, x12)

inst_4216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907c0000; valaddr_reg:x13; val_offset:12585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12585*FLEN/8, x14, x8, x12)

inst_4217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9003ffff; valaddr_reg:x13; val_offset:12588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12588*FLEN/8, x14, x8, x12)

inst_4218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907e0000; valaddr_reg:x13; val_offset:12591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12591*FLEN/8, x14, x8, x12)

inst_4219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9001ffff; valaddr_reg:x13; val_offset:12594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12594*FLEN/8, x14, x8, x12)

inst_4220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907f0000; valaddr_reg:x13; val_offset:12597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12597*FLEN/8, x14, x8, x12)

inst_4221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000ffff; valaddr_reg:x13; val_offset:12600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12600*FLEN/8, x14, x8, x12)

inst_4222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907f8000; valaddr_reg:x13; val_offset:12603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12603*FLEN/8, x14, x8, x12)

inst_4223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90007fff; valaddr_reg:x13; val_offset:12606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12606*FLEN/8, x14, x8, x12)

inst_4224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fc000; valaddr_reg:x13; val_offset:12609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12609*FLEN/8, x14, x8, x12)

inst_4225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90003fff; valaddr_reg:x13; val_offset:12612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12612*FLEN/8, x14, x8, x12)

inst_4226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fe000; valaddr_reg:x13; val_offset:12615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12615*FLEN/8, x14, x8, x12)

inst_4227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90001fff; valaddr_reg:x13; val_offset:12618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12618*FLEN/8, x14, x8, x12)

inst_4228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ff000; valaddr_reg:x13; val_offset:12621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12621*FLEN/8, x14, x8, x12)

inst_4229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000fff; valaddr_reg:x13; val_offset:12624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12624*FLEN/8, x14, x8, x12)

inst_4230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ff800; valaddr_reg:x13; val_offset:12627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12627*FLEN/8, x14, x8, x12)

inst_4231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900007ff; valaddr_reg:x13; val_offset:12630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12630*FLEN/8, x14, x8, x12)

inst_4232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffc00; valaddr_reg:x13; val_offset:12633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12633*FLEN/8, x14, x8, x12)

inst_4233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900003ff; valaddr_reg:x13; val_offset:12636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12636*FLEN/8, x14, x8, x12)

inst_4234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffe00; valaddr_reg:x13; val_offset:12639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12639*FLEN/8, x14, x8, x12)

inst_4235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900001ff; valaddr_reg:x13; val_offset:12642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12642*FLEN/8, x14, x8, x12)

inst_4236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fff00; valaddr_reg:x13; val_offset:12645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12645*FLEN/8, x14, x8, x12)

inst_4237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900000ff; valaddr_reg:x13; val_offset:12648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12648*FLEN/8, x14, x8, x12)

inst_4238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fff80; valaddr_reg:x13; val_offset:12651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12651*FLEN/8, x14, x8, x12)

inst_4239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000007f; valaddr_reg:x13; val_offset:12654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12654*FLEN/8, x14, x8, x12)

inst_4240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fffc0; valaddr_reg:x13; val_offset:12657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12657*FLEN/8, x14, x8, x12)

inst_4241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000003f; valaddr_reg:x13; val_offset:12660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12660*FLEN/8, x14, x8, x12)

inst_4242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fffe0; valaddr_reg:x13; val_offset:12663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12663*FLEN/8, x14, x8, x12)

inst_4243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000001f; valaddr_reg:x13; val_offset:12666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12666*FLEN/8, x14, x8, x12)

inst_4244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffff0; valaddr_reg:x13; val_offset:12669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12669*FLEN/8, x14, x8, x12)

inst_4245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000000f; valaddr_reg:x13; val_offset:12672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12672*FLEN/8, x14, x8, x12)

inst_4246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffff8; valaddr_reg:x13; val_offset:12675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12675*FLEN/8, x14, x8, x12)

inst_4247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000007; valaddr_reg:x13; val_offset:12678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12678*FLEN/8, x14, x8, x12)

inst_4248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffffc; valaddr_reg:x13; val_offset:12681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12681*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_33)
inst_4249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000003; valaddr_reg:x13; val_offset:12684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12684*FLEN/8, x14, x8, x12)

inst_4250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffffe; valaddr_reg:x13; val_offset:12687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12687*FLEN/8, x14, x8, x12)

inst_4251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000001; valaddr_reg:x13; val_offset:12690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12690*FLEN/8, x14, x8, x12)

inst_4252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x13; val_offset:12693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12693*FLEN/8, x14, x8, x12)

inst_4253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x13; val_offset:12696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12696*FLEN/8, x14, x8, x12)

inst_4254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x13; val_offset:12699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12699*FLEN/8, x14, x8, x12)

inst_4255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x13; val_offset:12702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12702*FLEN/8, x14, x8, x12)

inst_4256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x13; val_offset:12705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12705*FLEN/8, x14, x8, x12)

inst_4257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x13; val_offset:12708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12708*FLEN/8, x14, x8, x12)

inst_4258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x13; val_offset:12711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12711*FLEN/8, x14, x8, x12)

inst_4259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x13; val_offset:12714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12714*FLEN/8, x14, x8, x12)

inst_4260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x13; val_offset:12717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12717*FLEN/8, x14, x8, x12)

inst_4261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x13; val_offset:12720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12720*FLEN/8, x14, x8, x12)

inst_4262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x13; val_offset:12723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12723*FLEN/8, x14, x8, x12)

inst_4263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x13; val_offset:12726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12726*FLEN/8, x14, x8, x12)

inst_4264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x13; val_offset:12729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12729*FLEN/8, x14, x8, x12)

inst_4265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x13; val_offset:12732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12732*FLEN/8, x14, x8, x12)

inst_4266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x13; val_offset:12735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12735*FLEN/8, x14, x8, x12)

inst_4267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x13; val_offset:12738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12738*FLEN/8, x14, x8, x12)

inst_4268:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf000000; valaddr_reg:x13; val_offset:12741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12741*FLEN/8, x14, x8, x12)

inst_4269:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fffff; valaddr_reg:x13; val_offset:12744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12744*FLEN/8, x14, x8, x12)

inst_4270:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf400000; valaddr_reg:x13; val_offset:12747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12747*FLEN/8, x14, x8, x12)

inst_4271:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf3fffff; valaddr_reg:x13; val_offset:12750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12750*FLEN/8, x14, x8, x12)

inst_4272:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf600000; valaddr_reg:x13; val_offset:12753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12753*FLEN/8, x14, x8, x12)

inst_4273:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf1fffff; valaddr_reg:x13; val_offset:12756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12756*FLEN/8, x14, x8, x12)

inst_4274:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf700000; valaddr_reg:x13; val_offset:12759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12759*FLEN/8, x14, x8, x12)

inst_4275:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf0fffff; valaddr_reg:x13; val_offset:12762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12762*FLEN/8, x14, x8, x12)

inst_4276:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf780000; valaddr_reg:x13; val_offset:12765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12765*FLEN/8, x14, x8, x12)

inst_4277:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf07ffff; valaddr_reg:x13; val_offset:12768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12768*FLEN/8, x14, x8, x12)

inst_4278:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7c0000; valaddr_reg:x13; val_offset:12771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12771*FLEN/8, x14, x8, x12)

inst_4279:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf03ffff; valaddr_reg:x13; val_offset:12774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12774*FLEN/8, x14, x8, x12)

inst_4280:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7e0000; valaddr_reg:x13; val_offset:12777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12777*FLEN/8, x14, x8, x12)

inst_4281:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf01ffff; valaddr_reg:x13; val_offset:12780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12780*FLEN/8, x14, x8, x12)

inst_4282:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7f0000; valaddr_reg:x13; val_offset:12783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12783*FLEN/8, x14, x8, x12)

inst_4283:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf00ffff; valaddr_reg:x13; val_offset:12786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12786*FLEN/8, x14, x8, x12)

inst_4284:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7f8000; valaddr_reg:x13; val_offset:12789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12789*FLEN/8, x14, x8, x12)

inst_4285:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf007fff; valaddr_reg:x13; val_offset:12792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12792*FLEN/8, x14, x8, x12)

inst_4286:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fc000; valaddr_reg:x13; val_offset:12795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12795*FLEN/8, x14, x8, x12)

inst_4287:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf003fff; valaddr_reg:x13; val_offset:12798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12798*FLEN/8, x14, x8, x12)

inst_4288:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fe000; valaddr_reg:x13; val_offset:12801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12801*FLEN/8, x14, x8, x12)

inst_4289:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf001fff; valaddr_reg:x13; val_offset:12804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12804*FLEN/8, x14, x8, x12)

inst_4290:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ff000; valaddr_reg:x13; val_offset:12807*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12807*FLEN/8, x14, x8, x12)

inst_4291:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf000fff; valaddr_reg:x13; val_offset:12810*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12810*FLEN/8, x14, x8, x12)

inst_4292:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ff800; valaddr_reg:x13; val_offset:12813*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12813*FLEN/8, x14, x8, x12)

inst_4293:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf0007ff; valaddr_reg:x13; val_offset:12816*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12816*FLEN/8, x14, x8, x12)

inst_4294:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ffc00; valaddr_reg:x13; val_offset:12819*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12819*FLEN/8, x14, x8, x12)

inst_4295:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf0003ff; valaddr_reg:x13; val_offset:12822*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12822*FLEN/8, x14, x8, x12)

inst_4296:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ffe00; valaddr_reg:x13; val_offset:12825*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12825*FLEN/8, x14, x8, x12)

inst_4297:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf0001ff; valaddr_reg:x13; val_offset:12828*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12828*FLEN/8, x14, x8, x12)

inst_4298:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fff00; valaddr_reg:x13; val_offset:12831*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12831*FLEN/8, x14, x8, x12)

inst_4299:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf0000ff; valaddr_reg:x13; val_offset:12834*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12834*FLEN/8, x14, x8, x12)

inst_4300:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fff80; valaddr_reg:x13; val_offset:12837*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12837*FLEN/8, x14, x8, x12)

inst_4301:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf00007f; valaddr_reg:x13; val_offset:12840*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12840*FLEN/8, x14, x8, x12)

inst_4302:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fffc0; valaddr_reg:x13; val_offset:12843*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12843*FLEN/8, x14, x8, x12)

inst_4303:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf00003f; valaddr_reg:x13; val_offset:12846*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12846*FLEN/8, x14, x8, x12)

inst_4304:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7fffe0; valaddr_reg:x13; val_offset:12849*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12849*FLEN/8, x14, x8, x12)

inst_4305:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf00001f; valaddr_reg:x13; val_offset:12852*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12852*FLEN/8, x14, x8, x12)

inst_4306:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ffff0; valaddr_reg:x13; val_offset:12855*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12855*FLEN/8, x14, x8, x12)

inst_4307:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf00000f; valaddr_reg:x13; val_offset:12858*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12858*FLEN/8, x14, x8, x12)

inst_4308:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ffff8; valaddr_reg:x13; val_offset:12861*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12861*FLEN/8, x14, x8, x12)

inst_4309:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf000007; valaddr_reg:x13; val_offset:12864*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12864*FLEN/8, x14, x8, x12)

inst_4310:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ffffc; valaddr_reg:x13; val_offset:12867*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12867*FLEN/8, x14, x8, x12)

inst_4311:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf000003; valaddr_reg:x13; val_offset:12870*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12870*FLEN/8, x14, x8, x12)

inst_4312:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf7ffffe; valaddr_reg:x13; val_offset:12873*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12873*FLEN/8, x14, x8, x12)

inst_4313:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0xf000001; valaddr_reg:x13; val_offset:12876*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12876*FLEN/8, x14, x8, x12)

inst_4314:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3ffffff8; valaddr_reg:x13; val_offset:12879*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12879*FLEN/8, x14, x8, x12)

inst_4315:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3f800007; valaddr_reg:x13; val_offset:12882*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12882*FLEN/8, x14, x8, x12)

inst_4316:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3ffffffc; valaddr_reg:x13; val_offset:12885*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12885*FLEN/8, x14, x8, x12)

inst_4317:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3f800003; valaddr_reg:x13; val_offset:12888*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12888*FLEN/8, x14, x8, x12)

inst_4318:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3ffffffe; valaddr_reg:x13; val_offset:12891*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12891*FLEN/8, x14, x8, x12)

inst_4319:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3f800001; valaddr_reg:x13; val_offset:12894*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12894*FLEN/8, x14, x8, x12)

inst_4320:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fb6db6d; valaddr_reg:x13; val_offset:12897*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12897*FLEN/8, x14, x8, x12)

inst_4321:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fedb6db; valaddr_reg:x13; val_offset:12900*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12900*FLEN/8, x14, x8, x12)

inst_4322:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3f999999; valaddr_reg:x13; val_offset:12903*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12903*FLEN/8, x14, x8, x12)

inst_4323:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fe66666; valaddr_reg:x13; val_offset:12906*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12906*FLEN/8, x14, x8, x12)

inst_4324:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fbbbbbb; valaddr_reg:x13; val_offset:12909*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12909*FLEN/8, x14, x8, x12)

inst_4325:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fc44444; valaddr_reg:x13; val_offset:12912*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12912*FLEN/8, x14, x8, x12)

inst_4326:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fa49249; valaddr_reg:x13; val_offset:12915*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12915*FLEN/8, x14, x8, x12)

inst_4327:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fdb6db6; valaddr_reg:x13; val_offset:12918*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12918*FLEN/8, x14, x8, x12)

inst_4328:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fb33333; valaddr_reg:x13; val_offset:12921*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12921*FLEN/8, x14, x8, x12)

inst_4329:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x03 and fm2 == 0x75484b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d0597cb; op2val:0x1f5484b;
op3val:0x3fcccccc; valaddr_reg:x13; val_offset:12924*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12924*FLEN/8, x14, x8, x12)

inst_4330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000000; valaddr_reg:x13; val_offset:12927*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12927*FLEN/8, x14, x8, x12)

inst_4331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fffff; valaddr_reg:x13; val_offset:12930*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12930*FLEN/8, x14, x8, x12)

inst_4332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d400000; valaddr_reg:x13; val_offset:12933*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12933*FLEN/8, x14, x8, x12)

inst_4333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d3fffff; valaddr_reg:x13; val_offset:12936*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12936*FLEN/8, x14, x8, x12)

inst_4334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d600000; valaddr_reg:x13; val_offset:12939*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12939*FLEN/8, x14, x8, x12)

inst_4335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d1fffff; valaddr_reg:x13; val_offset:12942*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12942*FLEN/8, x14, x8, x12)

inst_4336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d700000; valaddr_reg:x13; val_offset:12945*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12945*FLEN/8, x14, x8, x12)

inst_4337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0fffff; valaddr_reg:x13; val_offset:12948*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12948*FLEN/8, x14, x8, x12)

inst_4338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d780000; valaddr_reg:x13; val_offset:12951*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12951*FLEN/8, x14, x8, x12)

inst_4339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d07ffff; valaddr_reg:x13; val_offset:12954*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12954*FLEN/8, x14, x8, x12)

inst_4340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7c0000; valaddr_reg:x13; val_offset:12957*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12957*FLEN/8, x14, x8, x12)

inst_4341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d03ffff; valaddr_reg:x13; val_offset:12960*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12960*FLEN/8, x14, x8, x12)

inst_4342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7e0000; valaddr_reg:x13; val_offset:12963*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12963*FLEN/8, x14, x8, x12)

inst_4343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d01ffff; valaddr_reg:x13; val_offset:12966*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12966*FLEN/8, x14, x8, x12)

inst_4344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7f0000; valaddr_reg:x13; val_offset:12969*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12969*FLEN/8, x14, x8, x12)

inst_4345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00ffff; valaddr_reg:x13; val_offset:12972*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12972*FLEN/8, x14, x8, x12)

inst_4346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7f8000; valaddr_reg:x13; val_offset:12975*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12975*FLEN/8, x14, x8, x12)

inst_4347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d007fff; valaddr_reg:x13; val_offset:12978*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12978*FLEN/8, x14, x8, x12)

inst_4348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fc000; valaddr_reg:x13; val_offset:12981*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12981*FLEN/8, x14, x8, x12)

inst_4349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d003fff; valaddr_reg:x13; val_offset:12984*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12984*FLEN/8, x14, x8, x12)

inst_4350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fe000; valaddr_reg:x13; val_offset:12987*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12987*FLEN/8, x14, x8, x12)

inst_4351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d001fff; valaddr_reg:x13; val_offset:12990*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12990*FLEN/8, x14, x8, x12)

inst_4352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ff000; valaddr_reg:x13; val_offset:12993*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12993*FLEN/8, x14, x8, x12)

inst_4353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000fff; valaddr_reg:x13; val_offset:12996*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12996*FLEN/8, x14, x8, x12)

inst_4354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ff800; valaddr_reg:x13; val_offset:12999*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 12999*FLEN/8, x14, x8, x12)

inst_4355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0007ff; valaddr_reg:x13; val_offset:13002*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13002*FLEN/8, x14, x8, x12)

inst_4356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffc00; valaddr_reg:x13; val_offset:13005*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13005*FLEN/8, x14, x8, x12)

inst_4357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0003ff; valaddr_reg:x13; val_offset:13008*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13008*FLEN/8, x14, x8, x12)

inst_4358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffe00; valaddr_reg:x13; val_offset:13011*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13011*FLEN/8, x14, x8, x12)

inst_4359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0001ff; valaddr_reg:x13; val_offset:13014*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13014*FLEN/8, x14, x8, x12)

inst_4360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fff00; valaddr_reg:x13; val_offset:13017*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13017*FLEN/8, x14, x8, x12)

inst_4361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0000ff; valaddr_reg:x13; val_offset:13020*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13020*FLEN/8, x14, x8, x12)

inst_4362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fff80; valaddr_reg:x13; val_offset:13023*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13023*FLEN/8, x14, x8, x12)

inst_4363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00007f; valaddr_reg:x13; val_offset:13026*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13026*FLEN/8, x14, x8, x12)

inst_4364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fffc0; valaddr_reg:x13; val_offset:13029*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13029*FLEN/8, x14, x8, x12)

inst_4365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00003f; valaddr_reg:x13; val_offset:13032*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13032*FLEN/8, x14, x8, x12)

inst_4366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fffe0; valaddr_reg:x13; val_offset:13035*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13035*FLEN/8, x14, x8, x12)

inst_4367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00001f; valaddr_reg:x13; val_offset:13038*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13038*FLEN/8, x14, x8, x12)

inst_4368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffff0; valaddr_reg:x13; val_offset:13041*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13041*FLEN/8, x14, x8, x12)

inst_4369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00000f; valaddr_reg:x13; val_offset:13044*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13044*FLEN/8, x14, x8, x12)

inst_4370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffff8; valaddr_reg:x13; val_offset:13047*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13047*FLEN/8, x14, x8, x12)

inst_4371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000007; valaddr_reg:x13; val_offset:13050*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13050*FLEN/8, x14, x8, x12)

inst_4372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffffc; valaddr_reg:x13; val_offset:13053*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13053*FLEN/8, x14, x8, x12)

inst_4373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000003; valaddr_reg:x13; val_offset:13056*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13056*FLEN/8, x14, x8, x12)

inst_4374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffffe; valaddr_reg:x13; val_offset:13059*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13059*FLEN/8, x14, x8, x12)

inst_4375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000001; valaddr_reg:x13; val_offset:13062*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13062*FLEN/8, x14, x8, x12)

inst_4376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3ffffff8; valaddr_reg:x13; val_offset:13065*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13065*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_34)
inst_4377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f800007; valaddr_reg:x13; val_offset:13068*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13068*FLEN/8, x14, x8, x12)

inst_4378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3ffffffc; valaddr_reg:x13; val_offset:13071*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13071*FLEN/8, x14, x8, x12)

inst_4379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f800003; valaddr_reg:x13; val_offset:13074*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13074*FLEN/8, x14, x8, x12)

inst_4380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3ffffffe; valaddr_reg:x13; val_offset:13077*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13077*FLEN/8, x14, x8, x12)

inst_4381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f800001; valaddr_reg:x13; val_offset:13080*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13080*FLEN/8, x14, x8, x12)

inst_4382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fb6db6d; valaddr_reg:x13; val_offset:13083*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13083*FLEN/8, x14, x8, x12)

inst_4383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fedb6db; valaddr_reg:x13; val_offset:13086*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13086*FLEN/8, x14, x8, x12)

inst_4384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f999999; valaddr_reg:x13; val_offset:13089*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13089*FLEN/8, x14, x8, x12)

inst_4385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fe66666; valaddr_reg:x13; val_offset:13092*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13092*FLEN/8, x14, x8, x12)

inst_4386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fbbbbbb; valaddr_reg:x13; val_offset:13095*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13095*FLEN/8, x14, x8, x12)

inst_4387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fc44444; valaddr_reg:x13; val_offset:13098*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13098*FLEN/8, x14, x8, x12)

inst_4388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fa49249; valaddr_reg:x13; val_offset:13101*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13101*FLEN/8, x14, x8, x12)

inst_4389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fdb6db6; valaddr_reg:x13; val_offset:13104*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13104*FLEN/8, x14, x8, x12)

inst_4390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fb33333; valaddr_reg:x13; val_offset:13107*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13107*FLEN/8, x14, x8, x12)

inst_4391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fcccccc; valaddr_reg:x13; val_offset:13110*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13110*FLEN/8, x14, x8, x12)

inst_4392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000000; valaddr_reg:x13; val_offset:13113*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13113*FLEN/8, x14, x8, x12)

inst_4393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fffff; valaddr_reg:x13; val_offset:13116*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13116*FLEN/8, x14, x8, x12)

inst_4394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f400000; valaddr_reg:x13; val_offset:13119*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13119*FLEN/8, x14, x8, x12)

inst_4395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f3fffff; valaddr_reg:x13; val_offset:13122*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13122*FLEN/8, x14, x8, x12)

inst_4396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f600000; valaddr_reg:x13; val_offset:13125*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13125*FLEN/8, x14, x8, x12)

inst_4397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f1fffff; valaddr_reg:x13; val_offset:13128*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13128*FLEN/8, x14, x8, x12)

inst_4398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f700000; valaddr_reg:x13; val_offset:13131*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13131*FLEN/8, x14, x8, x12)

inst_4399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0fffff; valaddr_reg:x13; val_offset:13134*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13134*FLEN/8, x14, x8, x12)

inst_4400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f780000; valaddr_reg:x13; val_offset:13137*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13137*FLEN/8, x14, x8, x12)

inst_4401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f07ffff; valaddr_reg:x13; val_offset:13140*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13140*FLEN/8, x14, x8, x12)

inst_4402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7c0000; valaddr_reg:x13; val_offset:13143*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13143*FLEN/8, x14, x8, x12)

inst_4403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f03ffff; valaddr_reg:x13; val_offset:13146*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13146*FLEN/8, x14, x8, x12)

inst_4404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7e0000; valaddr_reg:x13; val_offset:13149*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13149*FLEN/8, x14, x8, x12)

inst_4405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f01ffff; valaddr_reg:x13; val_offset:13152*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13152*FLEN/8, x14, x8, x12)

inst_4406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7f0000; valaddr_reg:x13; val_offset:13155*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13155*FLEN/8, x14, x8, x12)

inst_4407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00ffff; valaddr_reg:x13; val_offset:13158*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13158*FLEN/8, x14, x8, x12)

inst_4408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7f8000; valaddr_reg:x13; val_offset:13161*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13161*FLEN/8, x14, x8, x12)

inst_4409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f007fff; valaddr_reg:x13; val_offset:13164*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13164*FLEN/8, x14, x8, x12)

inst_4410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fc000; valaddr_reg:x13; val_offset:13167*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13167*FLEN/8, x14, x8, x12)

inst_4411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f003fff; valaddr_reg:x13; val_offset:13170*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13170*FLEN/8, x14, x8, x12)

inst_4412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fe000; valaddr_reg:x13; val_offset:13173*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13173*FLEN/8, x14, x8, x12)

inst_4413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f001fff; valaddr_reg:x13; val_offset:13176*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13176*FLEN/8, x14, x8, x12)

inst_4414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ff000; valaddr_reg:x13; val_offset:13179*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13179*FLEN/8, x14, x8, x12)

inst_4415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000fff; valaddr_reg:x13; val_offset:13182*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13182*FLEN/8, x14, x8, x12)

inst_4416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ff800; valaddr_reg:x13; val_offset:13185*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13185*FLEN/8, x14, x8, x12)

inst_4417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0007ff; valaddr_reg:x13; val_offset:13188*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13188*FLEN/8, x14, x8, x12)

inst_4418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffc00; valaddr_reg:x13; val_offset:13191*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13191*FLEN/8, x14, x8, x12)

inst_4419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0003ff; valaddr_reg:x13; val_offset:13194*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13194*FLEN/8, x14, x8, x12)

inst_4420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffe00; valaddr_reg:x13; val_offset:13197*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13197*FLEN/8, x14, x8, x12)

inst_4421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0001ff; valaddr_reg:x13; val_offset:13200*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13200*FLEN/8, x14, x8, x12)

inst_4422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fff00; valaddr_reg:x13; val_offset:13203*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13203*FLEN/8, x14, x8, x12)

inst_4423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0000ff; valaddr_reg:x13; val_offset:13206*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13206*FLEN/8, x14, x8, x12)

inst_4424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fff80; valaddr_reg:x13; val_offset:13209*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13209*FLEN/8, x14, x8, x12)

inst_4425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00007f; valaddr_reg:x13; val_offset:13212*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13212*FLEN/8, x14, x8, x12)

inst_4426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fffc0; valaddr_reg:x13; val_offset:13215*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13215*FLEN/8, x14, x8, x12)

inst_4427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00003f; valaddr_reg:x13; val_offset:13218*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13218*FLEN/8, x14, x8, x12)

inst_4428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fffe0; valaddr_reg:x13; val_offset:13221*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13221*FLEN/8, x14, x8, x12)

inst_4429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00001f; valaddr_reg:x13; val_offset:13224*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13224*FLEN/8, x14, x8, x12)

inst_4430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffff0; valaddr_reg:x13; val_offset:13227*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13227*FLEN/8, x14, x8, x12)

inst_4431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00000f; valaddr_reg:x13; val_offset:13230*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13230*FLEN/8, x14, x8, x12)

inst_4432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffff8; valaddr_reg:x13; val_offset:13233*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13233*FLEN/8, x14, x8, x12)

inst_4433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000007; valaddr_reg:x13; val_offset:13236*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13236*FLEN/8, x14, x8, x12)

inst_4434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffffc; valaddr_reg:x13; val_offset:13239*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13239*FLEN/8, x14, x8, x12)

inst_4435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000003; valaddr_reg:x13; val_offset:13242*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13242*FLEN/8, x14, x8, x12)

inst_4436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffffe; valaddr_reg:x13; val_offset:13245*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13245*FLEN/8, x14, x8, x12)

inst_4437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000001; valaddr_reg:x13; val_offset:13248*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13248*FLEN/8, x14, x8, x12)

inst_4438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3ffffff8; valaddr_reg:x13; val_offset:13251*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13251*FLEN/8, x14, x8, x12)

inst_4439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f800007; valaddr_reg:x13; val_offset:13254*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13254*FLEN/8, x14, x8, x12)

inst_4440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3ffffffc; valaddr_reg:x13; val_offset:13257*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13257*FLEN/8, x14, x8, x12)

inst_4441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f800003; valaddr_reg:x13; val_offset:13260*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13260*FLEN/8, x14, x8, x12)

inst_4442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3ffffffe; valaddr_reg:x13; val_offset:13263*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13263*FLEN/8, x14, x8, x12)

inst_4443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f800001; valaddr_reg:x13; val_offset:13266*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13266*FLEN/8, x14, x8, x12)

inst_4444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fb6db6d; valaddr_reg:x13; val_offset:13269*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13269*FLEN/8, x14, x8, x12)

inst_4445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fedb6db; valaddr_reg:x13; val_offset:13272*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13272*FLEN/8, x14, x8, x12)

inst_4446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f999999; valaddr_reg:x13; val_offset:13275*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13275*FLEN/8, x14, x8, x12)

inst_4447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fe66666; valaddr_reg:x13; val_offset:13278*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13278*FLEN/8, x14, x8, x12)

inst_4448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fbbbbbb; valaddr_reg:x13; val_offset:13281*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13281*FLEN/8, x14, x8, x12)

inst_4449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fc44444; valaddr_reg:x13; val_offset:13284*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13284*FLEN/8, x14, x8, x12)

inst_4450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fa49249; valaddr_reg:x13; val_offset:13287*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13287*FLEN/8, x14, x8, x12)

inst_4451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fdb6db6; valaddr_reg:x13; val_offset:13290*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13290*FLEN/8, x14, x8, x12)

inst_4452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fb33333; valaddr_reg:x13; val_offset:13293*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13293*FLEN/8, x14, x8, x12)

inst_4453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fcccccc; valaddr_reg:x13; val_offset:13296*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13296*FLEN/8, x14, x8, x12)

inst_4454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800000; valaddr_reg:x13; val_offset:13299*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13299*FLEN/8, x14, x8, x12)

inst_4455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffffff; valaddr_reg:x13; val_offset:13302*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13302*FLEN/8, x14, x8, x12)

inst_4456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fc00000; valaddr_reg:x13; val_offset:13305*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13305*FLEN/8, x14, x8, x12)

inst_4457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fbfffff; valaddr_reg:x13; val_offset:13308*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13308*FLEN/8, x14, x8, x12)

inst_4458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fe00000; valaddr_reg:x13; val_offset:13311*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13311*FLEN/8, x14, x8, x12)

inst_4459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f9fffff; valaddr_reg:x13; val_offset:13314*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13314*FLEN/8, x14, x8, x12)

inst_4460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ff00000; valaddr_reg:x13; val_offset:13317*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13317*FLEN/8, x14, x8, x12)

inst_4461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8fffff; valaddr_reg:x13; val_offset:13320*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13320*FLEN/8, x14, x8, x12)

inst_4462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ff80000; valaddr_reg:x13; val_offset:13323*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13323*FLEN/8, x14, x8, x12)

inst_4463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f87ffff; valaddr_reg:x13; val_offset:13326*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13326*FLEN/8, x14, x8, x12)

inst_4464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffc0000; valaddr_reg:x13; val_offset:13329*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13329*FLEN/8, x14, x8, x12)

inst_4465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f83ffff; valaddr_reg:x13; val_offset:13332*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13332*FLEN/8, x14, x8, x12)

inst_4466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffe0000; valaddr_reg:x13; val_offset:13335*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13335*FLEN/8, x14, x8, x12)

inst_4467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f81ffff; valaddr_reg:x13; val_offset:13338*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13338*FLEN/8, x14, x8, x12)

inst_4468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fff0000; valaddr_reg:x13; val_offset:13341*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13341*FLEN/8, x14, x8, x12)

inst_4469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80ffff; valaddr_reg:x13; val_offset:13344*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13344*FLEN/8, x14, x8, x12)

inst_4470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fff8000; valaddr_reg:x13; val_offset:13347*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13347*FLEN/8, x14, x8, x12)

inst_4471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f807fff; valaddr_reg:x13; val_offset:13350*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13350*FLEN/8, x14, x8, x12)

inst_4472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffc000; valaddr_reg:x13; val_offset:13353*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13353*FLEN/8, x14, x8, x12)

inst_4473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f803fff; valaddr_reg:x13; val_offset:13356*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13356*FLEN/8, x14, x8, x12)

inst_4474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffe000; valaddr_reg:x13; val_offset:13359*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13359*FLEN/8, x14, x8, x12)

inst_4475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f801fff; valaddr_reg:x13; val_offset:13362*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13362*FLEN/8, x14, x8, x12)

inst_4476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffff000; valaddr_reg:x13; val_offset:13365*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13365*FLEN/8, x14, x8, x12)

inst_4477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800fff; valaddr_reg:x13; val_offset:13368*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13368*FLEN/8, x14, x8, x12)

inst_4478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffff800; valaddr_reg:x13; val_offset:13371*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13371*FLEN/8, x14, x8, x12)

inst_4479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8007ff; valaddr_reg:x13; val_offset:13374*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13374*FLEN/8, x14, x8, x12)

inst_4480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffc00; valaddr_reg:x13; val_offset:13377*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13377*FLEN/8, x14, x8, x12)

inst_4481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8003ff; valaddr_reg:x13; val_offset:13380*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13380*FLEN/8, x14, x8, x12)

inst_4482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffe00; valaddr_reg:x13; val_offset:13383*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13383*FLEN/8, x14, x8, x12)

inst_4483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8001ff; valaddr_reg:x13; val_offset:13386*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13386*FLEN/8, x14, x8, x12)

inst_4484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffff00; valaddr_reg:x13; val_offset:13389*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13389*FLEN/8, x14, x8, x12)

inst_4485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8000ff; valaddr_reg:x13; val_offset:13392*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13392*FLEN/8, x14, x8, x12)

inst_4486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffff80; valaddr_reg:x13; val_offset:13395*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13395*FLEN/8, x14, x8, x12)

inst_4487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80007f; valaddr_reg:x13; val_offset:13398*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13398*FLEN/8, x14, x8, x12)

inst_4488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffffc0; valaddr_reg:x13; val_offset:13401*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13401*FLEN/8, x14, x8, x12)

inst_4489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80003f; valaddr_reg:x13; val_offset:13404*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13404*FLEN/8, x14, x8, x12)

inst_4490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffffe0; valaddr_reg:x13; val_offset:13407*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13407*FLEN/8, x14, x8, x12)

inst_4491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80001f; valaddr_reg:x13; val_offset:13410*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13410*FLEN/8, x14, x8, x12)

inst_4492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffff0; valaddr_reg:x13; val_offset:13413*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13413*FLEN/8, x14, x8, x12)

inst_4493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80000f; valaddr_reg:x13; val_offset:13416*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13416*FLEN/8, x14, x8, x12)

inst_4494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffff8; valaddr_reg:x13; val_offset:13419*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13419*FLEN/8, x14, x8, x12)

inst_4495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800007; valaddr_reg:x13; val_offset:13422*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13422*FLEN/8, x14, x8, x12)

inst_4496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffffc; valaddr_reg:x13; val_offset:13425*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13425*FLEN/8, x14, x8, x12)

inst_4497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800003; valaddr_reg:x13; val_offset:13428*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13428*FLEN/8, x14, x8, x12)

inst_4498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffffe; valaddr_reg:x13; val_offset:13431*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13431*FLEN/8, x14, x8, x12)

inst_4499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800001; valaddr_reg:x13; val_offset:13434*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13434*FLEN/8, x14, x8, x12)

inst_4500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3ffffff8; valaddr_reg:x13; val_offset:13437*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13437*FLEN/8, x14, x8, x12)

inst_4501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f800007; valaddr_reg:x13; val_offset:13440*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13440*FLEN/8, x14, x8, x12)

inst_4502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3ffffffc; valaddr_reg:x13; val_offset:13443*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13443*FLEN/8, x14, x8, x12)

inst_4503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f800003; valaddr_reg:x13; val_offset:13446*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13446*FLEN/8, x14, x8, x12)

inst_4504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3ffffffe; valaddr_reg:x13; val_offset:13449*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13449*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_35)
inst_4505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f800001; valaddr_reg:x13; val_offset:13452*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13452*FLEN/8, x14, x8, x12)

inst_4506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fb6db6d; valaddr_reg:x13; val_offset:13455*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13455*FLEN/8, x14, x8, x12)

inst_4507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fedb6db; valaddr_reg:x13; val_offset:13458*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13458*FLEN/8, x14, x8, x12)

inst_4508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f999999; valaddr_reg:x13; val_offset:13461*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13461*FLEN/8, x14, x8, x12)

inst_4509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fe66666; valaddr_reg:x13; val_offset:13464*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13464*FLEN/8, x14, x8, x12)

inst_4510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fbbbbbb; valaddr_reg:x13; val_offset:13467*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13467*FLEN/8, x14, x8, x12)

inst_4511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fc44444; valaddr_reg:x13; val_offset:13470*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13470*FLEN/8, x14, x8, x12)

inst_4512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fa49249; valaddr_reg:x13; val_offset:13473*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13473*FLEN/8, x14, x8, x12)

inst_4513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fdb6db6; valaddr_reg:x13; val_offset:13476*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13476*FLEN/8, x14, x8, x12)

inst_4514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fb33333; valaddr_reg:x13; val_offset:13479*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13479*FLEN/8, x14, x8, x12)

inst_4515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fcccccc; valaddr_reg:x13; val_offset:13482*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13482*FLEN/8, x14, x8, x12)

inst_4516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20000000; valaddr_reg:x13; val_offset:13485*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13485*FLEN/8, x14, x8, x12)

inst_4517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fffff; valaddr_reg:x13; val_offset:13488*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13488*FLEN/8, x14, x8, x12)

inst_4518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20400000; valaddr_reg:x13; val_offset:13491*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13491*FLEN/8, x14, x8, x12)

inst_4519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x203fffff; valaddr_reg:x13; val_offset:13494*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13494*FLEN/8, x14, x8, x12)

inst_4520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20600000; valaddr_reg:x13; val_offset:13497*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13497*FLEN/8, x14, x8, x12)

inst_4521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x201fffff; valaddr_reg:x13; val_offset:13500*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13500*FLEN/8, x14, x8, x12)

inst_4522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20700000; valaddr_reg:x13; val_offset:13503*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13503*FLEN/8, x14, x8, x12)

inst_4523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x200fffff; valaddr_reg:x13; val_offset:13506*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13506*FLEN/8, x14, x8, x12)

inst_4524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20780000; valaddr_reg:x13; val_offset:13509*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13509*FLEN/8, x14, x8, x12)

inst_4525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2007ffff; valaddr_reg:x13; val_offset:13512*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13512*FLEN/8, x14, x8, x12)

inst_4526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207c0000; valaddr_reg:x13; val_offset:13515*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13515*FLEN/8, x14, x8, x12)

inst_4527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2003ffff; valaddr_reg:x13; val_offset:13518*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13518*FLEN/8, x14, x8, x12)

inst_4528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207e0000; valaddr_reg:x13; val_offset:13521*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13521*FLEN/8, x14, x8, x12)

inst_4529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2001ffff; valaddr_reg:x13; val_offset:13524*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13524*FLEN/8, x14, x8, x12)

inst_4530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207f0000; valaddr_reg:x13; val_offset:13527*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13527*FLEN/8, x14, x8, x12)

inst_4531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2000ffff; valaddr_reg:x13; val_offset:13530*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13530*FLEN/8, x14, x8, x12)

inst_4532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207f8000; valaddr_reg:x13; val_offset:13533*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13533*FLEN/8, x14, x8, x12)

inst_4533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20007fff; valaddr_reg:x13; val_offset:13536*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13536*FLEN/8, x14, x8, x12)

inst_4534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fc000; valaddr_reg:x13; val_offset:13539*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13539*FLEN/8, x14, x8, x12)

inst_4535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20003fff; valaddr_reg:x13; val_offset:13542*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13542*FLEN/8, x14, x8, x12)

inst_4536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fe000; valaddr_reg:x13; val_offset:13545*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13545*FLEN/8, x14, x8, x12)

inst_4537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20001fff; valaddr_reg:x13; val_offset:13548*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13548*FLEN/8, x14, x8, x12)

inst_4538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ff000; valaddr_reg:x13; val_offset:13551*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13551*FLEN/8, x14, x8, x12)

inst_4539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20000fff; valaddr_reg:x13; val_offset:13554*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13554*FLEN/8, x14, x8, x12)

inst_4540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ff800; valaddr_reg:x13; val_offset:13557*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13557*FLEN/8, x14, x8, x12)

inst_4541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x200007ff; valaddr_reg:x13; val_offset:13560*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13560*FLEN/8, x14, x8, x12)

inst_4542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ffc00; valaddr_reg:x13; val_offset:13563*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13563*FLEN/8, x14, x8, x12)

inst_4543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x200003ff; valaddr_reg:x13; val_offset:13566*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13566*FLEN/8, x14, x8, x12)

inst_4544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ffe00; valaddr_reg:x13; val_offset:13569*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13569*FLEN/8, x14, x8, x12)

inst_4545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x200001ff; valaddr_reg:x13; val_offset:13572*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13572*FLEN/8, x14, x8, x12)

inst_4546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fff00; valaddr_reg:x13; val_offset:13575*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13575*FLEN/8, x14, x8, x12)

inst_4547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x200000ff; valaddr_reg:x13; val_offset:13578*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13578*FLEN/8, x14, x8, x12)

inst_4548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fff80; valaddr_reg:x13; val_offset:13581*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13581*FLEN/8, x14, x8, x12)

inst_4549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2000007f; valaddr_reg:x13; val_offset:13584*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13584*FLEN/8, x14, x8, x12)

inst_4550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fffc0; valaddr_reg:x13; val_offset:13587*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13587*FLEN/8, x14, x8, x12)

inst_4551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2000003f; valaddr_reg:x13; val_offset:13590*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13590*FLEN/8, x14, x8, x12)

inst_4552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207fffe0; valaddr_reg:x13; val_offset:13593*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13593*FLEN/8, x14, x8, x12)

inst_4553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2000001f; valaddr_reg:x13; val_offset:13596*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13596*FLEN/8, x14, x8, x12)

inst_4554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ffff0; valaddr_reg:x13; val_offset:13599*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13599*FLEN/8, x14, x8, x12)

inst_4555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x2000000f; valaddr_reg:x13; val_offset:13602*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13602*FLEN/8, x14, x8, x12)

inst_4556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ffff8; valaddr_reg:x13; val_offset:13605*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13605*FLEN/8, x14, x8, x12)

inst_4557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20000007; valaddr_reg:x13; val_offset:13608*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13608*FLEN/8, x14, x8, x12)

inst_4558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ffffc; valaddr_reg:x13; val_offset:13611*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13611*FLEN/8, x14, x8, x12)

inst_4559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x20000003; valaddr_reg:x13; val_offset:13614*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13614*FLEN/8, x14, x8, x12)

inst_4560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x788209 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41edf2 and fs3 == 0 and fe3 == 0x40 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef88209; op2val:0x41edf2;
op3val:0x207ffffe; valaddr_reg:x13; val_offset:13617*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 13617*FLEN/8, x14, x8, x12)

#endif
RVTEST_CODE_END
RVMODEL_HALT
RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2371878912,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2367684607,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2372927488,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366636031,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366111743,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365849599,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365718527,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365652991,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365620223,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365603839,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365595647,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365591551,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365589503,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365588479,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587967,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587711,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587583,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587519,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587487,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587471,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587463,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587459,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587457,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2105856112,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130633227,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364672,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753279,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558976,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558975,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2388656128,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2384461823,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2389704704,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2383413247,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390228992,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382888959,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390491136,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382626815,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390622208,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382495743,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390687744,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382430207,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390720512,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382397439,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390736896,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382381055,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390745088,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382372863,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390749184,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382368767,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390751232,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382366719,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752256,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365695,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752768,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365183,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753024,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364927,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753152,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364799,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753216,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364735,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753248,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364703,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753264,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364687,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753272,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364679,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753276,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364675,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753278,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364673,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2108016716,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753280,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141887,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947584,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947583,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2397044736,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2392850431,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398093312,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391801855,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398617600,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391277567,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398879744,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391015423,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399010816,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390884351,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399076352,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390818815,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399109120,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390786047,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399125504,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390769663,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399133696,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390761471,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399137792,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390757375,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399139840,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390755327,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399140864,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390754303,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141376,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753791,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141632,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753535,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141760,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753407,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141824,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753343,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141856,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753311,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141872,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753295,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141880,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753287,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141884,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753283,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141886,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753281,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2113630409,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530496,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919103,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724800,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724799,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2413821952,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2409627647,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2414870528,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408579071,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415394816,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408054783,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415656960,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407792639,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415788032,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407661567,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415853568,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407596031,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415886336,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407563263,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415902720,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407546879,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415910912,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407538687,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415915008,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407534591,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415917056,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407532543,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918080,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407531519,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918592,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407531007,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918848,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530751,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918976,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530623,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919040,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530559,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919072,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530527,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919088,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530511,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919096,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530503,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919100,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530499,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919102,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530497,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2123253723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919104,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307711,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113408,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113407,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2422210560,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2418016255,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423259136,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416967679,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423783424,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416443391,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424045568,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416181247,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424176640,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416050175,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424242176,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415984639,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424274944,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415951871,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424291328,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415935487,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424299520,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415927295,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424303616,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415923199,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424305664,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415921151,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424306688,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415920127,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307200,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919615,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307456,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919359,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307584,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919231,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307648,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919167,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307680,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919135,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307696,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919119,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307704,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919111,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307708,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919107,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307710,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919105,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046847,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(255852544,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(255852543,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(257949696,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(253755391,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(258998272,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(259522560,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(252182527,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(259784704,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251920383,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(259915776,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251789311,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(259981312,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251723775,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260014080,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260030464,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260038656,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260042752,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260044800,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260045824,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046336,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046592,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046720,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046784,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046816,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046832,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046840,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046844,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(260046846,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(32852043,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152000,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540607,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2101346304,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2101346303,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2103443456,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2099249151,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2104492032,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2098200575,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105016320,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097676287,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105278464,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097414143,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105409536,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097283071,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105475072,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097217535,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105507840,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097184767,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105524224,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097168383,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105532416,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097160191,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105536512,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097156095,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105538560,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097154047,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105539584,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097153023,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540096,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152511,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540352,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152255,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540480,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152127,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540544,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152063,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540576,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152031,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540592,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152015,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540600,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152007,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540604,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152003,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540606,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152001,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093696,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482303,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(524288000,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(524287999,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(526385152,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(522190847,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(527433728,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(521142271,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(527958016,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520617983,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528220160,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520355839,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528351232,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520224767,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528416768,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520159231,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528449536,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520126463,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528465920,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520110079,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528474112,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520101887,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528478208,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520097791,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528480256,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520095743,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528481280,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520094719,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528481792,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520094207,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482048,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093951,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482176,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093823,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482240,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093759,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482272,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093727,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482288,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093711,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482296,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093703,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482300,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093699,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482302,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093697,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482304,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870911,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(532676608,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(532676607,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(534773760,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(530579455,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(535822336,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(529530879,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536346624,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(529006591,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536608768,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528744447,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536739840,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528613375,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536805376,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528547839,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536838144,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528515071,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536854528,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528498687,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536862720,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528490495,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536866816,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528486399,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536868864,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528484351,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536869888,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528483327,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870400,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482815,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870656,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482559,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870784,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482431,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870848,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482367,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870880,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482335,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870896,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482319,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870904,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482311,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870908,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482307,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870910,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482305,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870912,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259519,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(541065216,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(541065215,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(543162368,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(538968063,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(544210944,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(537919487,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(544735232,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(537395199,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(544997376,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(537133055,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545128448,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(537001983,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545193984,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536936447,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545226752,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536903679,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545243136,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536887295,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545251328,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536879103,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545255424,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536875007,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545257472,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536872959,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545258496,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536871935,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259008,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536871423,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259264,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536871167,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259392,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536871039,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259456,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870975,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259488,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870943,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259504,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870927,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259512,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870919,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259516,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870915,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(545259518,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(536870913,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130215433,32,FLEN)
NAN_BOXED(4320754,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259520,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648127,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(549453824,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(549453823,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(551550976,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(547356671,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(552599552,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(546308095,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553123840,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545783807,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553385984,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545521663,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553517056,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545390591,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553582592,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545325055,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553615360,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545292287,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553631744,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545275903,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553639936,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545267711,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553644032,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545263615,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553646080,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545261567,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553647104,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545260543,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_12:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_13:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_14:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_15:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_16:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_17:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_18:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_19:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_20:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_21:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_22:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_23:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_24:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_25:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_26:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_27:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_28:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_29:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_30:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_31:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_32:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_33:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_34:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_35:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_36:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_37:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_38:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_39:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_40:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_41:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_42:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_43:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_44:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_45:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_46:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_47:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_48:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_49:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_50:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_51:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_52:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_53:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_54:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_55:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_56:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_57:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_58:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_59:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_60:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_61:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_62:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_63:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_64:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_65:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_66:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_67:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_68:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_69:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_70:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_71:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_72:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_73:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_74:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_75:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_76:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_77:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_78:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_79:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_80:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_81:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_82:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_83:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_84:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_85:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_86:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_87:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_88:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_89:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_90:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_91:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_92:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_93:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_94:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_95:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_96:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_97:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_98:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_99:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_100:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_101:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_102:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_103:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_104:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_105:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_106:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_107:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_108:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_109:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_110:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_111:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_112:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_113:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_114:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_115:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_116:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_117:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_118:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_119:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_120:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_121:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_122:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_123:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_124:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_125:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_126:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_127:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_128:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_129:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_130:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_131:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_132:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_133:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_134:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_135:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_136:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_137:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_138:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_139:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_140:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_141:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_142:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_143:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_144:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_145:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_146:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_147:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_148:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_149:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_150:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_151:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_152:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_153:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_154:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_155:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_156:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_157:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_158:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_159:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_160:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_161:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_162:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_163:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_164:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_165:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_166:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_167:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_168:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_169:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_170:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_171:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_172:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_173:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_174:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_175:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_176:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_177:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_178:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_179:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_180:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_181:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_182:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_183:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_184:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_185:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_186:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_187:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_188:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_189:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_190:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_191:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_192:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_193:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_194:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_195:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_196:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_197:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_198:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_199:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_200:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_201:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_202:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_203:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_204:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_205:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_206:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_207:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_208:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_209:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_210:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_211:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_212:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_213:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_214:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_215:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_216:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_217:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_218:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_219:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_220:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_221:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_222:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_223:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_224:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_225:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_226:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_227:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_228:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_229:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_230:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_231:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_232:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_233:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_234:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_235:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_236:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_237:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_238:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_239:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_240:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_241:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_242:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_243:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_244:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_245:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_246:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_247:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_248:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_249:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_250:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_251:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_252:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_253:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_254:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_255:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_256:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_257:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_258:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_259:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_260:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_261:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_262:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_263:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_264:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_265:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_266:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_267:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_268:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_269:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_270:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_271:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_272:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_273:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_274:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_275:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_276:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_277:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_278:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_279:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_280:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_281:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_282:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_283:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_284:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_285:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_286:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_287:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_288:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_289:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_290:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_291:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_292:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_293:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_294:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_295:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_296:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_297:
    .fill 82*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
