
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Apr 17 11:59:21 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/pager/Desktop/work/riscv-arch-test/coverage/cgfs_fext/RV64Zfinx/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fnmadd_b15)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ff000; valaddr_reg:x13; val_offset:101181*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101181*FLEN/8, x14, x8, x12)

inst_33749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e0007ff; valaddr_reg:x13; val_offset:101184*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101184*FLEN/8, x14, x8, x12)

inst_33750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ff800; valaddr_reg:x13; val_offset:101187*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101187*FLEN/8, x14, x8, x12)

inst_33751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e0003ff; valaddr_reg:x13; val_offset:101190*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101190*FLEN/8, x14, x8, x12)

inst_33752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ffc00; valaddr_reg:x13; val_offset:101193*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101193*FLEN/8, x14, x8, x12)

inst_33753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e0001ff; valaddr_reg:x13; val_offset:101196*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101196*FLEN/8, x14, x8, x12)

inst_33754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ffe00; valaddr_reg:x13; val_offset:101199*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101199*FLEN/8, x14, x8, x12)

inst_33755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e0000ff; valaddr_reg:x13; val_offset:101202*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101202*FLEN/8, x14, x8, x12)

inst_33756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7fff00; valaddr_reg:x13; val_offset:101205*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101205*FLEN/8, x14, x8, x12)

inst_33757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e00007f; valaddr_reg:x13; val_offset:101208*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101208*FLEN/8, x14, x8, x12)

inst_33758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7fff80; valaddr_reg:x13; val_offset:101211*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101211*FLEN/8, x14, x8, x12)

inst_33759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e00003f; valaddr_reg:x13; val_offset:101214*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101214*FLEN/8, x14, x8, x12)

inst_33760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7fffc0; valaddr_reg:x13; val_offset:101217*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101217*FLEN/8, x14, x8, x12)

inst_33761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e00001f; valaddr_reg:x13; val_offset:101220*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101220*FLEN/8, x14, x8, x12)

inst_33762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7fffe0; valaddr_reg:x13; val_offset:101223*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101223*FLEN/8, x14, x8, x12)

inst_33763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e00000f; valaddr_reg:x13; val_offset:101226*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101226*FLEN/8, x14, x8, x12)

inst_33764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ffff0; valaddr_reg:x13; val_offset:101229*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101229*FLEN/8, x14, x8, x12)

inst_33765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e000007; valaddr_reg:x13; val_offset:101232*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101232*FLEN/8, x14, x8, x12)

inst_33766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ffff8; valaddr_reg:x13; val_offset:101235*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101235*FLEN/8, x14, x8, x12)

inst_33767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e000003; valaddr_reg:x13; val_offset:101238*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101238*FLEN/8, x14, x8, x12)

inst_33768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ffffc; valaddr_reg:x13; val_offset:101241*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101241*FLEN/8, x14, x8, x12)

inst_33769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e000001; valaddr_reg:x13; val_offset:101244*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101244*FLEN/8, x14, x8, x12)

inst_33770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7e7ffffe; valaddr_reg:x13; val_offset:101247*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101247*FLEN/8, x14, x8, x12)

inst_33771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f7ffff8; valaddr_reg:x13; val_offset:101250*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101250*FLEN/8, x14, x8, x12)

inst_33772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f000007; valaddr_reg:x13; val_offset:101253*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101253*FLEN/8, x14, x8, x12)

inst_33773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f7ffffc; valaddr_reg:x13; val_offset:101256*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101256*FLEN/8, x14, x8, x12)

inst_33774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f000003; valaddr_reg:x13; val_offset:101259*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101259*FLEN/8, x14, x8, x12)

inst_33775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f7ffffe; valaddr_reg:x13; val_offset:101262*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101262*FLEN/8, x14, x8, x12)

inst_33776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f000001; valaddr_reg:x13; val_offset:101265*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101265*FLEN/8, x14, x8, x12)

inst_33777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f36db6d; valaddr_reg:x13; val_offset:101268*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101268*FLEN/8, x14, x8, x12)

inst_33778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f6db6db; valaddr_reg:x13; val_offset:101271*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101271*FLEN/8, x14, x8, x12)

inst_33779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f199999; valaddr_reg:x13; val_offset:101274*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101274*FLEN/8, x14, x8, x12)

inst_33780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f666666; valaddr_reg:x13; val_offset:101277*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101277*FLEN/8, x14, x8, x12)

inst_33781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f3bbbbb; valaddr_reg:x13; val_offset:101280*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101280*FLEN/8, x14, x8, x12)

inst_33782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f444444; valaddr_reg:x13; val_offset:101283*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101283*FLEN/8, x14, x8, x12)

inst_33783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f249249; valaddr_reg:x13; val_offset:101286*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101286*FLEN/8, x14, x8, x12)

inst_33784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f5b6db6; valaddr_reg:x13; val_offset:101289*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101289*FLEN/8, x14, x8, x12)

inst_33785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f333333; valaddr_reg:x13; val_offset:101292*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101292*FLEN/8, x14, x8, x12)

inst_33786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4b332e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x214287 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4b332e; op2val:0x40a14287;
op3val:0x7f4ccccc; valaddr_reg:x13; val_offset:101295*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101295*FLEN/8, x14, x8, x12)

inst_33787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effffff; valaddr_reg:x13; val_offset:101298*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101298*FLEN/8, x14, x8, x12)

inst_33788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e800000; valaddr_reg:x13; val_offset:101301*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101301*FLEN/8, x14, x8, x12)

inst_33789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7ebfffff; valaddr_reg:x13; val_offset:101304*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101304*FLEN/8, x14, x8, x12)

inst_33790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7ec00000; valaddr_reg:x13; val_offset:101307*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101307*FLEN/8, x14, x8, x12)

inst_33791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e9fffff; valaddr_reg:x13; val_offset:101310*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101310*FLEN/8, x14, x8, x12)

inst_33792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7ee00000; valaddr_reg:x13; val_offset:101313*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101313*FLEN/8, x14, x8, x12)

inst_33793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e8fffff; valaddr_reg:x13; val_offset:101316*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101316*FLEN/8, x14, x8, x12)

inst_33794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7ef00000; valaddr_reg:x13; val_offset:101319*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101319*FLEN/8, x14, x8, x12)

inst_33795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e87ffff; valaddr_reg:x13; val_offset:101322*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101322*FLEN/8, x14, x8, x12)

inst_33796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7ef80000; valaddr_reg:x13; val_offset:101325*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101325*FLEN/8, x14, x8, x12)

inst_33797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e83ffff; valaddr_reg:x13; val_offset:101328*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101328*FLEN/8, x14, x8, x12)

inst_33798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efc0000; valaddr_reg:x13; val_offset:101331*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101331*FLEN/8, x14, x8, x12)

inst_33799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e81ffff; valaddr_reg:x13; val_offset:101334*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101334*FLEN/8, x14, x8, x12)

inst_33800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efe0000; valaddr_reg:x13; val_offset:101337*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101337*FLEN/8, x14, x8, x12)

inst_33801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e80ffff; valaddr_reg:x13; val_offset:101340*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101340*FLEN/8, x14, x8, x12)

inst_33802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7eff0000; valaddr_reg:x13; val_offset:101343*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101343*FLEN/8, x14, x8, x12)

inst_33803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e807fff; valaddr_reg:x13; val_offset:101346*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101346*FLEN/8, x14, x8, x12)

inst_33804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7eff8000; valaddr_reg:x13; val_offset:101349*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101349*FLEN/8, x14, x8, x12)

inst_33805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e803fff; valaddr_reg:x13; val_offset:101352*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101352*FLEN/8, x14, x8, x12)

inst_33806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effc000; valaddr_reg:x13; val_offset:101355*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101355*FLEN/8, x14, x8, x12)

inst_33807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e801fff; valaddr_reg:x13; val_offset:101358*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101358*FLEN/8, x14, x8, x12)

inst_33808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effe000; valaddr_reg:x13; val_offset:101361*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101361*FLEN/8, x14, x8, x12)

inst_33809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e800fff; valaddr_reg:x13; val_offset:101364*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101364*FLEN/8, x14, x8, x12)

inst_33810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efff000; valaddr_reg:x13; val_offset:101367*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101367*FLEN/8, x14, x8, x12)

inst_33811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e8007ff; valaddr_reg:x13; val_offset:101370*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101370*FLEN/8, x14, x8, x12)

inst_33812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efff800; valaddr_reg:x13; val_offset:101373*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101373*FLEN/8, x14, x8, x12)

inst_33813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e8003ff; valaddr_reg:x13; val_offset:101376*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101376*FLEN/8, x14, x8, x12)

inst_33814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efffc00; valaddr_reg:x13; val_offset:101379*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101379*FLEN/8, x14, x8, x12)

inst_33815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e8001ff; valaddr_reg:x13; val_offset:101382*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101382*FLEN/8, x14, x8, x12)

inst_33816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efffe00; valaddr_reg:x13; val_offset:101385*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101385*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_264)
inst_33817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e8000ff; valaddr_reg:x13; val_offset:101388*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101388*FLEN/8, x14, x8, x12)

inst_33818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effff00; valaddr_reg:x13; val_offset:101391*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101391*FLEN/8, x14, x8, x12)

inst_33819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e80007f; valaddr_reg:x13; val_offset:101394*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101394*FLEN/8, x14, x8, x12)

inst_33820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effff80; valaddr_reg:x13; val_offset:101397*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101397*FLEN/8, x14, x8, x12)

inst_33821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e80003f; valaddr_reg:x13; val_offset:101400*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101400*FLEN/8, x14, x8, x12)

inst_33822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effffc0; valaddr_reg:x13; val_offset:101403*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101403*FLEN/8, x14, x8, x12)

inst_33823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e80001f; valaddr_reg:x13; val_offset:101406*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101406*FLEN/8, x14, x8, x12)

inst_33824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7effffe0; valaddr_reg:x13; val_offset:101409*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101409*FLEN/8, x14, x8, x12)

inst_33825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e80000f; valaddr_reg:x13; val_offset:101412*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101412*FLEN/8, x14, x8, x12)

inst_33826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efffff0; valaddr_reg:x13; val_offset:101415*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101415*FLEN/8, x14, x8, x12)

inst_33827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e800007; valaddr_reg:x13; val_offset:101418*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101418*FLEN/8, x14, x8, x12)

inst_33828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efffff8; valaddr_reg:x13; val_offset:101421*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101421*FLEN/8, x14, x8, x12)

inst_33829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e800003; valaddr_reg:x13; val_offset:101424*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101424*FLEN/8, x14, x8, x12)

inst_33830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efffffc; valaddr_reg:x13; val_offset:101427*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101427*FLEN/8, x14, x8, x12)

inst_33831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7e800001; valaddr_reg:x13; val_offset:101430*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101430*FLEN/8, x14, x8, x12)

inst_33832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7efffffe; valaddr_reg:x13; val_offset:101433*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101433*FLEN/8, x14, x8, x12)

inst_33833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f7ffff8; valaddr_reg:x13; val_offset:101436*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101436*FLEN/8, x14, x8, x12)

inst_33834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f000007; valaddr_reg:x13; val_offset:101439*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101439*FLEN/8, x14, x8, x12)

inst_33835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f7ffffc; valaddr_reg:x13; val_offset:101442*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101442*FLEN/8, x14, x8, x12)

inst_33836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f000003; valaddr_reg:x13; val_offset:101445*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101445*FLEN/8, x14, x8, x12)

inst_33837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f7ffffe; valaddr_reg:x13; val_offset:101448*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101448*FLEN/8, x14, x8, x12)

inst_33838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f000001; valaddr_reg:x13; val_offset:101451*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101451*FLEN/8, x14, x8, x12)

inst_33839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f36db6d; valaddr_reg:x13; val_offset:101454*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101454*FLEN/8, x14, x8, x12)

inst_33840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f6db6db; valaddr_reg:x13; val_offset:101457*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101457*FLEN/8, x14, x8, x12)

inst_33841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f199999; valaddr_reg:x13; val_offset:101460*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101460*FLEN/8, x14, x8, x12)

inst_33842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f666666; valaddr_reg:x13; val_offset:101463*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101463*FLEN/8, x14, x8, x12)

inst_33843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f3bbbbb; valaddr_reg:x13; val_offset:101466*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101466*FLEN/8, x14, x8, x12)

inst_33844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f444444; valaddr_reg:x13; val_offset:101469*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101469*FLEN/8, x14, x8, x12)

inst_33845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f249249; valaddr_reg:x13; val_offset:101472*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101472*FLEN/8, x14, x8, x12)

inst_33846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f5b6db6; valaddr_reg:x13; val_offset:101475*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101475*FLEN/8, x14, x8, x12)

inst_33847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f333333; valaddr_reg:x13; val_offset:101478*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101478*FLEN/8, x14, x8, x12)

inst_33848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f099 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x710c3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f099; op2val:0x3ff10c3c;
op3val:0x7f4ccccc; valaddr_reg:x13; val_offset:101481*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101481*FLEN/8, x14, x8, x12)

inst_33849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fffff; valaddr_reg:x13; val_offset:101484*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101484*FLEN/8, x14, x8, x12)

inst_33850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000000; valaddr_reg:x13; val_offset:101487*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101487*FLEN/8, x14, x8, x12)

inst_33851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f3fffff; valaddr_reg:x13; val_offset:101490*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101490*FLEN/8, x14, x8, x12)

inst_33852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f400000; valaddr_reg:x13; val_offset:101493*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101493*FLEN/8, x14, x8, x12)

inst_33853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f1fffff; valaddr_reg:x13; val_offset:101496*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101496*FLEN/8, x14, x8, x12)

inst_33854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f600000; valaddr_reg:x13; val_offset:101499*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101499*FLEN/8, x14, x8, x12)

inst_33855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0fffff; valaddr_reg:x13; val_offset:101502*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101502*FLEN/8, x14, x8, x12)

inst_33856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f700000; valaddr_reg:x13; val_offset:101505*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101505*FLEN/8, x14, x8, x12)

inst_33857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f07ffff; valaddr_reg:x13; val_offset:101508*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101508*FLEN/8, x14, x8, x12)

inst_33858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f780000; valaddr_reg:x13; val_offset:101511*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101511*FLEN/8, x14, x8, x12)

inst_33859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f03ffff; valaddr_reg:x13; val_offset:101514*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101514*FLEN/8, x14, x8, x12)

inst_33860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7c0000; valaddr_reg:x13; val_offset:101517*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101517*FLEN/8, x14, x8, x12)

inst_33861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f01ffff; valaddr_reg:x13; val_offset:101520*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101520*FLEN/8, x14, x8, x12)

inst_33862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7e0000; valaddr_reg:x13; val_offset:101523*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101523*FLEN/8, x14, x8, x12)

inst_33863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00ffff; valaddr_reg:x13; val_offset:101526*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101526*FLEN/8, x14, x8, x12)

inst_33864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7f0000; valaddr_reg:x13; val_offset:101529*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101529*FLEN/8, x14, x8, x12)

inst_33865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f007fff; valaddr_reg:x13; val_offset:101532*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101532*FLEN/8, x14, x8, x12)

inst_33866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7f8000; valaddr_reg:x13; val_offset:101535*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101535*FLEN/8, x14, x8, x12)

inst_33867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f003fff; valaddr_reg:x13; val_offset:101538*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101538*FLEN/8, x14, x8, x12)

inst_33868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fc000; valaddr_reg:x13; val_offset:101541*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101541*FLEN/8, x14, x8, x12)

inst_33869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f001fff; valaddr_reg:x13; val_offset:101544*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101544*FLEN/8, x14, x8, x12)

inst_33870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fe000; valaddr_reg:x13; val_offset:101547*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101547*FLEN/8, x14, x8, x12)

inst_33871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000fff; valaddr_reg:x13; val_offset:101550*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101550*FLEN/8, x14, x8, x12)

inst_33872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ff000; valaddr_reg:x13; val_offset:101553*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101553*FLEN/8, x14, x8, x12)

inst_33873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0007ff; valaddr_reg:x13; val_offset:101556*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101556*FLEN/8, x14, x8, x12)

inst_33874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ff800; valaddr_reg:x13; val_offset:101559*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101559*FLEN/8, x14, x8, x12)

inst_33875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0003ff; valaddr_reg:x13; val_offset:101562*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101562*FLEN/8, x14, x8, x12)

inst_33876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ffc00; valaddr_reg:x13; val_offset:101565*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101565*FLEN/8, x14, x8, x12)

inst_33877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0001ff; valaddr_reg:x13; val_offset:101568*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101568*FLEN/8, x14, x8, x12)

inst_33878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ffe00; valaddr_reg:x13; val_offset:101571*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101571*FLEN/8, x14, x8, x12)

inst_33879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0000ff; valaddr_reg:x13; val_offset:101574*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101574*FLEN/8, x14, x8, x12)

inst_33880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fff00; valaddr_reg:x13; val_offset:101577*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101577*FLEN/8, x14, x8, x12)

inst_33881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00007f; valaddr_reg:x13; val_offset:101580*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101580*FLEN/8, x14, x8, x12)

inst_33882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fff80; valaddr_reg:x13; val_offset:101583*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101583*FLEN/8, x14, x8, x12)

inst_33883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00003f; valaddr_reg:x13; val_offset:101586*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101586*FLEN/8, x14, x8, x12)

inst_33884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fffc0; valaddr_reg:x13; val_offset:101589*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101589*FLEN/8, x14, x8, x12)

inst_33885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00001f; valaddr_reg:x13; val_offset:101592*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101592*FLEN/8, x14, x8, x12)

inst_33886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7fffe0; valaddr_reg:x13; val_offset:101595*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101595*FLEN/8, x14, x8, x12)

inst_33887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00000f; valaddr_reg:x13; val_offset:101598*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101598*FLEN/8, x14, x8, x12)

inst_33888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ffff0; valaddr_reg:x13; val_offset:101601*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101601*FLEN/8, x14, x8, x12)

inst_33889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000007; valaddr_reg:x13; val_offset:101604*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101604*FLEN/8, x14, x8, x12)

inst_33890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ffff8; valaddr_reg:x13; val_offset:101607*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101607*FLEN/8, x14, x8, x12)

inst_33891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000003; valaddr_reg:x13; val_offset:101610*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101610*FLEN/8, x14, x8, x12)

inst_33892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ffffc; valaddr_reg:x13; val_offset:101613*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101613*FLEN/8, x14, x8, x12)

inst_33893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000001; valaddr_reg:x13; val_offset:101616*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101616*FLEN/8, x14, x8, x12)

inst_33894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f7ffffe; valaddr_reg:x13; val_offset:101619*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101619*FLEN/8, x14, x8, x12)

inst_33895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f36db6d; valaddr_reg:x13; val_offset:101622*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101622*FLEN/8, x14, x8, x12)

inst_33896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f6db6db; valaddr_reg:x13; val_offset:101625*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101625*FLEN/8, x14, x8, x12)

inst_33897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f199999; valaddr_reg:x13; val_offset:101628*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101628*FLEN/8, x14, x8, x12)

inst_33898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f666666; valaddr_reg:x13; val_offset:101631*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101631*FLEN/8, x14, x8, x12)

inst_33899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f3bbbbb; valaddr_reg:x13; val_offset:101634*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101634*FLEN/8, x14, x8, x12)

inst_33900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f444444; valaddr_reg:x13; val_offset:101637*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101637*FLEN/8, x14, x8, x12)

inst_33901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f249249; valaddr_reg:x13; val_offset:101640*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101640*FLEN/8, x14, x8, x12)

inst_33902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f5b6db6; valaddr_reg:x13; val_offset:101643*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101643*FLEN/8, x14, x8, x12)

inst_33903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f333333; valaddr_reg:x13; val_offset:101646*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101646*FLEN/8, x14, x8, x12)

inst_33904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f4ccccc; valaddr_reg:x13; val_offset:101649*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101649*FLEN/8, x14, x8, x12)

inst_33905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffff; valaddr_reg:x13; val_offset:101652*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101652*FLEN/8, x14, x8, x12)

inst_33906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800000; valaddr_reg:x13; val_offset:101655*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101655*FLEN/8, x14, x8, x12)

inst_33907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5bfffff; valaddr_reg:x13; val_offset:101658*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101658*FLEN/8, x14, x8, x12)

inst_33908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5c00000; valaddr_reg:x13; val_offset:101661*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101661*FLEN/8, x14, x8, x12)

inst_33909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc59fffff; valaddr_reg:x13; val_offset:101664*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101664*FLEN/8, x14, x8, x12)

inst_33910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5e00000; valaddr_reg:x13; val_offset:101667*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101667*FLEN/8, x14, x8, x12)

inst_33911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58fffff; valaddr_reg:x13; val_offset:101670*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101670*FLEN/8, x14, x8, x12)

inst_33912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5f00000; valaddr_reg:x13; val_offset:101673*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101673*FLEN/8, x14, x8, x12)

inst_33913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc587ffff; valaddr_reg:x13; val_offset:101676*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101676*FLEN/8, x14, x8, x12)

inst_33914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5f80000; valaddr_reg:x13; val_offset:101679*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101679*FLEN/8, x14, x8, x12)

inst_33915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc583ffff; valaddr_reg:x13; val_offset:101682*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101682*FLEN/8, x14, x8, x12)

inst_33916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fc0000; valaddr_reg:x13; val_offset:101685*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101685*FLEN/8, x14, x8, x12)

inst_33917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc581ffff; valaddr_reg:x13; val_offset:101688*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101688*FLEN/8, x14, x8, x12)

inst_33918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fe0000; valaddr_reg:x13; val_offset:101691*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101691*FLEN/8, x14, x8, x12)

inst_33919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580ffff; valaddr_reg:x13; val_offset:101694*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101694*FLEN/8, x14, x8, x12)

inst_33920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ff0000; valaddr_reg:x13; val_offset:101697*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101697*FLEN/8, x14, x8, x12)

inst_33921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5807fff; valaddr_reg:x13; val_offset:101700*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101700*FLEN/8, x14, x8, x12)

inst_33922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ff8000; valaddr_reg:x13; val_offset:101703*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101703*FLEN/8, x14, x8, x12)

inst_33923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5803fff; valaddr_reg:x13; val_offset:101706*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101706*FLEN/8, x14, x8, x12)

inst_33924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffc000; valaddr_reg:x13; val_offset:101709*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101709*FLEN/8, x14, x8, x12)

inst_33925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5801fff; valaddr_reg:x13; val_offset:101712*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101712*FLEN/8, x14, x8, x12)

inst_33926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffe000; valaddr_reg:x13; val_offset:101715*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101715*FLEN/8, x14, x8, x12)

inst_33927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800fff; valaddr_reg:x13; val_offset:101718*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101718*FLEN/8, x14, x8, x12)

inst_33928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fff000; valaddr_reg:x13; val_offset:101721*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101721*FLEN/8, x14, x8, x12)

inst_33929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58007ff; valaddr_reg:x13; val_offset:101724*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101724*FLEN/8, x14, x8, x12)

inst_33930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fff800; valaddr_reg:x13; val_offset:101727*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101727*FLEN/8, x14, x8, x12)

inst_33931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58003ff; valaddr_reg:x13; val_offset:101730*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101730*FLEN/8, x14, x8, x12)

inst_33932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffc00; valaddr_reg:x13; val_offset:101733*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101733*FLEN/8, x14, x8, x12)

inst_33933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58001ff; valaddr_reg:x13; val_offset:101736*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101736*FLEN/8, x14, x8, x12)

inst_33934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffe00; valaddr_reg:x13; val_offset:101739*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101739*FLEN/8, x14, x8, x12)

inst_33935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58000ff; valaddr_reg:x13; val_offset:101742*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101742*FLEN/8, x14, x8, x12)

inst_33936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffff00; valaddr_reg:x13; val_offset:101745*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101745*FLEN/8, x14, x8, x12)

inst_33937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580007f; valaddr_reg:x13; val_offset:101748*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101748*FLEN/8, x14, x8, x12)

inst_33938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffff80; valaddr_reg:x13; val_offset:101751*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101751*FLEN/8, x14, x8, x12)

inst_33939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580003f; valaddr_reg:x13; val_offset:101754*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101754*FLEN/8, x14, x8, x12)

inst_33940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffc0; valaddr_reg:x13; val_offset:101757*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101757*FLEN/8, x14, x8, x12)

inst_33941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580001f; valaddr_reg:x13; val_offset:101760*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101760*FLEN/8, x14, x8, x12)

inst_33942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffe0; valaddr_reg:x13; val_offset:101763*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101763*FLEN/8, x14, x8, x12)

inst_33943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580000f; valaddr_reg:x13; val_offset:101766*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101766*FLEN/8, x14, x8, x12)

inst_33944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffff0; valaddr_reg:x13; val_offset:101769*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101769*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_265)
inst_33945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800007; valaddr_reg:x13; val_offset:101772*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101772*FLEN/8, x14, x8, x12)

inst_33946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffff8; valaddr_reg:x13; val_offset:101775*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101775*FLEN/8, x14, x8, x12)

inst_33947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800003; valaddr_reg:x13; val_offset:101778*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101778*FLEN/8, x14, x8, x12)

inst_33948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffffc; valaddr_reg:x13; val_offset:101781*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101781*FLEN/8, x14, x8, x12)

inst_33949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800001; valaddr_reg:x13; val_offset:101784*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101784*FLEN/8, x14, x8, x12)

inst_33950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffffe; valaddr_reg:x13; val_offset:101787*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101787*FLEN/8, x14, x8, x12)

inst_33951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:101790*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101790*FLEN/8, x14, x8, x12)

inst_33952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000007; valaddr_reg:x13; val_offset:101793*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101793*FLEN/8, x14, x8, x12)

inst_33953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:101796*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101796*FLEN/8, x14, x8, x12)

inst_33954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000003; valaddr_reg:x13; val_offset:101799*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101799*FLEN/8, x14, x8, x12)

inst_33955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:101802*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101802*FLEN/8, x14, x8, x12)

inst_33956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000001; valaddr_reg:x13; val_offset:101805*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101805*FLEN/8, x14, x8, x12)

inst_33957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:101808*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101808*FLEN/8, x14, x8, x12)

inst_33958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:101811*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101811*FLEN/8, x14, x8, x12)

inst_33959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff199999; valaddr_reg:x13; val_offset:101814*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101814*FLEN/8, x14, x8, x12)

inst_33960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff666666; valaddr_reg:x13; val_offset:101817*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101817*FLEN/8, x14, x8, x12)

inst_33961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:101820*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101820*FLEN/8, x14, x8, x12)

inst_33962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff444444; valaddr_reg:x13; val_offset:101823*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101823*FLEN/8, x14, x8, x12)

inst_33963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff249249; valaddr_reg:x13; val_offset:101826*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101826*FLEN/8, x14, x8, x12)

inst_33964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:101829*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101829*FLEN/8, x14, x8, x12)

inst_33965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff333333; valaddr_reg:x13; val_offset:101832*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101832*FLEN/8, x14, x8, x12)

inst_33966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:101835*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101835*FLEN/8, x14, x8, x12)

inst_33967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7fffff; valaddr_reg:x13; val_offset:101838*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101838*FLEN/8, x14, x8, x12)

inst_33968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:101841*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101841*FLEN/8, x14, x8, x12)

inst_33969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff000007; valaddr_reg:x13; val_offset:101844*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101844*FLEN/8, x14, x8, x12)

inst_33970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:101847*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101847*FLEN/8, x14, x8, x12)

inst_33971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff000003; valaddr_reg:x13; val_offset:101850*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101850*FLEN/8, x14, x8, x12)

inst_33972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:101853*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101853*FLEN/8, x14, x8, x12)

inst_33973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff000001; valaddr_reg:x13; val_offset:101856*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101856*FLEN/8, x14, x8, x12)

inst_33974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:101859*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101859*FLEN/8, x14, x8, x12)

inst_33975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:101862*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101862*FLEN/8, x14, x8, x12)

inst_33976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff199999; valaddr_reg:x13; val_offset:101865*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101865*FLEN/8, x14, x8, x12)

inst_33977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff666666; valaddr_reg:x13; val_offset:101868*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101868*FLEN/8, x14, x8, x12)

inst_33978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:101871*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101871*FLEN/8, x14, x8, x12)

inst_33979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff444444; valaddr_reg:x13; val_offset:101874*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101874*FLEN/8, x14, x8, x12)

inst_33980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff249249; valaddr_reg:x13; val_offset:101877*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101877*FLEN/8, x14, x8, x12)

inst_33981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:101880*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101880*FLEN/8, x14, x8, x12)

inst_33982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff333333; valaddr_reg:x13; val_offset:101883*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101883*FLEN/8, x14, x8, x12)

inst_33983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:101886*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101886*FLEN/8, x14, x8, x12)

inst_33984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffff; valaddr_reg:x13; val_offset:101889*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101889*FLEN/8, x14, x8, x12)

inst_33985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800000; valaddr_reg:x13; val_offset:101892*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101892*FLEN/8, x14, x8, x12)

inst_33986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdebfffff; valaddr_reg:x13; val_offset:101895*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101895*FLEN/8, x14, x8, x12)

inst_33987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdec00000; valaddr_reg:x13; val_offset:101898*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101898*FLEN/8, x14, x8, x12)

inst_33988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde9fffff; valaddr_reg:x13; val_offset:101901*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101901*FLEN/8, x14, x8, x12)

inst_33989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdee00000; valaddr_reg:x13; val_offset:101904*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101904*FLEN/8, x14, x8, x12)

inst_33990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8fffff; valaddr_reg:x13; val_offset:101907*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101907*FLEN/8, x14, x8, x12)

inst_33991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdef00000; valaddr_reg:x13; val_offset:101910*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101910*FLEN/8, x14, x8, x12)

inst_33992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde87ffff; valaddr_reg:x13; val_offset:101913*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101913*FLEN/8, x14, x8, x12)

inst_33993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdef80000; valaddr_reg:x13; val_offset:101916*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101916*FLEN/8, x14, x8, x12)

inst_33994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde83ffff; valaddr_reg:x13; val_offset:101919*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101919*FLEN/8, x14, x8, x12)

inst_33995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefc0000; valaddr_reg:x13; val_offset:101922*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101922*FLEN/8, x14, x8, x12)

inst_33996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde81ffff; valaddr_reg:x13; val_offset:101925*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101925*FLEN/8, x14, x8, x12)

inst_33997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefe0000; valaddr_reg:x13; val_offset:101928*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101928*FLEN/8, x14, x8, x12)

inst_33998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80ffff; valaddr_reg:x13; val_offset:101931*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101931*FLEN/8, x14, x8, x12)

inst_33999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeff0000; valaddr_reg:x13; val_offset:101934*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101934*FLEN/8, x14, x8, x12)

inst_34000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde807fff; valaddr_reg:x13; val_offset:101937*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101937*FLEN/8, x14, x8, x12)

inst_34001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeff8000; valaddr_reg:x13; val_offset:101940*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101940*FLEN/8, x14, x8, x12)

inst_34002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde803fff; valaddr_reg:x13; val_offset:101943*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101943*FLEN/8, x14, x8, x12)

inst_34003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffc000; valaddr_reg:x13; val_offset:101946*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101946*FLEN/8, x14, x8, x12)

inst_34004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde801fff; valaddr_reg:x13; val_offset:101949*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101949*FLEN/8, x14, x8, x12)

inst_34005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffe000; valaddr_reg:x13; val_offset:101952*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101952*FLEN/8, x14, x8, x12)

inst_34006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800fff; valaddr_reg:x13; val_offset:101955*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101955*FLEN/8, x14, x8, x12)

inst_34007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefff000; valaddr_reg:x13; val_offset:101958*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101958*FLEN/8, x14, x8, x12)

inst_34008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8007ff; valaddr_reg:x13; val_offset:101961*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101961*FLEN/8, x14, x8, x12)

inst_34009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefff800; valaddr_reg:x13; val_offset:101964*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101964*FLEN/8, x14, x8, x12)

inst_34010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8003ff; valaddr_reg:x13; val_offset:101967*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101967*FLEN/8, x14, x8, x12)

inst_34011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffc00; valaddr_reg:x13; val_offset:101970*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101970*FLEN/8, x14, x8, x12)

inst_34012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8001ff; valaddr_reg:x13; val_offset:101973*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101973*FLEN/8, x14, x8, x12)

inst_34013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffe00; valaddr_reg:x13; val_offset:101976*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101976*FLEN/8, x14, x8, x12)

inst_34014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8000ff; valaddr_reg:x13; val_offset:101979*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101979*FLEN/8, x14, x8, x12)

inst_34015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffff00; valaddr_reg:x13; val_offset:101982*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101982*FLEN/8, x14, x8, x12)

inst_34016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80007f; valaddr_reg:x13; val_offset:101985*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101985*FLEN/8, x14, x8, x12)

inst_34017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffff80; valaddr_reg:x13; val_offset:101988*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101988*FLEN/8, x14, x8, x12)

inst_34018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80003f; valaddr_reg:x13; val_offset:101991*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101991*FLEN/8, x14, x8, x12)

inst_34019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffc0; valaddr_reg:x13; val_offset:101994*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101994*FLEN/8, x14, x8, x12)

inst_34020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80001f; valaddr_reg:x13; val_offset:101997*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 101997*FLEN/8, x14, x8, x12)

inst_34021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffe0; valaddr_reg:x13; val_offset:102000*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102000*FLEN/8, x14, x8, x12)

inst_34022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80000f; valaddr_reg:x13; val_offset:102003*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102003*FLEN/8, x14, x8, x12)

inst_34023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffff0; valaddr_reg:x13; val_offset:102006*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102006*FLEN/8, x14, x8, x12)

inst_34024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800007; valaddr_reg:x13; val_offset:102009*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102009*FLEN/8, x14, x8, x12)

inst_34025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffff8; valaddr_reg:x13; val_offset:102012*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102012*FLEN/8, x14, x8, x12)

inst_34026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800003; valaddr_reg:x13; val_offset:102015*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102015*FLEN/8, x14, x8, x12)

inst_34027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffffc; valaddr_reg:x13; val_offset:102018*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102018*FLEN/8, x14, x8, x12)

inst_34028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800001; valaddr_reg:x13; val_offset:102021*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102021*FLEN/8, x14, x8, x12)

inst_34029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffffe; valaddr_reg:x13; val_offset:102024*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102024*FLEN/8, x14, x8, x12)

inst_34030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:102027*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102027*FLEN/8, x14, x8, x12)

inst_34031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000007; valaddr_reg:x13; val_offset:102030*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102030*FLEN/8, x14, x8, x12)

inst_34032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:102033*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102033*FLEN/8, x14, x8, x12)

inst_34033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000003; valaddr_reg:x13; val_offset:102036*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102036*FLEN/8, x14, x8, x12)

inst_34034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:102039*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102039*FLEN/8, x14, x8, x12)

inst_34035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000001; valaddr_reg:x13; val_offset:102042*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102042*FLEN/8, x14, x8, x12)

inst_34036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:102045*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102045*FLEN/8, x14, x8, x12)

inst_34037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:102048*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102048*FLEN/8, x14, x8, x12)

inst_34038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff199999; valaddr_reg:x13; val_offset:102051*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102051*FLEN/8, x14, x8, x12)

inst_34039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff666666; valaddr_reg:x13; val_offset:102054*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102054*FLEN/8, x14, x8, x12)

inst_34040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:102057*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102057*FLEN/8, x14, x8, x12)

inst_34041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff444444; valaddr_reg:x13; val_offset:102060*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102060*FLEN/8, x14, x8, x12)

inst_34042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff249249; valaddr_reg:x13; val_offset:102063*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102063*FLEN/8, x14, x8, x12)

inst_34043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:102066*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102066*FLEN/8, x14, x8, x12)

inst_34044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff333333; valaddr_reg:x13; val_offset:102069*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102069*FLEN/8, x14, x8, x12)

inst_34045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:102072*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102072*FLEN/8, x14, x8, x12)

inst_34046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fffff; valaddr_reg:x13; val_offset:102075*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102075*FLEN/8, x14, x8, x12)

inst_34047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000000; valaddr_reg:x13; val_offset:102078*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102078*FLEN/8, x14, x8, x12)

inst_34048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf3fffff; valaddr_reg:x13; val_offset:102081*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102081*FLEN/8, x14, x8, x12)

inst_34049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf400000; valaddr_reg:x13; val_offset:102084*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102084*FLEN/8, x14, x8, x12)

inst_34050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf1fffff; valaddr_reg:x13; val_offset:102087*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102087*FLEN/8, x14, x8, x12)

inst_34051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf600000; valaddr_reg:x13; val_offset:102090*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102090*FLEN/8, x14, x8, x12)

inst_34052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0fffff; valaddr_reg:x13; val_offset:102093*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102093*FLEN/8, x14, x8, x12)

inst_34053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf700000; valaddr_reg:x13; val_offset:102096*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102096*FLEN/8, x14, x8, x12)

inst_34054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf07ffff; valaddr_reg:x13; val_offset:102099*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102099*FLEN/8, x14, x8, x12)

inst_34055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf780000; valaddr_reg:x13; val_offset:102102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102102*FLEN/8, x14, x8, x12)

inst_34056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf03ffff; valaddr_reg:x13; val_offset:102105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102105*FLEN/8, x14, x8, x12)

inst_34057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7c0000; valaddr_reg:x13; val_offset:102108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102108*FLEN/8, x14, x8, x12)

inst_34058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf01ffff; valaddr_reg:x13; val_offset:102111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102111*FLEN/8, x14, x8, x12)

inst_34059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7e0000; valaddr_reg:x13; val_offset:102114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102114*FLEN/8, x14, x8, x12)

inst_34060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00ffff; valaddr_reg:x13; val_offset:102117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102117*FLEN/8, x14, x8, x12)

inst_34061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7f0000; valaddr_reg:x13; val_offset:102120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102120*FLEN/8, x14, x8, x12)

inst_34062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf007fff; valaddr_reg:x13; val_offset:102123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102123*FLEN/8, x14, x8, x12)

inst_34063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7f8000; valaddr_reg:x13; val_offset:102126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102126*FLEN/8, x14, x8, x12)

inst_34064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf003fff; valaddr_reg:x13; val_offset:102129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102129*FLEN/8, x14, x8, x12)

inst_34065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fc000; valaddr_reg:x13; val_offset:102132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102132*FLEN/8, x14, x8, x12)

inst_34066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf001fff; valaddr_reg:x13; val_offset:102135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102135*FLEN/8, x14, x8, x12)

inst_34067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fe000; valaddr_reg:x13; val_offset:102138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102138*FLEN/8, x14, x8, x12)

inst_34068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000fff; valaddr_reg:x13; val_offset:102141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102141*FLEN/8, x14, x8, x12)

inst_34069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ff000; valaddr_reg:x13; val_offset:102144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102144*FLEN/8, x14, x8, x12)

inst_34070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0007ff; valaddr_reg:x13; val_offset:102147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102147*FLEN/8, x14, x8, x12)

inst_34071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ff800; valaddr_reg:x13; val_offset:102150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102150*FLEN/8, x14, x8, x12)

inst_34072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0003ff; valaddr_reg:x13; val_offset:102153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102153*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_266)
inst_34073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffc00; valaddr_reg:x13; val_offset:102156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102156*FLEN/8, x14, x8, x12)

inst_34074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0001ff; valaddr_reg:x13; val_offset:102159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102159*FLEN/8, x14, x8, x12)

inst_34075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffe00; valaddr_reg:x13; val_offset:102162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102162*FLEN/8, x14, x8, x12)

inst_34076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0000ff; valaddr_reg:x13; val_offset:102165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102165*FLEN/8, x14, x8, x12)

inst_34077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fff00; valaddr_reg:x13; val_offset:102168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102168*FLEN/8, x14, x8, x12)

inst_34078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00007f; valaddr_reg:x13; val_offset:102171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102171*FLEN/8, x14, x8, x12)

inst_34079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fff80; valaddr_reg:x13; val_offset:102174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102174*FLEN/8, x14, x8, x12)

inst_34080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00003f; valaddr_reg:x13; val_offset:102177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102177*FLEN/8, x14, x8, x12)

inst_34081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fffc0; valaddr_reg:x13; val_offset:102180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102180*FLEN/8, x14, x8, x12)

inst_34082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00001f; valaddr_reg:x13; val_offset:102183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102183*FLEN/8, x14, x8, x12)

inst_34083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fffe0; valaddr_reg:x13; val_offset:102186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102186*FLEN/8, x14, x8, x12)

inst_34084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00000f; valaddr_reg:x13; val_offset:102189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102189*FLEN/8, x14, x8, x12)

inst_34085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffff0; valaddr_reg:x13; val_offset:102192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102192*FLEN/8, x14, x8, x12)

inst_34086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000007; valaddr_reg:x13; val_offset:102195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102195*FLEN/8, x14, x8, x12)

inst_34087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffff8; valaddr_reg:x13; val_offset:102198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102198*FLEN/8, x14, x8, x12)

inst_34088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000003; valaddr_reg:x13; val_offset:102201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102201*FLEN/8, x14, x8, x12)

inst_34089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffffc; valaddr_reg:x13; val_offset:102204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102204*FLEN/8, x14, x8, x12)

inst_34090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000001; valaddr_reg:x13; val_offset:102207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102207*FLEN/8, x14, x8, x12)

inst_34091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffffe; valaddr_reg:x13; val_offset:102210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102210*FLEN/8, x14, x8, x12)

inst_34092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:102213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102213*FLEN/8, x14, x8, x12)

inst_34093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff000007; valaddr_reg:x13; val_offset:102216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102216*FLEN/8, x14, x8, x12)

inst_34094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:102219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102219*FLEN/8, x14, x8, x12)

inst_34095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff000003; valaddr_reg:x13; val_offset:102222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102222*FLEN/8, x14, x8, x12)

inst_34096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:102225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102225*FLEN/8, x14, x8, x12)

inst_34097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff000001; valaddr_reg:x13; val_offset:102228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102228*FLEN/8, x14, x8, x12)

inst_34098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:102231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102231*FLEN/8, x14, x8, x12)

inst_34099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:102234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102234*FLEN/8, x14, x8, x12)

inst_34100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff199999; valaddr_reg:x13; val_offset:102237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102237*FLEN/8, x14, x8, x12)

inst_34101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff666666; valaddr_reg:x13; val_offset:102240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102240*FLEN/8, x14, x8, x12)

inst_34102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:102243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102243*FLEN/8, x14, x8, x12)

inst_34103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff444444; valaddr_reg:x13; val_offset:102246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102246*FLEN/8, x14, x8, x12)

inst_34104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff249249; valaddr_reg:x13; val_offset:102249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102249*FLEN/8, x14, x8, x12)

inst_34105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:102252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102252*FLEN/8, x14, x8, x12)

inst_34106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff333333; valaddr_reg:x13; val_offset:102255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102255*FLEN/8, x14, x8, x12)

inst_34107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:102258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102258*FLEN/8, x14, x8, x12)

inst_34108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffffff; valaddr_reg:x13; val_offset:102261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102261*FLEN/8, x14, x8, x12)

inst_34109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800000; valaddr_reg:x13; val_offset:102264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102264*FLEN/8, x14, x8, x12)

inst_34110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfbfffff; valaddr_reg:x13; val_offset:102267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102267*FLEN/8, x14, x8, x12)

inst_34111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfc00000; valaddr_reg:x13; val_offset:102270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102270*FLEN/8, x14, x8, x12)

inst_34112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf9fffff; valaddr_reg:x13; val_offset:102273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102273*FLEN/8, x14, x8, x12)

inst_34113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfe00000; valaddr_reg:x13; val_offset:102276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102276*FLEN/8, x14, x8, x12)

inst_34114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8fffff; valaddr_reg:x13; val_offset:102279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102279*FLEN/8, x14, x8, x12)

inst_34115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdff00000; valaddr_reg:x13; val_offset:102282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102282*FLEN/8, x14, x8, x12)

inst_34116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf87ffff; valaddr_reg:x13; val_offset:102285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102285*FLEN/8, x14, x8, x12)

inst_34117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdff80000; valaddr_reg:x13; val_offset:102288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102288*FLEN/8, x14, x8, x12)

inst_34118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf83ffff; valaddr_reg:x13; val_offset:102291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102291*FLEN/8, x14, x8, x12)

inst_34119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffc0000; valaddr_reg:x13; val_offset:102294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102294*FLEN/8, x14, x8, x12)

inst_34120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf81ffff; valaddr_reg:x13; val_offset:102297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102297*FLEN/8, x14, x8, x12)

inst_34121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffe0000; valaddr_reg:x13; val_offset:102300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102300*FLEN/8, x14, x8, x12)

inst_34122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80ffff; valaddr_reg:x13; val_offset:102303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102303*FLEN/8, x14, x8, x12)

inst_34123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfff0000; valaddr_reg:x13; val_offset:102306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102306*FLEN/8, x14, x8, x12)

inst_34124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf807fff; valaddr_reg:x13; val_offset:102309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102309*FLEN/8, x14, x8, x12)

inst_34125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfff8000; valaddr_reg:x13; val_offset:102312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102312*FLEN/8, x14, x8, x12)

inst_34126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf803fff; valaddr_reg:x13; val_offset:102315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102315*FLEN/8, x14, x8, x12)

inst_34127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffc000; valaddr_reg:x13; val_offset:102318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102318*FLEN/8, x14, x8, x12)

inst_34128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf801fff; valaddr_reg:x13; val_offset:102321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102321*FLEN/8, x14, x8, x12)

inst_34129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffe000; valaddr_reg:x13; val_offset:102324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102324*FLEN/8, x14, x8, x12)

inst_34130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800fff; valaddr_reg:x13; val_offset:102327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102327*FLEN/8, x14, x8, x12)

inst_34131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffff000; valaddr_reg:x13; val_offset:102330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102330*FLEN/8, x14, x8, x12)

inst_34132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8007ff; valaddr_reg:x13; val_offset:102333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102333*FLEN/8, x14, x8, x12)

inst_34133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffff800; valaddr_reg:x13; val_offset:102336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102336*FLEN/8, x14, x8, x12)

inst_34134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8003ff; valaddr_reg:x13; val_offset:102339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102339*FLEN/8, x14, x8, x12)

inst_34135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffc00; valaddr_reg:x13; val_offset:102342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102342*FLEN/8, x14, x8, x12)

inst_34136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8001ff; valaddr_reg:x13; val_offset:102345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102345*FLEN/8, x14, x8, x12)

inst_34137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffe00; valaddr_reg:x13; val_offset:102348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102348*FLEN/8, x14, x8, x12)

inst_34138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8000ff; valaddr_reg:x13; val_offset:102351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102351*FLEN/8, x14, x8, x12)

inst_34139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffff00; valaddr_reg:x13; val_offset:102354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102354*FLEN/8, x14, x8, x12)

inst_34140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80007f; valaddr_reg:x13; val_offset:102357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102357*FLEN/8, x14, x8, x12)

inst_34141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffff80; valaddr_reg:x13; val_offset:102360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102360*FLEN/8, x14, x8, x12)

inst_34142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80003f; valaddr_reg:x13; val_offset:102363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102363*FLEN/8, x14, x8, x12)

inst_34143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffffc0; valaddr_reg:x13; val_offset:102366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102366*FLEN/8, x14, x8, x12)

inst_34144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80001f; valaddr_reg:x13; val_offset:102369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102369*FLEN/8, x14, x8, x12)

inst_34145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffffe0; valaddr_reg:x13; val_offset:102372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102372*FLEN/8, x14, x8, x12)

inst_34146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80000f; valaddr_reg:x13; val_offset:102375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102375*FLEN/8, x14, x8, x12)

inst_34147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffff0; valaddr_reg:x13; val_offset:102378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102378*FLEN/8, x14, x8, x12)

inst_34148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800007; valaddr_reg:x13; val_offset:102381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102381*FLEN/8, x14, x8, x12)

inst_34149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffff8; valaddr_reg:x13; val_offset:102384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102384*FLEN/8, x14, x8, x12)

inst_34150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800003; valaddr_reg:x13; val_offset:102387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102387*FLEN/8, x14, x8, x12)

inst_34151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffffc; valaddr_reg:x13; val_offset:102390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102390*FLEN/8, x14, x8, x12)

inst_34152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800001; valaddr_reg:x13; val_offset:102393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102393*FLEN/8, x14, x8, x12)

inst_34153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffffe; valaddr_reg:x13; val_offset:102396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102396*FLEN/8, x14, x8, x12)

inst_34154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:102399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102399*FLEN/8, x14, x8, x12)

inst_34155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff000007; valaddr_reg:x13; val_offset:102402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102402*FLEN/8, x14, x8, x12)

inst_34156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:102405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102405*FLEN/8, x14, x8, x12)

inst_34157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff000003; valaddr_reg:x13; val_offset:102408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102408*FLEN/8, x14, x8, x12)

inst_34158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:102411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102411*FLEN/8, x14, x8, x12)

inst_34159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff000001; valaddr_reg:x13; val_offset:102414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102414*FLEN/8, x14, x8, x12)

inst_34160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:102417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102417*FLEN/8, x14, x8, x12)

inst_34161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:102420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102420*FLEN/8, x14, x8, x12)

inst_34162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff199999; valaddr_reg:x13; val_offset:102423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102423*FLEN/8, x14, x8, x12)

inst_34163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff666666; valaddr_reg:x13; val_offset:102426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102426*FLEN/8, x14, x8, x12)

inst_34164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:102429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102429*FLEN/8, x14, x8, x12)

inst_34165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff444444; valaddr_reg:x13; val_offset:102432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102432*FLEN/8, x14, x8, x12)

inst_34166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff249249; valaddr_reg:x13; val_offset:102435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102435*FLEN/8, x14, x8, x12)

inst_34167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:102438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102438*FLEN/8, x14, x8, x12)

inst_34168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff333333; valaddr_reg:x13; val_offset:102441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102441*FLEN/8, x14, x8, x12)

inst_34169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:102444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102444*FLEN/8, x14, x8, x12)

inst_34170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fffff; valaddr_reg:x13; val_offset:102447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102447*FLEN/8, x14, x8, x12)

inst_34171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0000000; valaddr_reg:x13; val_offset:102450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102450*FLEN/8, x14, x8, x12)

inst_34172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe03fffff; valaddr_reg:x13; val_offset:102453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102453*FLEN/8, x14, x8, x12)

inst_34173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0400000; valaddr_reg:x13; val_offset:102456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102456*FLEN/8, x14, x8, x12)

inst_34174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe01fffff; valaddr_reg:x13; val_offset:102459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102459*FLEN/8, x14, x8, x12)

inst_34175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0600000; valaddr_reg:x13; val_offset:102462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102462*FLEN/8, x14, x8, x12)

inst_34176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe00fffff; valaddr_reg:x13; val_offset:102465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102465*FLEN/8, x14, x8, x12)

inst_34177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0700000; valaddr_reg:x13; val_offset:102468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102468*FLEN/8, x14, x8, x12)

inst_34178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe007ffff; valaddr_reg:x13; val_offset:102471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102471*FLEN/8, x14, x8, x12)

inst_34179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0780000; valaddr_reg:x13; val_offset:102474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102474*FLEN/8, x14, x8, x12)

inst_34180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe003ffff; valaddr_reg:x13; val_offset:102477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102477*FLEN/8, x14, x8, x12)

inst_34181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07c0000; valaddr_reg:x13; val_offset:102480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102480*FLEN/8, x14, x8, x12)

inst_34182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe001ffff; valaddr_reg:x13; val_offset:102483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102483*FLEN/8, x14, x8, x12)

inst_34183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07e0000; valaddr_reg:x13; val_offset:102486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102486*FLEN/8, x14, x8, x12)

inst_34184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe000ffff; valaddr_reg:x13; val_offset:102489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102489*FLEN/8, x14, x8, x12)

inst_34185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07f0000; valaddr_reg:x13; val_offset:102492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102492*FLEN/8, x14, x8, x12)

inst_34186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0007fff; valaddr_reg:x13; val_offset:102495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102495*FLEN/8, x14, x8, x12)

inst_34187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07f8000; valaddr_reg:x13; val_offset:102498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102498*FLEN/8, x14, x8, x12)

inst_34188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0003fff; valaddr_reg:x13; val_offset:102501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102501*FLEN/8, x14, x8, x12)

inst_34189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fc000; valaddr_reg:x13; val_offset:102504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102504*FLEN/8, x14, x8, x12)

inst_34190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0001fff; valaddr_reg:x13; val_offset:102507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102507*FLEN/8, x14, x8, x12)

inst_34191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fe000; valaddr_reg:x13; val_offset:102510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102510*FLEN/8, x14, x8, x12)

inst_34192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0000fff; valaddr_reg:x13; val_offset:102513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102513*FLEN/8, x14, x8, x12)

inst_34193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ff000; valaddr_reg:x13; val_offset:102516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102516*FLEN/8, x14, x8, x12)

inst_34194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe00007ff; valaddr_reg:x13; val_offset:102519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102519*FLEN/8, x14, x8, x12)

inst_34195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ff800; valaddr_reg:x13; val_offset:102522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102522*FLEN/8, x14, x8, x12)

inst_34196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe00003ff; valaddr_reg:x13; val_offset:102525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102525*FLEN/8, x14, x8, x12)

inst_34197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ffc00; valaddr_reg:x13; val_offset:102528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102528*FLEN/8, x14, x8, x12)

inst_34198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe00001ff; valaddr_reg:x13; val_offset:102531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102531*FLEN/8, x14, x8, x12)

inst_34199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ffe00; valaddr_reg:x13; val_offset:102534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102534*FLEN/8, x14, x8, x12)

inst_34200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe00000ff; valaddr_reg:x13; val_offset:102537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102537*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_267)
inst_34201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fff00; valaddr_reg:x13; val_offset:102540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102540*FLEN/8, x14, x8, x12)

inst_34202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe000007f; valaddr_reg:x13; val_offset:102543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102543*FLEN/8, x14, x8, x12)

inst_34203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fff80; valaddr_reg:x13; val_offset:102546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102546*FLEN/8, x14, x8, x12)

inst_34204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe000003f; valaddr_reg:x13; val_offset:102549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102549*FLEN/8, x14, x8, x12)

inst_34205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fffc0; valaddr_reg:x13; val_offset:102552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102552*FLEN/8, x14, x8, x12)

inst_34206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe000001f; valaddr_reg:x13; val_offset:102555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102555*FLEN/8, x14, x8, x12)

inst_34207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07fffe0; valaddr_reg:x13; val_offset:102558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102558*FLEN/8, x14, x8, x12)

inst_34208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe000000f; valaddr_reg:x13; val_offset:102561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102561*FLEN/8, x14, x8, x12)

inst_34209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ffff0; valaddr_reg:x13; val_offset:102564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102564*FLEN/8, x14, x8, x12)

inst_34210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0000007; valaddr_reg:x13; val_offset:102567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102567*FLEN/8, x14, x8, x12)

inst_34211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ffff8; valaddr_reg:x13; val_offset:102570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102570*FLEN/8, x14, x8, x12)

inst_34212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0000003; valaddr_reg:x13; val_offset:102573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102573*FLEN/8, x14, x8, x12)

inst_34213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ffffc; valaddr_reg:x13; val_offset:102576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102576*FLEN/8, x14, x8, x12)

inst_34214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe0000001; valaddr_reg:x13; val_offset:102579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102579*FLEN/8, x14, x8, x12)

inst_34215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xe07ffffe; valaddr_reg:x13; val_offset:102582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102582*FLEN/8, x14, x8, x12)

inst_34216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:102585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102585*FLEN/8, x14, x8, x12)

inst_34217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff000007; valaddr_reg:x13; val_offset:102588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102588*FLEN/8, x14, x8, x12)

inst_34218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:102591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102591*FLEN/8, x14, x8, x12)

inst_34219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff000003; valaddr_reg:x13; val_offset:102594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102594*FLEN/8, x14, x8, x12)

inst_34220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:102597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102597*FLEN/8, x14, x8, x12)

inst_34221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff000001; valaddr_reg:x13; val_offset:102600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102600*FLEN/8, x14, x8, x12)

inst_34222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:102603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102603*FLEN/8, x14, x8, x12)

inst_34223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:102606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102606*FLEN/8, x14, x8, x12)

inst_34224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff199999; valaddr_reg:x13; val_offset:102609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102609*FLEN/8, x14, x8, x12)

inst_34225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff666666; valaddr_reg:x13; val_offset:102612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102612*FLEN/8, x14, x8, x12)

inst_34226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:102615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102615*FLEN/8, x14, x8, x12)

inst_34227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff444444; valaddr_reg:x13; val_offset:102618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102618*FLEN/8, x14, x8, x12)

inst_34228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff249249; valaddr_reg:x13; val_offset:102621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102621*FLEN/8, x14, x8, x12)

inst_34229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:102624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102624*FLEN/8, x14, x8, x12)

inst_34230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff333333; valaddr_reg:x13; val_offset:102627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102627*FLEN/8, x14, x8, x12)

inst_34231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ffd78 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1d8bc2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4ffd78; op2val:0xc09d8bc2;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:102630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102630*FLEN/8, x14, x8, x12)

inst_34232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffffff; valaddr_reg:x13; val_offset:102633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102633*FLEN/8, x14, x8, x12)

inst_34233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800000; valaddr_reg:x13; val_offset:102636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102636*FLEN/8, x14, x8, x12)

inst_34234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0bfffff; valaddr_reg:x13; val_offset:102639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102639*FLEN/8, x14, x8, x12)

inst_34235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0c00000; valaddr_reg:x13; val_offset:102642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102642*FLEN/8, x14, x8, x12)

inst_34236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe09fffff; valaddr_reg:x13; val_offset:102645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102645*FLEN/8, x14, x8, x12)

inst_34237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0e00000; valaddr_reg:x13; val_offset:102648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102648*FLEN/8, x14, x8, x12)

inst_34238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08fffff; valaddr_reg:x13; val_offset:102651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102651*FLEN/8, x14, x8, x12)

inst_34239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0f00000; valaddr_reg:x13; val_offset:102654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102654*FLEN/8, x14, x8, x12)

inst_34240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe087ffff; valaddr_reg:x13; val_offset:102657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102657*FLEN/8, x14, x8, x12)

inst_34241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0f80000; valaddr_reg:x13; val_offset:102660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102660*FLEN/8, x14, x8, x12)

inst_34242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe083ffff; valaddr_reg:x13; val_offset:102663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102663*FLEN/8, x14, x8, x12)

inst_34243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fc0000; valaddr_reg:x13; val_offset:102666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102666*FLEN/8, x14, x8, x12)

inst_34244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe081ffff; valaddr_reg:x13; val_offset:102669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102669*FLEN/8, x14, x8, x12)

inst_34245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fe0000; valaddr_reg:x13; val_offset:102672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102672*FLEN/8, x14, x8, x12)

inst_34246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080ffff; valaddr_reg:x13; val_offset:102675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102675*FLEN/8, x14, x8, x12)

inst_34247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ff0000; valaddr_reg:x13; val_offset:102678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102678*FLEN/8, x14, x8, x12)

inst_34248:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0807fff; valaddr_reg:x13; val_offset:102681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102681*FLEN/8, x14, x8, x12)

inst_34249:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ff8000; valaddr_reg:x13; val_offset:102684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102684*FLEN/8, x14, x8, x12)

inst_34250:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0803fff; valaddr_reg:x13; val_offset:102687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102687*FLEN/8, x14, x8, x12)

inst_34251:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffc000; valaddr_reg:x13; val_offset:102690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102690*FLEN/8, x14, x8, x12)

inst_34252:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0801fff; valaddr_reg:x13; val_offset:102693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102693*FLEN/8, x14, x8, x12)

inst_34253:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffe000; valaddr_reg:x13; val_offset:102696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102696*FLEN/8, x14, x8, x12)

inst_34254:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800fff; valaddr_reg:x13; val_offset:102699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102699*FLEN/8, x14, x8, x12)

inst_34255:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fff000; valaddr_reg:x13; val_offset:102702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102702*FLEN/8, x14, x8, x12)

inst_34256:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08007ff; valaddr_reg:x13; val_offset:102705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102705*FLEN/8, x14, x8, x12)

inst_34257:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fff800; valaddr_reg:x13; val_offset:102708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102708*FLEN/8, x14, x8, x12)

inst_34258:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08003ff; valaddr_reg:x13; val_offset:102711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102711*FLEN/8, x14, x8, x12)

inst_34259:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffc00; valaddr_reg:x13; val_offset:102714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102714*FLEN/8, x14, x8, x12)

inst_34260:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08001ff; valaddr_reg:x13; val_offset:102717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102717*FLEN/8, x14, x8, x12)

inst_34261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffe00; valaddr_reg:x13; val_offset:102720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102720*FLEN/8, x14, x8, x12)

inst_34262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08000ff; valaddr_reg:x13; val_offset:102723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102723*FLEN/8, x14, x8, x12)

inst_34263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffff00; valaddr_reg:x13; val_offset:102726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102726*FLEN/8, x14, x8, x12)

inst_34264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080007f; valaddr_reg:x13; val_offset:102729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102729*FLEN/8, x14, x8, x12)

inst_34265:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffff80; valaddr_reg:x13; val_offset:102732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102732*FLEN/8, x14, x8, x12)

inst_34266:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080003f; valaddr_reg:x13; val_offset:102735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102735*FLEN/8, x14, x8, x12)

inst_34267:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffffc0; valaddr_reg:x13; val_offset:102738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102738*FLEN/8, x14, x8, x12)

inst_34268:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080001f; valaddr_reg:x13; val_offset:102741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102741*FLEN/8, x14, x8, x12)

inst_34269:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffffe0; valaddr_reg:x13; val_offset:102744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102744*FLEN/8, x14, x8, x12)

inst_34270:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080000f; valaddr_reg:x13; val_offset:102747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102747*FLEN/8, x14, x8, x12)

inst_34271:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffff0; valaddr_reg:x13; val_offset:102750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102750*FLEN/8, x14, x8, x12)

inst_34272:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800007; valaddr_reg:x13; val_offset:102753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102753*FLEN/8, x14, x8, x12)

inst_34273:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffff8; valaddr_reg:x13; val_offset:102756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102756*FLEN/8, x14, x8, x12)

inst_34274:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800003; valaddr_reg:x13; val_offset:102759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102759*FLEN/8, x14, x8, x12)

inst_34275:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffffc; valaddr_reg:x13; val_offset:102762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102762*FLEN/8, x14, x8, x12)

inst_34276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800001; valaddr_reg:x13; val_offset:102765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102765*FLEN/8, x14, x8, x12)

inst_34277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffffe; valaddr_reg:x13; val_offset:102768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102768*FLEN/8, x14, x8, x12)

inst_34278:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:102771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102771*FLEN/8, x14, x8, x12)

inst_34279:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff000007; valaddr_reg:x13; val_offset:102774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102774*FLEN/8, x14, x8, x12)

inst_34280:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:102777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102777*FLEN/8, x14, x8, x12)

inst_34281:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff000003; valaddr_reg:x13; val_offset:102780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102780*FLEN/8, x14, x8, x12)

inst_34282:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:102783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102783*FLEN/8, x14, x8, x12)

inst_34283:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff000001; valaddr_reg:x13; val_offset:102786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102786*FLEN/8, x14, x8, x12)

inst_34284:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:102789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102789*FLEN/8, x14, x8, x12)

inst_34285:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:102792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102792*FLEN/8, x14, x8, x12)

inst_34286:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff199999; valaddr_reg:x13; val_offset:102795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102795*FLEN/8, x14, x8, x12)

inst_34287:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff666666; valaddr_reg:x13; val_offset:102798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102798*FLEN/8, x14, x8, x12)

inst_34288:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:102801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102801*FLEN/8, x14, x8, x12)

inst_34289:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff444444; valaddr_reg:x13; val_offset:102804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102804*FLEN/8, x14, x8, x12)

inst_34290:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff249249; valaddr_reg:x13; val_offset:102807*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102807*FLEN/8, x14, x8, x12)

inst_34291:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:102810*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102810*FLEN/8, x14, x8, x12)

inst_34292:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff333333; valaddr_reg:x13; val_offset:102813*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102813*FLEN/8, x14, x8, x12)

inst_34293:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:102816*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102816*FLEN/8, x14, x8, x12)

inst_34294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fffff; valaddr_reg:x13; val_offset:102819*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102819*FLEN/8, x14, x8, x12)

inst_34295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1000000; valaddr_reg:x13; val_offset:102822*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102822*FLEN/8, x14, x8, x12)

inst_34296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe13fffff; valaddr_reg:x13; val_offset:102825*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102825*FLEN/8, x14, x8, x12)

inst_34297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1400000; valaddr_reg:x13; val_offset:102828*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102828*FLEN/8, x14, x8, x12)

inst_34298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe11fffff; valaddr_reg:x13; val_offset:102831*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102831*FLEN/8, x14, x8, x12)

inst_34299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1600000; valaddr_reg:x13; val_offset:102834*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102834*FLEN/8, x14, x8, x12)

inst_34300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe10fffff; valaddr_reg:x13; val_offset:102837*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102837*FLEN/8, x14, x8, x12)

inst_34301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1700000; valaddr_reg:x13; val_offset:102840*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102840*FLEN/8, x14, x8, x12)

inst_34302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe107ffff; valaddr_reg:x13; val_offset:102843*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102843*FLEN/8, x14, x8, x12)

inst_34303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1780000; valaddr_reg:x13; val_offset:102846*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102846*FLEN/8, x14, x8, x12)

inst_34304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe103ffff; valaddr_reg:x13; val_offset:102849*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102849*FLEN/8, x14, x8, x12)

inst_34305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17c0000; valaddr_reg:x13; val_offset:102852*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102852*FLEN/8, x14, x8, x12)

inst_34306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe101ffff; valaddr_reg:x13; val_offset:102855*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102855*FLEN/8, x14, x8, x12)

inst_34307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17e0000; valaddr_reg:x13; val_offset:102858*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102858*FLEN/8, x14, x8, x12)

inst_34308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe100ffff; valaddr_reg:x13; val_offset:102861*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102861*FLEN/8, x14, x8, x12)

inst_34309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17f0000; valaddr_reg:x13; val_offset:102864*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102864*FLEN/8, x14, x8, x12)

inst_34310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1007fff; valaddr_reg:x13; val_offset:102867*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102867*FLEN/8, x14, x8, x12)

inst_34311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17f8000; valaddr_reg:x13; val_offset:102870*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102870*FLEN/8, x14, x8, x12)

inst_34312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1003fff; valaddr_reg:x13; val_offset:102873*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102873*FLEN/8, x14, x8, x12)

inst_34313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fc000; valaddr_reg:x13; val_offset:102876*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102876*FLEN/8, x14, x8, x12)

inst_34314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1001fff; valaddr_reg:x13; val_offset:102879*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102879*FLEN/8, x14, x8, x12)

inst_34315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fe000; valaddr_reg:x13; val_offset:102882*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102882*FLEN/8, x14, x8, x12)

inst_34316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1000fff; valaddr_reg:x13; val_offset:102885*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102885*FLEN/8, x14, x8, x12)

inst_34317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ff000; valaddr_reg:x13; val_offset:102888*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102888*FLEN/8, x14, x8, x12)

inst_34318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe10007ff; valaddr_reg:x13; val_offset:102891*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102891*FLEN/8, x14, x8, x12)

inst_34319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ff800; valaddr_reg:x13; val_offset:102894*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102894*FLEN/8, x14, x8, x12)

inst_34320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe10003ff; valaddr_reg:x13; val_offset:102897*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102897*FLEN/8, x14, x8, x12)

inst_34321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ffc00; valaddr_reg:x13; val_offset:102900*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102900*FLEN/8, x14, x8, x12)

inst_34322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe10001ff; valaddr_reg:x13; val_offset:102903*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102903*FLEN/8, x14, x8, x12)

inst_34323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ffe00; valaddr_reg:x13; val_offset:102906*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102906*FLEN/8, x14, x8, x12)

inst_34324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe10000ff; valaddr_reg:x13; val_offset:102909*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102909*FLEN/8, x14, x8, x12)

inst_34325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fff00; valaddr_reg:x13; val_offset:102912*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102912*FLEN/8, x14, x8, x12)

inst_34326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe100007f; valaddr_reg:x13; val_offset:102915*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102915*FLEN/8, x14, x8, x12)

inst_34327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fff80; valaddr_reg:x13; val_offset:102918*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102918*FLEN/8, x14, x8, x12)

inst_34328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe100003f; valaddr_reg:x13; val_offset:102921*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102921*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_268)
inst_34329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fffc0; valaddr_reg:x13; val_offset:102924*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102924*FLEN/8, x14, x8, x12)

inst_34330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe100001f; valaddr_reg:x13; val_offset:102927*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102927*FLEN/8, x14, x8, x12)

inst_34331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17fffe0; valaddr_reg:x13; val_offset:102930*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102930*FLEN/8, x14, x8, x12)

inst_34332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe100000f; valaddr_reg:x13; val_offset:102933*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102933*FLEN/8, x14, x8, x12)

inst_34333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ffff0; valaddr_reg:x13; val_offset:102936*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102936*FLEN/8, x14, x8, x12)

inst_34334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1000007; valaddr_reg:x13; val_offset:102939*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102939*FLEN/8, x14, x8, x12)

inst_34335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ffff8; valaddr_reg:x13; val_offset:102942*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102942*FLEN/8, x14, x8, x12)

inst_34336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1000003; valaddr_reg:x13; val_offset:102945*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102945*FLEN/8, x14, x8, x12)

inst_34337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ffffc; valaddr_reg:x13; val_offset:102948*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102948*FLEN/8, x14, x8, x12)

inst_34338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe1000001; valaddr_reg:x13; val_offset:102951*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102951*FLEN/8, x14, x8, x12)

inst_34339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xe17ffffe; valaddr_reg:x13; val_offset:102954*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102954*FLEN/8, x14, x8, x12)

inst_34340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:102957*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102957*FLEN/8, x14, x8, x12)

inst_34341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff000007; valaddr_reg:x13; val_offset:102960*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102960*FLEN/8, x14, x8, x12)

inst_34342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:102963*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102963*FLEN/8, x14, x8, x12)

inst_34343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff000003; valaddr_reg:x13; val_offset:102966*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102966*FLEN/8, x14, x8, x12)

inst_34344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:102969*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102969*FLEN/8, x14, x8, x12)

inst_34345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff000001; valaddr_reg:x13; val_offset:102972*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102972*FLEN/8, x14, x8, x12)

inst_34346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:102975*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102975*FLEN/8, x14, x8, x12)

inst_34347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:102978*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102978*FLEN/8, x14, x8, x12)

inst_34348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff199999; valaddr_reg:x13; val_offset:102981*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102981*FLEN/8, x14, x8, x12)

inst_34349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff666666; valaddr_reg:x13; val_offset:102984*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102984*FLEN/8, x14, x8, x12)

inst_34350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:102987*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102987*FLEN/8, x14, x8, x12)

inst_34351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff444444; valaddr_reg:x13; val_offset:102990*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102990*FLEN/8, x14, x8, x12)

inst_34352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff249249; valaddr_reg:x13; val_offset:102993*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102993*FLEN/8, x14, x8, x12)

inst_34353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:102996*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102996*FLEN/8, x14, x8, x12)

inst_34354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff333333; valaddr_reg:x13; val_offset:102999*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102999*FLEN/8, x14, x8, x12)

inst_34355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62cde6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x107a1a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee2cde6; op2val:0xc0107a1a;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:103002*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103002*FLEN/8, x14, x8, x12)

inst_34356:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffffff; valaddr_reg:x13; val_offset:103005*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103005*FLEN/8, x14, x8, x12)

inst_34357:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1800000; valaddr_reg:x13; val_offset:103008*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103008*FLEN/8, x14, x8, x12)

inst_34358:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1bfffff; valaddr_reg:x13; val_offset:103011*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103011*FLEN/8, x14, x8, x12)

inst_34359:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1c00000; valaddr_reg:x13; val_offset:103014*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103014*FLEN/8, x14, x8, x12)

inst_34360:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe19fffff; valaddr_reg:x13; val_offset:103017*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103017*FLEN/8, x14, x8, x12)

inst_34361:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1e00000; valaddr_reg:x13; val_offset:103020*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103020*FLEN/8, x14, x8, x12)

inst_34362:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe18fffff; valaddr_reg:x13; val_offset:103023*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103023*FLEN/8, x14, x8, x12)

inst_34363:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1f00000; valaddr_reg:x13; val_offset:103026*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103026*FLEN/8, x14, x8, x12)

inst_34364:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe187ffff; valaddr_reg:x13; val_offset:103029*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103029*FLEN/8, x14, x8, x12)

inst_34365:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1f80000; valaddr_reg:x13; val_offset:103032*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103032*FLEN/8, x14, x8, x12)

inst_34366:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe183ffff; valaddr_reg:x13; val_offset:103035*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103035*FLEN/8, x14, x8, x12)

inst_34367:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fc0000; valaddr_reg:x13; val_offset:103038*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103038*FLEN/8, x14, x8, x12)

inst_34368:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe181ffff; valaddr_reg:x13; val_offset:103041*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103041*FLEN/8, x14, x8, x12)

inst_34369:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fe0000; valaddr_reg:x13; val_offset:103044*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103044*FLEN/8, x14, x8, x12)

inst_34370:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe180ffff; valaddr_reg:x13; val_offset:103047*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103047*FLEN/8, x14, x8, x12)

inst_34371:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ff0000; valaddr_reg:x13; val_offset:103050*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103050*FLEN/8, x14, x8, x12)

inst_34372:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1807fff; valaddr_reg:x13; val_offset:103053*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103053*FLEN/8, x14, x8, x12)

inst_34373:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ff8000; valaddr_reg:x13; val_offset:103056*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103056*FLEN/8, x14, x8, x12)

inst_34374:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1803fff; valaddr_reg:x13; val_offset:103059*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103059*FLEN/8, x14, x8, x12)

inst_34375:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffc000; valaddr_reg:x13; val_offset:103062*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103062*FLEN/8, x14, x8, x12)

inst_34376:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1801fff; valaddr_reg:x13; val_offset:103065*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103065*FLEN/8, x14, x8, x12)

inst_34377:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffe000; valaddr_reg:x13; val_offset:103068*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103068*FLEN/8, x14, x8, x12)

inst_34378:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1800fff; valaddr_reg:x13; val_offset:103071*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103071*FLEN/8, x14, x8, x12)

inst_34379:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fff000; valaddr_reg:x13; val_offset:103074*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103074*FLEN/8, x14, x8, x12)

inst_34380:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe18007ff; valaddr_reg:x13; val_offset:103077*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103077*FLEN/8, x14, x8, x12)

inst_34381:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fff800; valaddr_reg:x13; val_offset:103080*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103080*FLEN/8, x14, x8, x12)

inst_34382:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe18003ff; valaddr_reg:x13; val_offset:103083*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103083*FLEN/8, x14, x8, x12)

inst_34383:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffc00; valaddr_reg:x13; val_offset:103086*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103086*FLEN/8, x14, x8, x12)

inst_34384:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe18001ff; valaddr_reg:x13; val_offset:103089*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103089*FLEN/8, x14, x8, x12)

inst_34385:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffe00; valaddr_reg:x13; val_offset:103092*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103092*FLEN/8, x14, x8, x12)

inst_34386:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe18000ff; valaddr_reg:x13; val_offset:103095*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103095*FLEN/8, x14, x8, x12)

inst_34387:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffff00; valaddr_reg:x13; val_offset:103098*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103098*FLEN/8, x14, x8, x12)

inst_34388:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe180007f; valaddr_reg:x13; val_offset:103101*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103101*FLEN/8, x14, x8, x12)

inst_34389:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffff80; valaddr_reg:x13; val_offset:103104*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103104*FLEN/8, x14, x8, x12)

inst_34390:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe180003f; valaddr_reg:x13; val_offset:103107*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103107*FLEN/8, x14, x8, x12)

inst_34391:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffffc0; valaddr_reg:x13; val_offset:103110*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103110*FLEN/8, x14, x8, x12)

inst_34392:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe180001f; valaddr_reg:x13; val_offset:103113*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103113*FLEN/8, x14, x8, x12)

inst_34393:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffffe0; valaddr_reg:x13; val_offset:103116*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103116*FLEN/8, x14, x8, x12)

inst_34394:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe180000f; valaddr_reg:x13; val_offset:103119*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103119*FLEN/8, x14, x8, x12)

inst_34395:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffff0; valaddr_reg:x13; val_offset:103122*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103122*FLEN/8, x14, x8, x12)

inst_34396:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1800007; valaddr_reg:x13; val_offset:103125*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103125*FLEN/8, x14, x8, x12)

inst_34397:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffff8; valaddr_reg:x13; val_offset:103128*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103128*FLEN/8, x14, x8, x12)

inst_34398:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1800003; valaddr_reg:x13; val_offset:103131*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103131*FLEN/8, x14, x8, x12)

inst_34399:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffffc; valaddr_reg:x13; val_offset:103134*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103134*FLEN/8, x14, x8, x12)

inst_34400:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1800001; valaddr_reg:x13; val_offset:103137*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103137*FLEN/8, x14, x8, x12)

inst_34401:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffffe; valaddr_reg:x13; val_offset:103140*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103140*FLEN/8, x14, x8, x12)

inst_34402:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:103143*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103143*FLEN/8, x14, x8, x12)

inst_34403:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff000007; valaddr_reg:x13; val_offset:103146*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103146*FLEN/8, x14, x8, x12)

inst_34404:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:103149*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103149*FLEN/8, x14, x8, x12)

inst_34405:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff000003; valaddr_reg:x13; val_offset:103152*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103152*FLEN/8, x14, x8, x12)

inst_34406:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:103155*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103155*FLEN/8, x14, x8, x12)

inst_34407:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff000001; valaddr_reg:x13; val_offset:103158*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103158*FLEN/8, x14, x8, x12)

inst_34408:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:103161*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103161*FLEN/8, x14, x8, x12)

inst_34409:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:103164*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103164*FLEN/8, x14, x8, x12)

inst_34410:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff199999; valaddr_reg:x13; val_offset:103167*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103167*FLEN/8, x14, x8, x12)

inst_34411:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff666666; valaddr_reg:x13; val_offset:103170*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103170*FLEN/8, x14, x8, x12)

inst_34412:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff3bbbbb; valaddr_reg:x13; val_offset:103173*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103173*FLEN/8, x14, x8, x12)

inst_34413:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff444444; valaddr_reg:x13; val_offset:103176*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103176*FLEN/8, x14, x8, x12)

inst_34414:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff249249; valaddr_reg:x13; val_offset:103179*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103179*FLEN/8, x14, x8, x12)

inst_34415:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff5b6db6; valaddr_reg:x13; val_offset:103182*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103182*FLEN/8, x14, x8, x12)

inst_34416:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff333333; valaddr_reg:x13; val_offset:103185*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103185*FLEN/8, x14, x8, x12)

inst_34417:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff4ccccc; valaddr_reg:x13; val_offset:103188*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103188*FLEN/8, x14, x8, x12)

inst_34418:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fffff; valaddr_reg:x13; val_offset:103191*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103191*FLEN/8, x14, x8, x12)

inst_34419:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2000000; valaddr_reg:x13; val_offset:103194*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103194*FLEN/8, x14, x8, x12)

inst_34420:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe23fffff; valaddr_reg:x13; val_offset:103197*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103197*FLEN/8, x14, x8, x12)

inst_34421:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2400000; valaddr_reg:x13; val_offset:103200*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103200*FLEN/8, x14, x8, x12)

inst_34422:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe21fffff; valaddr_reg:x13; val_offset:103203*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103203*FLEN/8, x14, x8, x12)

inst_34423:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2600000; valaddr_reg:x13; val_offset:103206*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103206*FLEN/8, x14, x8, x12)

inst_34424:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe20fffff; valaddr_reg:x13; val_offset:103209*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103209*FLEN/8, x14, x8, x12)

inst_34425:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2700000; valaddr_reg:x13; val_offset:103212*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103212*FLEN/8, x14, x8, x12)

inst_34426:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe207ffff; valaddr_reg:x13; val_offset:103215*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103215*FLEN/8, x14, x8, x12)

inst_34427:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2780000; valaddr_reg:x13; val_offset:103218*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103218*FLEN/8, x14, x8, x12)

inst_34428:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe203ffff; valaddr_reg:x13; val_offset:103221*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103221*FLEN/8, x14, x8, x12)

inst_34429:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27c0000; valaddr_reg:x13; val_offset:103224*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103224*FLEN/8, x14, x8, x12)

inst_34430:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe201ffff; valaddr_reg:x13; val_offset:103227*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103227*FLEN/8, x14, x8, x12)

inst_34431:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27e0000; valaddr_reg:x13; val_offset:103230*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103230*FLEN/8, x14, x8, x12)

inst_34432:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe200ffff; valaddr_reg:x13; val_offset:103233*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103233*FLEN/8, x14, x8, x12)

inst_34433:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27f0000; valaddr_reg:x13; val_offset:103236*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103236*FLEN/8, x14, x8, x12)

inst_34434:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2007fff; valaddr_reg:x13; val_offset:103239*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103239*FLEN/8, x14, x8, x12)

inst_34435:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27f8000; valaddr_reg:x13; val_offset:103242*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103242*FLEN/8, x14, x8, x12)

inst_34436:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2003fff; valaddr_reg:x13; val_offset:103245*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103245*FLEN/8, x14, x8, x12)

inst_34437:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fc000; valaddr_reg:x13; val_offset:103248*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103248*FLEN/8, x14, x8, x12)

inst_34438:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2001fff; valaddr_reg:x13; val_offset:103251*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103251*FLEN/8, x14, x8, x12)

inst_34439:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fe000; valaddr_reg:x13; val_offset:103254*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103254*FLEN/8, x14, x8, x12)

inst_34440:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2000fff; valaddr_reg:x13; val_offset:103257*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103257*FLEN/8, x14, x8, x12)

inst_34441:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ff000; valaddr_reg:x13; val_offset:103260*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103260*FLEN/8, x14, x8, x12)

inst_34442:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe20007ff; valaddr_reg:x13; val_offset:103263*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103263*FLEN/8, x14, x8, x12)

inst_34443:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ff800; valaddr_reg:x13; val_offset:103266*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103266*FLEN/8, x14, x8, x12)

inst_34444:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe20003ff; valaddr_reg:x13; val_offset:103269*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103269*FLEN/8, x14, x8, x12)

inst_34445:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ffc00; valaddr_reg:x13; val_offset:103272*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103272*FLEN/8, x14, x8, x12)

inst_34446:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe20001ff; valaddr_reg:x13; val_offset:103275*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103275*FLEN/8, x14, x8, x12)

inst_34447:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ffe00; valaddr_reg:x13; val_offset:103278*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103278*FLEN/8, x14, x8, x12)

inst_34448:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe20000ff; valaddr_reg:x13; val_offset:103281*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103281*FLEN/8, x14, x8, x12)

inst_34449:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fff00; valaddr_reg:x13; val_offset:103284*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103284*FLEN/8, x14, x8, x12)

inst_34450:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe200007f; valaddr_reg:x13; val_offset:103287*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103287*FLEN/8, x14, x8, x12)

inst_34451:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fff80; valaddr_reg:x13; val_offset:103290*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103290*FLEN/8, x14, x8, x12)

inst_34452:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe200003f; valaddr_reg:x13; val_offset:103293*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103293*FLEN/8, x14, x8, x12)

inst_34453:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fffc0; valaddr_reg:x13; val_offset:103296*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103296*FLEN/8, x14, x8, x12)

inst_34454:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe200001f; valaddr_reg:x13; val_offset:103299*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103299*FLEN/8, x14, x8, x12)

inst_34455:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27fffe0; valaddr_reg:x13; val_offset:103302*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103302*FLEN/8, x14, x8, x12)

inst_34456:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe200000f; valaddr_reg:x13; val_offset:103305*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103305*FLEN/8, x14, x8, x12)

RVTEST_SIGBASE(x8,signature_x8_269)
inst_34457:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ffff0; valaddr_reg:x13; val_offset:103308*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103308*FLEN/8, x14, x8, x12)

inst_34458:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2000007; valaddr_reg:x13; val_offset:103311*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103311*FLEN/8, x14, x8, x12)

inst_34459:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ffff8; valaddr_reg:x13; val_offset:103314*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103314*FLEN/8, x14, x8, x12)

inst_34460:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2000003; valaddr_reg:x13; val_offset:103317*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103317*FLEN/8, x14, x8, x12)

inst_34461:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ffffc; valaddr_reg:x13; val_offset:103320*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103320*FLEN/8, x14, x8, x12)

inst_34462:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe2000001; valaddr_reg:x13; val_offset:103323*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103323*FLEN/8, x14, x8, x12)

inst_34463:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xe27ffffe; valaddr_reg:x13; val_offset:103326*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103326*FLEN/8, x14, x8, x12)

inst_34464:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff7ffff8; valaddr_reg:x13; val_offset:103329*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103329*FLEN/8, x14, x8, x12)

inst_34465:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff000007; valaddr_reg:x13; val_offset:103332*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103332*FLEN/8, x14, x8, x12)

inst_34466:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff7ffffc; valaddr_reg:x13; val_offset:103335*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103335*FLEN/8, x14, x8, x12)

inst_34467:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff000003; valaddr_reg:x13; val_offset:103338*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103338*FLEN/8, x14, x8, x12)

inst_34468:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff7ffffe; valaddr_reg:x13; val_offset:103341*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103341*FLEN/8, x14, x8, x12)

inst_34469:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff000001; valaddr_reg:x13; val_offset:103344*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103344*FLEN/8, x14, x8, x12)

inst_34470:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff36db6d; valaddr_reg:x13; val_offset:103347*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103347*FLEN/8, x14, x8, x12)

inst_34471:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff6db6db; valaddr_reg:x13; val_offset:103350*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103350*FLEN/8, x14, x8, x12)

inst_34472:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff199999; valaddr_reg:x13; val_offset:103353*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103353*FLEN/8, x14, x8, x12)

inst_34473:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4dd214 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x1f34e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4dd214; op2val:0xc19f34e2;
op3val:0xff666666; valaddr_reg:x13; val_offset:103356*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 103356*FLEN/8, x14, x8, x12)

#endif
RVTEST_CODE_END
RVMODEL_HALT
RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2118857518,32,FLEN)
NAN_BOXED(1084310151,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706431,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317824,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2126512127,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2126512128,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2124414975,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2128609280,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2123366399,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2129657856,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122842111,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130182144,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122579967,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130444288,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122448895,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130575360,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122383359,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130640896,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122350591,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130673664,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122334207,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130690048,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122326015,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130698240,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122321919,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130702336,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122319871,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130704384,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122318847,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130705408,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122318335,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130705920,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122318079,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706176,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317951,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706304,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317887,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706368,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317855,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706400,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317839,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706416,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317831,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706424,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317827,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706428,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2122317825,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706430,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131226777,32,FLEN)
NAN_BOXED(1072761916,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134900735,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134900736,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2132803583,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2136997888,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2131755007,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2138046464,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2131230719,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2138570752,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130968575,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2138832896,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130837503,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2138963968,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130771967,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139029504,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130739199,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139062272,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130722815,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139078656,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130714623,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139086848,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130710527,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139090944,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130708479,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139092992,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130707455,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139094016,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706943,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139094528,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706687,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139094784,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706559,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139094912,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706495,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139094976,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706463,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139095008,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706447,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139095024,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888767,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500160,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3317694463,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3317694464,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3315597311,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3319791616,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3314548735,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3320840192,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3314024447,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321364480,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313762303,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321626624,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313631231,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321757696,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313565695,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321823232,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313532927,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321856000,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313516543,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321872384,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313508351,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321880576,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313504255,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321884672,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313502207,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321886720,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313501183,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321887744,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500671,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888256,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500415,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888512,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500287,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888640,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500223,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888704,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500191,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888736,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500175,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888752,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500167,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888760,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500163,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888764,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500161,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888766,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319167,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930560,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3737124863,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3737124864,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3735027711,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3739222016,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733979135,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3740270592,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733454847,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3740794880,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733192703,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741057024,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733061631,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741188096,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732996095,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741253632,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732963327,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741286400,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732946943,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741302784,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732938751,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741310976,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732934655,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741315072,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732932607,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741317120,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732931583,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318144,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732931071,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318656,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930815,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318912,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930687,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319040,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930623,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319104,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930591,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319136,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930575,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319152,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930567,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319160,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930563,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319164,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930561,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319166,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707775,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319168,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3745513471,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3745513472,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3743416319,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3747610624,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3742367743,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3748659200,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741843455,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749183488,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741581311,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749445632,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741450239,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749576704,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741384703,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749642240,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741351935,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749675008,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741335551,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749691392,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741327359,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749699584,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741323263,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749703680,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741321215,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749705728,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741320191,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749706752,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319679,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707264,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319423,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707520,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319295,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707648,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319231,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707712,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319199,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707744,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319183,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707760,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319175,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707768,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319171,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707772,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319169,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707774,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096383,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707776,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3753902079,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3753902080,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3751804927,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3755999232,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3750756351,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757047808,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3750232063,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757572096,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749969919,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757834240,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749838847,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757965312,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749773311,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758030848,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749740543,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758063616,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749724159,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758080000,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749715967,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758088192,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749711871,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758092288,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749709823,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758094336,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749708799,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758095360,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749708287,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758095872,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749708031,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096128,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707903,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096256,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707839,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096320,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707807,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096352,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707791,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096368,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707783,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096376,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707779,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096380,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707777,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096382,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484991,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096384,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3762290687,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3762290688,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3760193535,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3764387840,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3759144959,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3765436416,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758620671,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3765960704,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758358527,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766222848,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758227455,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766353920,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758161919,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766419456,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758129151,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766452224,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758112767,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766468608,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758104575,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766476800,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758100479,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766480896,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758098431,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766482944,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758097407,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766483968,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096895,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484480,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096639,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484736,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096511,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484864,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096447,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484928,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096415,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484960,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096399,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484976,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096391,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484984,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096387,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484988,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3758096385,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(3766484990,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2119171448,32,FLEN)
NAN_BOXED(3231550402,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873599,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484992,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3770679295,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3770679296,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3768582143,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3772776448,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3767533567,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3773825024,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3767009279,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774349312,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766747135,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774611456,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766616063,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774742528,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766550527,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774808064,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766517759,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774840832,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766501375,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774857216,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766493183,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774865408,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766489087,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774869504,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766487039,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774871552,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766486015,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774872576,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485503,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873088,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485247,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873344,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485119,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873472,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485055,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873536,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485023,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873568,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485007,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873584,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484999,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873592,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484995,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873596,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484993,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873598,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262207,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873600,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3779067903,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3779067904,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3776970751,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3781165056,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3775922175,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3782213632,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3775397887,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3782737920,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3775135743,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783000064,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3775004671,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783131136,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774939135,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783196672,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774906367,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783229440,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774889983,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783245824,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774881791,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783254016,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774877695,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783258112,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774875647,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783260160,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774874623,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783261184,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774874111,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783261696,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873855,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783261952,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873727,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262080,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873663,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262144,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873631,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262176,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873615,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262192,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873607,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262200,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873603,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262204,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3774873601,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(3783262206,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2128793062,32,FLEN)
NAN_BOXED(3222305306,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650815,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262208,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3787456511,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3787456512,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3785359359,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3789553664,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3784310783,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3790602240,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783786495,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791126528,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783524351,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791388672,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783393279,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791519744,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783327743,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791585280,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783294975,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791618048,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783278591,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791634432,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783270399,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791642624,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783266303,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791646720,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783264255,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791648768,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783263231,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791649792,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262719,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650304,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262463,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650560,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262335,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650688,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262271,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650752,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262239,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650784,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262223,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650800,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262215,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650808,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262211,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650812,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783262209,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650814,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039423,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650816,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3795845119,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3795845120,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3793747967,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3797942272,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3792699391,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3798990848,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3792175103,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3799515136,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791912959,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3799777280,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791781887,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3799908352,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791716351,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3799973888,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791683583,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800006656,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791667199,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800023040,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791659007,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800031232,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791654911,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800035328,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791652863,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800037376,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791651839,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800038400,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791651327,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800038912,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791651071,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039168,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650943,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039296,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650879,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039360,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650847,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039392,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650831,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039408,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650823,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039416,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650819,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039420,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3791650817,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(3800039422,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2102252052,32,FLEN)
NAN_BOXED(3248436450,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808428031,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039424,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3804233727,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3804233728,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3802136575,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3806330880,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3801087999,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3807379456,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800563711,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3807903744,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800301567,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808165888,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800170495,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808296960,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800104959,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808362496,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800072191,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808395264,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800055807,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808411648,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800047615,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808419840,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800043519,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808423936,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800041471,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808425984,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800040447,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808427008,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039935,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808427520,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039679,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808427776,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039551,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808427904,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039487,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808427968,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039455,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808428000,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039439,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808428016,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039431,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808428024,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039427,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808428028,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039425,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808428030,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816639,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3808428032,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3812622335,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_12:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_13:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_14:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_15:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_16:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_17:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_18:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_19:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_20:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_21:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_22:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_23:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_24:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_25:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_26:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_27:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_28:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_29:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_30:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_31:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_32:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_33:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_34:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_35:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_36:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_37:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_38:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_39:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_40:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_41:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_42:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_43:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_44:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_45:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_46:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_47:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_48:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_49:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_50:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_51:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_52:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_53:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_54:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_55:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_56:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_57:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_58:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_59:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_60:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_61:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_62:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_63:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_64:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_65:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_66:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_67:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_68:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_69:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_70:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_71:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_72:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_73:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_74:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_75:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_76:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_77:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_78:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_79:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_80:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_81:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_82:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_83:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_84:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_85:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_86:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_87:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_88:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_89:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_90:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_91:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_92:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_93:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_94:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_95:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_96:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_97:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_98:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_99:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_100:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_101:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_102:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_103:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_104:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_105:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_106:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_107:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_108:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_109:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_110:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_111:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_112:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_113:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_114:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_115:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_116:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_117:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_118:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_119:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_120:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_121:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_122:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_123:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_124:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_125:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_126:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_127:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_128:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_129:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_130:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_131:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_132:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_133:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_134:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_135:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_136:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_137:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_138:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_139:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_140:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_141:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_142:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_143:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_144:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_145:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_146:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_147:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_148:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_149:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_150:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_151:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_152:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_153:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_154:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_155:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_156:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_157:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_158:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_159:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_160:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_161:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_162:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_163:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_164:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_165:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_166:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_167:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_168:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_169:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_170:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_171:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_172:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_173:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_174:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_175:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_176:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_177:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_178:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_179:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_180:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_181:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_182:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_183:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_184:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_185:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_186:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_187:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_188:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_189:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_190:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_191:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_192:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_193:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_194:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_195:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_196:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_197:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_198:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_199:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_200:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_201:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_202:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_203:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_204:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_205:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_206:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_207:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_208:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_209:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_210:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_211:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_212:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_213:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_214:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_215:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_216:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_217:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_218:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_219:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_220:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_221:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_222:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_223:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_224:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_225:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_226:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_227:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_228:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_229:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_230:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_231:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_232:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_233:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_234:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_235:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_236:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_237:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_238:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_239:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_240:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_241:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_242:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_243:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_244:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_245:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_246:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_247:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_248:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_249:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_250:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_251:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_252:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_253:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_254:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_255:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_256:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_257:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_258:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_259:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_260:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_261:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_262:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_263:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_264:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_265:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_266:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_267:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_268:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_269:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_270:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_271:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_272:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_273:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_274:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_275:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_276:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_277:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_278:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_279:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_280:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_281:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_282:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_283:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_284:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_285:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_286:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_287:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_288:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_289:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_290:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_291:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_292:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_293:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_294:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_295:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_296:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_297:
    .fill 82*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
